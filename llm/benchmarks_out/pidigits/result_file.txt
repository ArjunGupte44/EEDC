{
    "0": [
        "#include <gmpxx.h>\n#include <cstdlib>\n#include <iostream>\n\nclass LFT {\npublic:\n    mpz_class q;\n    mpz_class r;\n    mpz_class t;\n    unsigned k;\n\npublic:\n    LFT() : q(1), r(0), t(1), k(0){};\n\n    void next() {\n        ++k;\n        r = (2 * k + 1) * (2 * q + r);\n        t = (2 * k + 1) * t;\n        q = q * k;\n    }\n\n    unsigned extract(unsigned x) const {\n        static mpz_class tmp0, tmp1;\n        tmp0 = q * x + r;\n        tmp1 = tmp0 / t;\n        return tmp1.get_ui();\n    }\n\n    void produce(unsigned n) {\n        q = 10 * q;\n        r = 10 * (r - n * t);\n    }\n};\n\nint main(int, char** argv) {\n    std::ios_base::sync_with_stdio(false);\n\n    const std::size_t TOTAL_DIGITS = std::atol(argv[1]);\n\n    LFT lft;\n    std::size_t n_digits = 0;\n    while (n_digits < TOTAL_DIGITS) {\n        std::size_t i = 0;\n        while (i < 10 and n_digits < TOTAL_DIGITS) {\n            lft.next();\n            if (lft.q > lft.r) continue;\n\n            auto digit = lft.extract(3);\n            if (digit == lft.extract(4)) {\n                std::cout << digit;\n                lft.produce(digit);\n                ++i;\n                ++n_digits;\n            }\n        }\n\n        // Pad digits with extra spaces if TOTAL_DIGITS was not a\n        // multiple of 10.\n        for (; i < 10; ++i) std::cout << ' ';\n        std::cout << \"\\t:\" << n_digits << '\\n';\n    }\n}",
        27.536,
        538.034
    ],
    "1": [
        "#include <gmpxx.h>\n#include <cstdlib>\n#include <iostream>\n\nclass LFT {\npublic:\n    mpz_class q;\n    mpz_class r;\n    mpz_class t;\n    unsigned k;\n\npublic:\n    LFT() : q(1), r(0), t(1), k(0){};\n\n    void next() {\n        ++k;\n        r = (2 * k + 1) * (2 * q + r);\n        t = (2 * k + 1) * t;\n        q = q * k;\n    }\n\n    unsigned extract(unsigned x) const {\n        static mpz_class tmp0, tmp1;\n        tmp0 = q * x + r;\n        tmp1 = tmp0 / t;\n        return tmp1.get_ui();\n    }\n\n    void produce(unsigned n) {\n        q = 10 * q;\n        r = 10 * (r - n * t);\n    }\n};\n\nint main(int argc, char** argv) {\n    std::ios_base::sync_with_stdio(false);\n\n    const std::size_t TOTAL_DIGITS = std::atol(argv[1]);\n\n    LFT lft;\n    std::size_t n_digits = 0;\n    \n    // Buffer for batch output\n    std::string output_buffer;\n\n    while (n_digits < TOTAL_DIGITS) {\n        lft.next();\n        if (lft.q > lft.r) continue;\n\n        auto digit = lft.extract(3);\n        if (digit == lft.extract(4)) {\n            // Append digit to buffer\n            output_buffer.push_back('0' + digit);\n            lft.produce(digit);\n            ++n_digits;\n\n            // Once every 10 digits or at end, print buffer\n            if (n_digits % 10 == 0 || n_digits == TOTAL_DIGITS) {\n                std::cout << output_buffer;\n\n                // Pad digits with extra spaces if TOTAL_DIGITS was not a multiple of 10\n                for (std::size_t i = output_buffer.length(); i < 10; ++i) std::cout << ' ';\n\n                std::cout << \"\\t:\" << n_digits << '\\n';\n                output_buffer.clear();\n            }\n        }\n    }\n}",
        27.58,
        535.513
    ],
    "2": [
        "#include <gmpxx.h>\n#include <cstdlib>\n#include <iostream>\n\nclass LFT {\npublic:\n    mpz_class q;\n    mpz_class r;\n    mpz_class t;\n    unsigned k;\n\npublic:\n    LFT() : q(1), r(0), t(1), k(0){};\n\n    void next() {\n        ++k;\n        r = (2 * k + 1) * (2 * q + r);\n        t = (2 * k + 1) * t;\n        q = q * k;\n    }\n\n    unsigned extract(unsigned x) const {\n        static mpz_class tmp0, tmp1;\n        tmp0 = q * x + r;\n        tmp1 = tmp0 / t;\n        return tmp1.get_ui();\n    }\n\n    void produce(unsigned n) {\n        q = 10 * q;\n        r = 10 * (r - n * t);\n    }\n};\n\nint main(int argc, char** argv) {\n    std::ios_base::sync_with_stdio(false);\n\n    const std::size_t TOTAL_DIGITS = std::atol(argv[1]);\n\n    LFT lft;\n    std::size_t n_digits = 0;\n    \n    // Buffer for batch output\n    std::string output_buffer;\n\n    while (n_digits < TOTAL_DIGITS) {\n        lft.next();\n        if (lft.q > lft.r) continue;\n\n        auto digit = lft.extract(3);\n        if (digit == lft.extract(4)) {\n            // Append digit to buffer\n            output_buffer.push_back('0' + digit);\n            lft.produce(digit);\n            ++n_digits;\n\n            // Once every 10 digits or at end, print buffer\n            if (n_digits % 10 == 0 || n_digits == TOTAL_DIGITS) {\n                std::cout << output_buffer;\n\n                // Pad digits with extra spaces if TOTAL_DIGITS was not a multiple of 10\n                for (std::size_t i = output_buffer.length(); i < 10; ++i) std::cout << ' ';\n\n                std::cout << \"\\t:\" << n_digits << '\\n';\n                output_buffer.clear();\n            }\n        }\n    }\n}",
        27.186,
        529.578
    ],
    "3": [
        "#include <gmpxx.h>\n#include <cstdlib>\n#include <iostream>\n\nclass LFT {\npublic:\n    mpz_class q;\n    mpz_class r;\n    mpz_class t;\n    unsigned k;\n\npublic:\n    LFT() : q(1), r(0), t(1), k(0){};\n\n    void next() {\n        ++k;\n        r = (2 * k + 1) * (2 * q + r);\n        t = (2 * k + 1) * t;\n        q = q * k;\n    }\n\n    unsigned extract(unsigned x) const {\n        static mpz_class tmp0, tmp1;\n        tmp0 = q * x + r;\n        tmp1 = tmp0 / t;\n        return tmp1.get_ui();\n    }\n\n    void produce(unsigned n) {\n        q = 10 * q;\n        r = 10 * (r - n * t);\n    }\n};\n\nint main(int argc, char** argv) {\n    std::ios_base::sync_with_stdio(false);\n\n    const std::size_t TOTAL_DIGITS = std::atol(argv[1]);\n\n    LFT lft;\n    std::size_t n_digits = 0;\n    \n    // Buffer for batch output\n    std::string output_buffer;\n\n    while (n_digits < TOTAL_DIGITS) {\n        lft.next();\n        if (lft.q > lft.r) continue;\n\n        auto digit = lft.extract(3);\n        if (digit == lft.extract(4)) {\n            // Append digit to buffer\n            output_buffer.push_back('0' + digit);\n            lft.produce(digit);\n            ++n_digits;\n\n            // Once every 10 digits or at end, print buffer\n            if (n_digits % 10 == 0 || n_digits == TOTAL_DIGITS) {\n                std::cout << output_buffer;\n\n                // Pad digits with extra spaces if TOTAL_DIGITS was not a multiple of 10\n                for (std::size_t i = output_buffer.length(); i < 10; ++i) std::cout << ' ';\n\n                std::cout << \"\\t:\" << n_digits << '\\n';\n                output_buffer.clear();\n            }\n        }\n    }\n}",
        27.367,
        531.96
    ],
    "4": [
        "#include <gmpxx.h>\n#include <cstdlib>\n#include <iostream>\n\nclass LFT {\npublic:\n    mpz_class q;\n    mpz_class r;\n    mpz_class t;\n    unsigned k;\n\npublic:\n    LFT() : q(1), r(0), t(1), k(0){};\n\n    void next() {\n        ++k;\n        r = (2 * k + 1) * (2 * q + r);\n        t = (2 * k + 1) * t;\n        q = q * k;\n    }\n\n    unsigned extract(unsigned x) const {\n        static mpz_class tmp0, tmp1;\n        tmp0 = q * x + r;\n        tmp1 = tmp0 / t;\n        return tmp1.get_ui();\n    }\n\n    void produce(unsigned n) {\n        q = 10 * q;\n        r = 10 * (r - n * t);\n    }\n};\n\nint main(int argc, char** argv) {\n    std::ios_base::sync_with_stdio(false);\n\n    const std::size_t TOTAL_DIGITS = std::atol(argv[1]);\n\n    LFT lft;\n    std::size_t n_digits = 0;\n    \n    // Buffer for batch output\n    std::string output_buffer;\n\n    while (n_digits < TOTAL_DIGITS) {\n        lft.next();\n        if (lft.q > lft.r) continue;\n\n        auto digit = lft.extract(3);\n        if (digit == lft.extract(4)) {\n            // Append digit to buffer\n            output_buffer.push_back('0' + digit);\n            lft.produce(digit);\n            ++n_digits;\n\n            // Once every 10 digits or at end, print buffer\n            if (n_digits % 10 == 0 || n_digits == TOTAL_DIGITS) {\n                std::cout << output_buffer;\n\n                // Pad digits with extra spaces if TOTAL_DIGITS was not a multiple of 10\n                for (std::size_t i = output_buffer.length(); i < 10; ++i) std::cout << ' ';\n\n                std::cout << \"\\t:\" << n_digits << '\\n';\n                output_buffer.clear();\n            }\n        }\n    }\n}",
        27.017,
        515.147
    ],
    "5": [
        "#include <gmpxx.h>\n#include <cstdlib>\n#include <iostream>\n\nclass LFT {\npublic:\n    mpz_class q;\n    mpz_class r;\n    mpz_class t;\n    unsigned k;\n\npublic:\n    LFT() : q(1), r(0), t(1), k(0){};\n\n    void next() {\n        ++k;\n        r = (2 * k + 1) * (2 * q + r);\n        t = (2 * k + 1) * t;\n        q = q * k;\n    }\n\n    unsigned extract(unsigned x) const {\n        static mpz_class tmp0, tmp1;\n        tmp0 = q * x + r;\n        tmp1 = tmp0 / t;\n        return tmp1.get_ui();\n    }\n\n    void produce(unsigned n) {\n        q = 10 * q;\n        r = 10 * (r - n * t);\n    }\n};\n\nint main(int argc, char** argv) {\n    std::ios_base::sync_with_stdio(false);\n\n    const std::size_t TOTAL_DIGITS = std::atol(argv[1]);\n\n    LFT lft;\n    std::size_t n_digits = 0;\n    \n    // Buffer for batch output\n    std::string output_buffer;\n\n    while (n_digits < TOTAL_DIGITS) {\n        lft.next();\n        if (lft.q > lft.r) continue;\n\n        auto digit = lft.extract(3);\n        if (digit == lft.extract(4)) {\n            // Append digit to buffer\n            output_buffer.push_back('0' + digit);\n            lft.produce(digit);\n            ++n_digits;\n\n            // Once every 10 digits or at end, print buffer\n            if (n_digits % 10 == 0 || n_digits == TOTAL_DIGITS) {\n                std::cout << output_buffer;\n\n                // Pad digits with extra spaces if TOTAL_DIGITS was not a multiple of 10\n                for (std::size_t i = output_buffer.length(); i < 10; ++i) std::cout << ' ';\n\n                std::cout << \"\\t:\" << n_digits << '\\n';\n                output_buffer.clear();\n            }\n        }\n    }\n}",
        27.229,
        519.689
    ]
}