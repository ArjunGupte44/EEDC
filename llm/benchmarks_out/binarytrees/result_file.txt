{
    "0": [
        "#include <iostream>\n#include <stdlib.h>\n#include <stdio.h>\n#include <apr_pools.h>\n\n\nconst size_t    LINE_SIZE = 64;\n\nclass Apr\n{\npublic:\n    Apr() \n    {\n        apr_initialize();\n    }\n\n    ~Apr() \n    {\n        apr_terminate();\n    }\n};\n\nstruct Node \n{\n    Node *l, *r;\n    \n    int check() const \n    {\n        if (l)\n            return l->check() + 1 + r->check();\n        else return 1;\n    }\n};\n\nclass NodePool\n{\npublic:\n    NodePool() \n    {\n        apr_pool_create_unmanaged(&pool);\n    }\n\n    ~NodePool() \n    {\n        apr_pool_destroy(pool);\n    }\n\n    Node* alloc()\n    {\n        return (Node *)apr_palloc(pool, sizeof(Node));\n    }\n\n    void clear()\n    {\n        apr_pool_clear(pool);\n    }\n\nprivate:\n    apr_pool_t* pool;\n};\n\nNode *make(int d, NodePool &store)\n{\n    Node* root = store.alloc();\n\n    if(d>0){\n        root->l=make(d-1, store);\n        root->r=make(d-1, store);\n    }else{\n        root->l=root->r=0;\n    }\n\n    return root;\n}\n\nint main(int argc, char *argv[]) \n{\n    Apr apr;\n    int min_depth = 4;\n    int max_depth = std::max(min_depth+2,\n                             (argc == 2 ? atoi(argv[1]) : 10));\n    int stretch_depth = max_depth+1;\n\n    // Alloc then dealloc stretchdepth tree\n    {\n        NodePool store;\n        Node *c = make(stretch_depth, store);\n        std::cout << \"stretch tree of depth \" << stretch_depth << \"\\t \"\n                  << \"check: \" << c->check() << std::endl;\n    }\n\n    NodePool long_lived_store;\n    Node *long_lived_tree = make(max_depth, long_lived_store);\n\n    // buffer to store output of each thread\n    char *outputstr = (char*)malloc(LINE_SIZE * (max_depth +1) * sizeof(char));\n\n    #pragma omp parallel for \n    for (int d = min_depth; d <= max_depth; d += 2) \n    {\n        int iterations = 1 << (max_depth - d + min_depth);\n        int c = 0;\n\n        // Create a memory pool for this thread to use.\n        NodePool store;\n\n        for (int i = 1; i <= iterations; ++i) \n        {\n            Node *a = make(d, store);\n            c += a->check();\n            store.clear();\n        }\n\n        // each thread write to separate location\n        sprintf(outputstr + LINE_SIZE * d, \"%d\\t trees of depth %d\\t check: %d\\n\",\n           iterations, d, c);\n    }\n\n    // print all results\n    for (int d = min_depth; d <= max_depth; d += 2) \n        printf(\"%s\", outputstr + (d * LINE_SIZE) );\n    free(outputstr);\n\n    std::cout << \"long lived tree of depth \" << max_depth << \"\\t \"\n              << \"check: \" << (long_lived_tree->check()) << \"\\n\";\n\n    return 0;\n}",
        51.389,
        545.957
    ],
    "1": [
        "#include <iostream>\n#include <stdlib.h>\n#include <stdio.h>\n#include <apr_pools.h>\n#include <omp.h>\n\nconst size_t LINE_SIZE = 64;\n\nclass Apr {\npublic:\n    Apr() {\n        apr_initialize();\n    }\n    ~Apr() {\n        apr_terminate();\n    }\n};\n\nstruct Node {\n    Node *l, *r;\n    \n    int check() const {\n        if (l)\n            return l->check() + 1 + r->check();\n        else return 1;\n    }\n};\n\nclass NodePool {\npublic:\n    NodePool() {\n        apr_pool_create_unmanaged(&pool);\n    }\n\n    ~NodePool() {\n        apr_pool_destroy(pool);\n    }\n\n    Node* alloc() {\n        return (Node *)apr_palloc(pool, sizeof(Node));\n    }\n\n    void clear() {\n        apr_pool_clear(pool);\n    }\n\nprivate:\n    apr_pool_t* pool;\n};\n\nNode *make(int d, NodePool &store) {\n    Node* root = store.alloc();\n\n    if(d > 0){\n        root->l = make(d-1, store);\n        root->r = make(d-1, store);\n    } else {\n        root->l = root->r = nullptr;\n    }\n\n    return root;\n}\n\nint main(int argc, char *argv[]) {\n    Apr apr;\n    int min_depth = 4;\n    int max_depth = std::max(min_depth+2, (argc == 2 ? atoi(argv[1]) : 10));\n    int stretch_depth = max_depth + 1;\n\n    {\n        NodePool store;\n        Node *c = make(stretch_depth, store);\n        std::cout << \"stretch tree of depth \" << stretch_depth << \"\\t \"\n                  << \"check: \" << c->check() << std::endl;\n    }\n\n    NodePool long_lived_store;\n    Node *long_lived_tree = make(max_depth, long_lived_store);\n\n    char *outputstr = (char*)malloc(LINE_SIZE * (max_depth +1) * sizeof(char));\n\n    #pragma omp parallel for schedule(dynamic)\n    for (int d = min_depth; d <= max_depth; d += 2) {\n        int iterations = 1 << (max_depth - d + min_depth);\n        int c = 0;\n\n        NodePool store;\n\n        for (int i = 1; i <= iterations; ++i) {\n            Node *a = make(d, store);\n            c += a->check();\n            store.clear();\n        }\n\n        snprintf(outputstr + LINE_SIZE * d, LINE_SIZE, \"%d\\t trees of depth %d\\t check: %d\\n\",\n           iterations, d, c);\n    }\n\n    for (int d = min_depth; d <= max_depth; d += 2)\n        printf(\"%s\", outputstr + (d * LINE_SIZE));\n    free(outputstr);\n\n    std::cout << \"long lived tree of depth \" << max_depth << \"\\t \"\n              << \"check: \" << (long_lived_tree->check()) << \"\\n\";\n\n    return 0;\n}",
        50.513,
        534.793
    ],
    "2": [
        "#include <iostream>\n#include <vector>\n#include <string>\n#include <iomanip>\n#include <omp.h>\n\nclass Node {\npublic:\n    Node *l = nullptr, *r = nullptr;\n\n    ~Node() {\n        delete l;\n        delete r;\n    }\n\n    int check() const {\n        if (l)\n            return l->check() + 1 + r->check();\n        else return 1;\n    }\n};\n\nNode* make(int d) {\n    Node* root = new Node();\n    if(d > 0){\n        root->l = make(d-1);\n        root->r = make(d-1);\n    }\n    return root;\n}\n\nint main(int argc, char *argv[]) {\n    int min_depth = 4;\n    int max_depth = std::max(min_depth+2, (argc == 2 ? std::atoi(argv[1]) : 10));\n    int stretch_depth = max_depth + 1;\n\n    // Stretch tree is not used further, no need to keep it allocated\n    { \n        Node *c = make(stretch_depth);\n        std::cout << \"stretch tree of depth \" << stretch_depth << \"\\t \"\n                  << \"check: \" << c->check() << std::endl;\n        delete c;\n    }\n\n    Node* long_lived_tree = make(max_depth);\n\n    std::vector<std::string> output(max_depth + 1);\n\n    #pragma omp parallel for schedule(dynamic)\n    for (int d = min_depth; d <= max_depth; d += 2) {\n        int iterations = 1 << (max_depth - d + min_depth);\n        int c = 0;\n\n        for (int i = 1; i <= iterations; ++i) {\n            Node *a = make(d);\n            c += a->check();\n            delete a;\n        }\n\n        std::stringstream ss;\n        ss << iterations << \"\\t trees of depth \" << d << \"\\t check: \" << c << \"\\n\";\n        output[d] = ss.str();\n    }\n\n    for (const auto &str : output) {\n        if (!str.empty()) {\n            std::cout << str;\n        }\n    }\n\n    std::cout << \"long lived tree of depth \" << max_depth << \"\\t \"\n              << \"check: \" << (long_lived_tree->check()) << \"\\n\";\n    delete long_lived_tree;\n\n    return 0;\n}",
        388.166,
        4074.312
    ],
    "3": [
        "#include <iostream>\n#include <vector>\n#include <string>\n#include <sstream>\n#include <memory>\n#include <omp.h>\n\nclass Node {\npublic:\n    std::unique_ptr<Node> l = nullptr;\n    std::unique_ptr<Node> r = nullptr;\n\n    int check() const {\n        if (l)\n            return l->check() + 1 + r->check();\n        else return 1;\n    }\n};\n\nstd::unique_ptr<Node> make(int d) {\n    std::unique_ptr<Node> root = std::make_unique<Node>();\n    if (d > 0) {\n        root->l = make(d - 1);\n        root->r = make(d - 1);\n    }\n    return root;\n}\n\nint main(int argc, char *argv[]) {\n    int min_depth = 4;\n    int max_depth = std::max(min_depth+2, (argc == 2 ? std::atoi(argv[1]) : 10));\n    int stretch_depth = max_depth + 1;\n\n    // Stretch tree is not used further, no need to keep it allocated\n    {\n        auto c = make(stretch_depth);\n        std::cout << \"stretch tree of depth \" << stretch_depth << \"\\t \"\n                  << \"check: \" << c->check() << std::endl;\n    }\n\n    auto long_lived_tree = make(max_depth);\n\n    std::vector<std::string> output(max_depth + 1);\n\n    #pragma omp parallel for schedule(dynamic)\n    for (int d = min_depth; d <= max_depth; d += 2) {\n        int iterations = 1 << (max_depth - d + min_depth);\n        int c = 0;\n\n        for (int i = 1; i <= iterations; ++i) {\n            auto a = make(d);\n            c += a->check();\n        }\n\n        std::stringstream ss;\n        ss << iterations << \"\\t trees of depth \" << d << \"\\t check: \" << c << \"\\n\";\n        output[d] = ss.str();\n    }\n\n    for (const auto &str : output) {\n        if (!str.empty()) {\n            std::cout << str;\n        }\n    }\n\n    std::cout << \"long lived tree of depth \" << max_depth << \"\\t \"\n              << \"check: \" << (long_lived_tree->check()) << \"\\n\";\n    return 0;\n}",
        382.463,
        3586.12
    ],
    "4": [
        "#include <iostream>\n#include <vector>\n#include <string>\n#include <sstream>\n#include <omp.h>\n#include <deque>\n\nclass Node {\npublic:\n    Node* l = nullptr;\n    Node* r = nullptr;\n\n    int check() const {\n        if (l)\n            return l->check() + 1 + r->check();\n        else return 1;\n    }\n};\n\nclass NodePool {\n    std::deque<Node> pool;\npublic:\n    Node* allocate() {\n        pool.emplace_back();\n        return &pool.back();\n    }\n\n    void clear() {\n        pool.clear();\n    }\n};\n\nNode* make(NodePool& pool, int d) {\n    Node* root = pool.allocate();\n    if (d > 0) {\n        root->l = make(pool, d - 1);\n        root->r = make(pool, d - 1);\n    }\n    return root;\n}\n\nint main(int argc, char *argv[]) {\n    int min_depth = 4;\n    int max_depth = std::max(min_depth+2, (argc == 2 ? std::atoi(argv[1]) : 10));\n    int stretch_depth = max_depth + 1;\n\n    // Stretch tree is not used further, no need to keep it allocated\n    {\n        NodePool pool;\n        auto c = make(pool, stretch_depth);\n        std::cout << \"stretch tree of depth \" << stretch_depth << \"\\t \"\n                  << \"check: \" << c->check() << std::endl;\n    }\n\n    NodePool long_lived_pool;\n    auto long_lived_tree = make(long_lived_pool, max_depth);\n\n    std::vector<std::string> output(max_depth + 1);\n\n    #pragma omp parallel for schedule(dynamic) ordered\n    for (int d = min_depth; d <= max_depth; d += 2) {\n        int iterations = 1 << (max_depth - d + min_depth);\n        int c = 0;\n\n        for (int i = 1; i <= iterations; ++i) {\n            NodePool pool;\n            auto a = make(pool, d);\n            c += a->check();\n        }\n\n        std::stringstream ss;\n        ss << iterations << \"\\t trees of depth \" << d << \"\\t check: \" << c << std::endl;\n        #pragma omp ordered\n        output[d] = ss.str();\n    }\n\n    for (const auto &str : output) {\n        if (!str.empty()) {\n            std::cout << str;\n        }\n    }\n    \n    std::cout << \"long lived tree of depth \" << max_depth << \"\\t \"\n              << \"check: \" << (long_lived_tree->check()) << std::endl;\n    return 0;\n}\n",
        82.579,
        995.941
    ]
}