{
    "0": [
        "#include <algorithm>\n#include <stdio.h>\n#include <cmath>\n#include <stdlib.h>\n#include <immintrin.h>\n#include <array>\n\nconstexpr double PI(3.141592653589793);\nconstexpr double SOLAR_MASS ( 4 * PI * PI );\nconstexpr double DAYS_PER_YEAR(365.24);\n\nstruct body {\n  double x[3], fill, v[3], mass;\n  constexpr body(double x0, double x1, double x2, double v0, double v1, double v2,  double Mass):\n    x{x0,x1,x2}, fill(0), v{v0,v1,v2}, mass(Mass) {}\n};\n\nclass N_Body_System\n{\n  static std::array<body,5> bodies;\n\n  void offset_momentum()\n  {\n    unsigned int k;\n    for(auto &body: bodies)\n      for(k = 0; k < 3; ++k)\n        bodies[0].v[k] -= body.v[k] * body.mass / SOLAR_MASS;\n  }\n\npublic:\n  N_Body_System()\n  {\n    offset_momentum();\n  }\n  void advance(double dt)\n  {\n    constexpr unsigned int N = ((bodies.size() - 1) * bodies.size()) / 2;\n\n    static double r[N][4];\n    static double mag[N];\n\n    unsigned int i, m;\n    __m128d dx[3], dsquared, distance, dmag;\n\n    i=0;\n    for(auto bi(bodies.begin()); bi!=bodies.end(); ++bi)\n      {\n        auto bj(bi);\n        for(++bj; bj!=bodies.end(); ++bj, ++i)\n          for (m=0; m<3; ++m)\n            r[i][m] = bi->x[m] - bj->x[m];\n      }\n\n    for (i=0; i<N; i+=2)\n      {\n        for (m=0; m<3; ++m)\n          {\n            dx[m] = _mm_loadl_pd(dx[m], &r[i][m]);\n            dx[m] = _mm_loadh_pd(dx[m], &r[i+1][m]);\n          }\n\n        dsquared = dx[0] * dx[0] + dx[1] * dx[1] + dx[2] * dx[2];\n        distance = _mm_cvtps_pd(_mm_rsqrt_ps(_mm_cvtpd_ps(dsquared)));\n\n        for (m=0; m<2; ++m)\n          distance = distance * _mm_set1_pd(1.5)\n            - ((_mm_set1_pd(0.5) * dsquared) * distance)\n            * (distance * distance);\n\n        dmag = _mm_set1_pd(dt) / (dsquared) * distance;\n        _mm_store_pd(&mag[i], dmag);\n      }\n\n    i=0;\n    for(auto bi(bodies.begin()); bi!=bodies.end(); ++bi)\n      {\n        auto bj(bi);\n        for(++bj; bj!=bodies.end(); ++bj, ++i)\n          for(m=0; m<3; ++m)\n            {\n              const double x = r[i][m] * mag[i];\n              bi->v[m] -= x * bj->mass;\n              bj->v[m] += x * bi->mass;\n            }\n      }\n\n    for(auto &body: bodies)\n      for(m=0; m<3; ++m)\n        body.x[m] += dt * body.v[m];\n  }\n\n  double energy()\n  {\n    double e(0.0);\n    for(auto bi(bodies.cbegin()); bi!=bodies.cend(); ++bi)\n      {\n        e += bi->mass * ( bi->v[0] * bi->v[0]\n                          + bi->v[1] * bi->v[1]\n                          + bi->v[2] * bi->v[2] ) / 2.;\n\n        auto bj(bi);\n        for(++bj; bj!=bodies.end(); ++bj)\n          {\n            double distance = 0;\n            for(auto k=0; k<3; ++k)\n            {\n              const double dx = bi->x[k] - bj->x[k];\n              distance += dx * dx;\n            }\n\n            e -= (bi->mass * bj->mass) / std::sqrt(distance);\n          }\n      }\n    return e;\n  }\n};\n\n\nstd::array<body,5> N_Body_System::bodies{{\n    /* sun */\n    body(0., 0., 0. ,\n         0., 0., 0. ,\n         SOLAR_MASS),\n    /* jupiter */\n    body(4.84143144246472090e+00,\n         -1.16032004402742839e+00,\n         -1.03622044471123109e-01 ,\n         1.66007664274403694e-03 * DAYS_PER_YEAR,\n         7.69901118419740425e-03 * DAYS_PER_YEAR,\n         -6.90460016972063023e-05 * DAYS_PER_YEAR ,\n         9.54791938424326609e-04 * SOLAR_MASS\n         ),\n    /* saturn */\n    body(8.34336671824457987e+00,\n         4.12479856412430479e+00,\n         -4.03523417114321381e-01 ,\n         -2.76742510726862411e-03 * DAYS_PER_YEAR,\n         4.99852801234917238e-03 * DAYS_PER_YEAR,\n         2.30417297573763929e-05 * DAYS_PER_YEAR ,\n         2.85885980666130812e-04 * SOLAR_MASS\n         ),\n    /* uranus */\n    body(1.28943695621391310e+01,\n         -1.51111514016986312e+01,\n         -2.23307578892655734e-01 ,\n         2.96460137564761618e-03 * DAYS_PER_YEAR,\n         2.37847173959480950e-03 * DAYS_PER_YEAR,\n         -2.96589568540237556e-05 * DAYS_PER_YEAR ,\n         4.36624404335156298e-05 * SOLAR_MASS\n         ),\n    /* neptune */\n    body(1.53796971148509165e+01,\n         -2.59193146099879641e+01,\n         1.79258772950371181e-01 ,\n         2.68067772490389322e-03 * DAYS_PER_YEAR,\n         1.62824170038242295e-03 * DAYS_PER_YEAR,\n         -9.51592254519715870e-05 * DAYS_PER_YEAR ,\n         5.15138902046611451e-05 * SOLAR_MASS\n         )\n  }};\n\nint main(int , char** argv)\n{\n  int i, n = atoi(argv[1]);\n  N_Body_System system;\n\n  printf(\"%.9f\\n\", system.energy());\n  for (i = 0; i < n; ++i)\n    system.advance(0.01);\n  printf(\"%.9f\\n\", system.energy());\n\n  return 0;\n}",
        1152.143,
        20877.62
    ],
    "1": [
        "#include <algorithm>\n#include <stdio.h>\n#include <cmath>\n#include <stdlib.h>\n#include <immintrin.h>\n#include <array>\n\nconstexpr double PI(3.141592653589793);\nconstexpr double SOLAR_MASS ( 4 * PI * PI );\nconstexpr double DAYS_PER_YEAR(365.24);\n\nstruct body {\n  double x[3], fill, v[3], mass;\n  constexpr body(double x0, double x1, double x2, double v0, double v1, double v2,  double Mass):\n    x{x0,x1,x2}, fill(0), v{v0,v1,v2}, mass(Mass) {}\n};\n\nclass N_Body_System\n{\n  static std::array<body,5> bodies;\n\n  void offset_momentum()\n  {\n    unsigned int k;\n    for(auto &body: bodies)\n      for(k = 0; k < 3; ++k)\n        bodies[0].v[k] -= body.v[k] * body.mass / SOLAR_MASS;\n  }\n\npublic:\n  N_Body_System()\n  {\n    offset_momentum();\n  }\n  void advance(double dt)\n  {\n    constexpr unsigned int N = ((bodies.size() - 1) * bodies.size()) / 2;\n\n    static double r[N][3];\n    static double mag[N];\n\n    unsigned int i, m;\n    __m128d dx[3], dsquared, distance, dmag;\n\n    std::array<double, 5> forces;\n\n    for(size_t idx = 0; idx < bodies.size(); ++idx) forces[idx] = 0.0;\n\n    i=0;\n    for(auto bi(bodies.begin()); bi!=bodies.end(); ++bi)\n      {\n        auto bj(bi);\n        for(++bj; bj!=bodies.end(); ++bj, ++i)\n          for (m=0; m<3; ++m)\n            r[i][m] = bi->x[m] - bj->x[m];\n      }\n\n    for (i=0; i<N; i+=2)\n      {\n        for (m=0; m<3; ++m)\n          {\n            dx[m] = _mm_loadl_pd(dx[m], &r[i][m]);\n            dx[m] = _mm_loadh_pd(dx[m], &r[i+1][m]);\n          }\n\n        dsquared = dx[0] * dx[0] + dx[1] * dx[1] + dx[2] * dx[2];\n        distance = _mm_cvtps_pd(_mm_rsqrt_ps(_mm_cvtpd_ps(dsquared)));\n\n        for (m=0; m<2; ++m)\n          distance = distance * _mm_set1_pd(1.5)\n            - ((_mm_set1_pd(0.5) * dsquared) * distance)\n            * (distance * distance);\n\n        dmag = _mm_set1_pd(dt) / (dsquared) * distance;\n        _mm_store_pd(&mag[i], dmag);\n      }\n\n    i=0;\n    for(auto bi(bodies.begin()); bi!=bodies.end(); ++bi)\n      {\n        auto bj(bi);\n        for(++bj; bj!=bodies.end(); ++bj, ++i)\n          for(m=0; m<3; ++m)\n            {\n              const double x = r[i][m] * mag[i];\n              double force = x * bj->mass;\n              forces[i] += force;\n              forces[i+1] += force;\n              bi->v[m] -= x * bj->mass;\n              bj->v[m] += x * bi->mass;\n            }\n      }\n\n    for(auto &body: bodies)\n      for(m=0; m<3; ++m)\n        body.x[m] += dt * body.v[m];\n  }\n\n  double energy()\n  {\n    double e(0.0);\n    for(auto bi(bodies.cbegin()); bi!=bodies.cend(); ++bi)\n      {\n        e += bi->mass * ( bi->v[0] * bi->v[0]\n                          + bi->v[1] * bi->v[1]\n                          + bi->v[2] * bi->v[2] ) / 2.;\n\n        auto bj(bi);\n        for(++bj; bj!=bodies.end(); ++bj)\n          {\n            double distance = 0;\n            for(auto k=0; k<3; ++k)\n            {\n              const double dx = bi->x[k] - bj->x[k];\n              distance += dx * dx;\n            }\n\n            e -= (bi->mass * bj->mass) / std::sqrt(distance);\n          }\n      }\n    return e;\n  }\n};\n\n\nstd::array<body,5> N_Body_System::bodies{{\n    /* sun */\n    body(0., 0., 0. ,\n         0., 0., 0. ,\n         SOLAR_MASS),\n    /* jupiter */\n    body(4.84143144246472090e+00,\n         -1.16032004402742839e+00,\n         -1.03622044471123109e-01 ,\n         1.66007664274403694e-03 * DAYS_PER_YEAR,\n         7.69901118419740425e-03 * DAYS_PER_YEAR,\n         -6.90460016972063023e-05 * DAYS_PER_YEAR ,\n         9.54791938424326609e-04 * SOLAR_MASS\n         ),\n    /* saturn */\n    body(8.34336671824457987e+00,\n         4.12479856412430479e+00,\n         -4.03523417114321381e-01 ,\n         -2.76742510726862411e-03 * DAYS_PER_YEAR,\n         4.99852801234917238e-03 * DAYS_PER_YEAR,\n         2.30417297573763929e-05 * DAYS_PER_YEAR ,\n         2.85885980666130812e-04 * SOLAR_MASS\n         ),\n    /* uranus */\n    body(1.28943695621391310e+01,\n         -1.51111514016986312e+01,\n         -2.23307578892655734e-01 ,\n         2.96460137564761618e-03 * DAYS_PER_YEAR,\n         2.37847173959480950e-03 * DAYS_PER_YEAR,\n         -2.96589568540237556e-05 * DAYS_PER_YEAR ,\n         4.36624404335156298e-05 * SOLAR_MASS\n         ),\n    /* neptune */\n    body(1.53796971148509165e+01,\n         -2.59193146099879641e+01,\n         1.79258772950371181e-01 ,\n         2.68067772490389322e-03 * DAYS_PER_YEAR,\n         1.62824170038242295e-03 * DAYS_PER_YEAR,\n         -9.51592254519715870e-05 * DAYS_PER_YEAR ,\n         5.15138902046611451e-05 * SOLAR_MASS\n         )\n  }};\n\nint main(int , char** argv)\n{\n  int i, n = atoi(argv[1]);\n  N_Body_System system;\n\n  printf(\"%.9f\\n\", system.energy());\n  for (i = 0; i < n; ++i)\n    system.advance(0.01);\n  printf(\"%.9f\\n\", system.energy());\n\n  return 0;\n}",
        1690.343,
        30422.66
    ],
    "2": [
        "#include <algorithm>\n#include <stdio.h>\n#include <cmath>\n#include <stdlib.h>\n#include <immintrin.h>\n#include <array>\n#include <omp.h>\n\nconstexpr double PI(3.141592653589793);\nconstexpr double SOLAR_MASS ( 4 * PI * PI );\nconstexpr double DAYS_PER_YEAR(365.24);\n\nstruct body {\n  double x[3], fill, v[3], mass;\n  constexpr body(double x0, double x1, double x2, double v0, double v1, double v2,  double Mass):\n    x{x0,x1,x2}, fill(0), v{v0,v1,v2}, mass(Mass) {}\n};\n\nclass N_Body_System\n{\n  static std::array<body,5> bodies;\n\n  void offset_momentum()\n  {\n    for(auto &body: bodies)\n      for(unsigned int k = 0; k < 3; ++k)\n        bodies[0].v[k] -= body.v[k] * body.mass / SOLAR_MASS;\n  }\n\npublic:\n  N_Body_System()\n  {\n    offset_momentum();\n  }\n  void advance(double dt)\n  {\n    constexpr unsigned int N = ((bodies.size() - 1) * bodies.size()) / 2;\n\n    static double r[N][3];\n    static double mag[N];\n\n    unsigned int i, m;\n    __m128d dx[3], dsquared, distance, dmag;\n\n    i=0;\n    for(auto bi(bodies.begin()); bi!=bodies.end(); ++bi)\n      {\n        auto bj(bi);\n        for(++bj; bj!=bodies.end(); ++bj, ++i)\n          for (m=0; m<3; ++m)\n            r[i][m] = bi->x[m] - bj->x[m];\n      }\n\n    for (i=0; i<N; i+=2)\n      {\n        for (m=0; m<3; ++m)\n          {\n            dx[m] = _mm_loadl_pd(dx[m], &r[i][m]);\n            dx[m] = _mm_loadh_pd(dx[m], &r[i+1][m]);\n          }\n\n        dsquared = dx[0] * dx[0] + dx[1] * dx[1] + dx[2] * dx[2];\n        distance = _mm_cvtps_pd(_mm_rsqrt_ps(_mm_cvtpd_ps(dsquared)));\n\n        for (m=0; m<2; ++m)\n          distance = distance * _mm_set1_pd(1.5)\n            - ((_mm_set1_pd(0.5) * dsquared) * distance)\n            * (distance * distance);\n\n        dmag = _mm_set1_pd(dt) / (dsquared) * distance;\n        _mm_store_pd(&mag[i], dmag);\n      }\n\n    i=0;\n    for(auto bi(bodies.begin()); bi!=bodies.end(); ++bi)\n      {\n        auto bj(bi);\n        for(++bj; bj!=bodies.end(); ++bj, ++i)\n          for(m=0; m<3; ++m)\n            {\n              const double x = r[i][m] * mag[i];\n              bi->v[m] -= x * bj->mass;\n              bj->v[m] += x * bi->mass;\n            }\n      }\n\n    for(auto &body: bodies)\n      for(m=0; m<3; ++m)\n        body.x[m] += dt * body.v[m];\n  }\n\n  double energy()\n  {\n    double e(0.0);\n    for(auto bi(bodies.cbegin()); bi!=bodies.cend(); ++bi)\n      {\n        e += bi->mass * ( bi->v[0] * bi->v[0]\n                          + bi->v[1] * bi->v[1]\n                          + bi->v[2] * bi->v[2] ) / 2.;\n\n        auto bj(bi);\n        for(++bj; bj!=bodies.end(); ++bj)\n          {\n            double distance = 0;\n            for(auto k=0; k<3; ++k)\n            {\n              const double dx = bi->x[k] - bj->x[k];\n              distance += dx * dx;\n            }\n\n            e -= (bi->mass * bj->mass) / std::sqrt(distance);\n          }\n      }\n    return e;\n  }\n};\n\nstd::array<body,5> N_Body_System::bodies = {{\n    /* sun */\n    body(0., 0., 0. ,\n         0., 0., 0. ,\n         SOLAR_MASS),\n    /* jupiter */\n    body(4.84143144246472090e+00,\n         -1.16032004402742839e+00,\n         -1.03622044471123109e-01 ,\n         1.66007664274403694e-03 * DAYS_PER_YEAR,\n         7.69901118419740425e-03 * DAYS_PER_YEAR,\n         -6.90460016972063023e-05 * DAYS_PER_YEAR ,\n         9.54791938424326609e-04 * SOLAR_MASS\n         ),\n    /* saturn */\n    body(8.34336671824457987e+00,\n         4.12479856412430479e+00,\n         -4.03523417114321381e-01 ,\n         -2.76742510726862411e-03 * DAYS_PER_YEAR,\n         4.99852801234917238e-03 * DAYS_PER_YEAR,\n         2.30417297573763929e-05 * DAYS_PER_YEAR ,\n         2.85885980666130812e-04 * SOLAR_MASS\n         ),\n    /* uranus */\n    body(1.28943695621391310e+01,\n         -1.51111514016986312e+01,\n         -2.23307578892655734e-01 ,\n         2.96460137564761618e-03 * DAYS_PER_YEAR,\n         2.37847173959480950e-03 * DAYS_PER_YEAR,\n         -2.96589568540237556e-05 * DAYS_PER_YEAR ,\n         4.36624404335156298e-05 * SOLAR_MASS\n         ),\n    /* neptune */\n    body(1.53796971148509165e+01,\n         -2.59193146099879641e+01,\n         1.79258772950371181e-01 ,\n         2.68067772490389322e-03 * DAYS_PER_YEAR,\n         1.62824170038242295e-03 * DAYS_PER_YEAR,\n         -9.51592254519715870e-05 * DAYS_PER_YEAR ,\n         5.15138902046611451e-05 * SOLAR_MASS\n         )\n  }};\n\nint main(int , char** argv)\n{\n  int i, n = atoi(argv[1]);\n  N_Body_System system;\n\n  printf(\"%.9f\\n\", system.energy());\n  for (i = 0; i < n; ++i)\n    system.advance(0.01);\n  printf(\"%.9f\\n\", system.energy());\n\n  return 0;\n}\n",
        1154.306,
        20904.36
    ],
    "3": [
        "#include <algorithm>\n#include <stdio.h>\n#include <cmath>\n#include <cstdlib>\n#include <array>\n#include <cstddef>  // Add this header for size_t\n\nconstexpr double PI = 3.141592653589793;\nconstexpr double SOLAR_MASS = 4 * PI * PI;\nconstexpr double DAYS_PER_YEAR = 365.24;\n\nstruct body {\n  double x[3], fill, v[3], mass;\n  constexpr body(double x0, double x1, double x2, double v0, double v1, double v2, double Mass)\n    : x{x0, x1, x2}, fill(0), v{v0, v1, v2}, mass(Mass) {}\n};\n\nclass N_Body_System {\n  static std::array<body,5> bodies;\n\n  static void offset_momentum() {\n    // Correcting the calculation of initial momentum offset to ensure correctness over iterations\n    for(unsigned int k = 0; k < 3; ++k) {\n      double px = 0.0, py = 0.0, pz = 0.0;\n      for(auto &body : bodies) {\n        px += body.v[0] * body.mass;\n        py += body.v[1] * body.mass;\n        pz += body.v[2] * body.mass;\n      }\n      bodies[0].v[0] -= px / SOLAR_MASS;\n      bodies[0].v[1] -= py / SOLAR_MASS;\n      bodies[0].v[2] -= pz / SOLAR_MASS;\n    }\n  }\n\npublic:\n  N_Body_System() {\n    offset_momentum();\n  }\n\n  void advance(double dt) {\n    double r[10][3];\n    double mag[10];\n    size_t idx = 0;\n\n    for(size_t i = 0; i < bodies.size(); ++i) {\n      for(size_t j = i + 1; j < bodies.size(); ++j, ++idx) {\n        for(size_t k = 0; k < 3; ++k) {\n          r[idx][k] = bodies[i].x[k] - bodies[j].x[k];\n        }\n        double dsquared = r[idx][0] * r[idx][0] + r[idx][1] * r[idx][1] + r[idx][2] * r[idx][2];\n        double distance = std::sqrt(dsquared);\n        mag[idx] = dt / (dsquared * distance);\n      }\n    }\n\n    idx = 0;\n    for(size_t i = 0; i < bodies.size(); ++i) {\n      for(size_t j = i + 1; j < bodies.size(); ++j, ++idx) {\n        for(size_t k = 0; k < 3; ++k) {\n          double x = r[idx][k] * mag[idx];\n          bodies[i].v[k] -= x * bodies[j].mass;\n          bodies[j].v[k] += x * bodies[i].mass;\n        }\n      }\n    }\n\n    for(auto &body : bodies) {\n      for(size_t k = 0; k < 3; ++k) {\n        body.x[k] += dt * body.v[k];\n      }\n    }\n  }\n\n  double energy() {\n    double e = 0.0;\n    for(size_t i = 0; i < bodies.size(); ++i) {\n      e += 0.5 * bodies[i].mass * \n           (bodies[i].v[0] * bodies[i].v[0] + bodies[i].v[1] * bodies[i].v[1] + bodies[i].v[2] * bodies[i].v[2]);\n\n      for(size_t j = i + 1; j < bodies.size(); ++j) {\n        double dx = bodies[i].x[0] - bodies[j].x[0];\n        double dy = bodies[i].x[1] - bodies[j].x[1];\n        double dz = bodies[i].x[2] - bodies[j].x[2];\n        double distance = std::sqrt(dx * dx + dy * dy + dz * dz);\n        e -= (bodies[i].mass * bodies[j].mass) / distance;\n      }\n    }\n    return e;\n  }\n};\n\nstd::array<body,5> N_Body_System::bodies = {{\n  body(0., 0., 0., 0., 0., 0., SOLAR_MASS),\n  body(4.84143144246472090e+00,\n       -1.16032004402742839e+00,\n       -1.03622044471123109e-01,\n       1.66007664274403694e-03 * DAYS_PER_YEAR,\n       7.69901118419740425e-03 * DAYS_PER_YEAR,\n       -6.90460016972063023e-05 * DAYS_PER_YEAR,\n       9.54791938424326609e-04 * SOLAR_MASS),\n  body(8.34336671824457987e+00,\n       4.12479856412430479e+00,\n       -4.03523417114321381e-01,\n       -2.76742510726862411e-03 * DAYS_PER_YEAR,\n       4.99852801234917238e-03 * DAYS_PER_YEAR,\n       2.30417297573763929e-05 * DAYS_PER_YEAR,\n       2.85885980666130812e-04 * SOLAR_MASS),\n  body(1.28943695621391310e+01,\n       -1.51111514016986312e+01,\n       -2.23307578892655734e-01,\n       2.96460137564761618e-03 * DAYS_PER_YEAR,\n       2.37847173959480950e-03 * DAYS_PER_YEAR,\n       -2.96589568540237556e-05 * DAYS_PER_YEAR,\n       4.36624404335156298e-05 * SOLAR_MASS),\n  body(1.53796971148509165e+01,\n       -2.59193146099879641e+01,\n       1.79258772950371181e-01,\n       2.68067772490389322e-03 * DAYS_PER_YEAR,\n       1.62824170038242295e-03 * DAYS_PER_YEAR,\n       -9.51592254519715870e-05 * DAYS_PER_YEAR,\n       5.15138902046611451e-05 * SOLAR_MASS)\n}};\n\nint main(int argc, char** argv) {\n  if (argc < 2) return 1;  // Simple check for valid input\n  int i, n = atoi(argv[1]);\n  N_Body_System system;\n\n  printf(\"%.9f\\n\", system.energy());\n  for (i = 0; i < n; ++i) {\n    system.advance(0.01);\n  }\n  printf(\"%.9f\\n\", system.energy());\n\n  return 0;\n}",
        1958.095,
        35339.12
    ],
    "4": [
        "#include <iostream>\n#include <cmath>\n#include <vector>\n#include <array>\n\nconstexpr double PI = 3.141592653589793;\nconstexpr double SOLAR_MASS = 4 * PI * PI;\nconstexpr double DAYS_PER_YEAR = 365.24;\n\nstruct body {\n    std::array<double, 3> position, velocity;\n    double mass;\n    constexpr body(double x, double y, double z, double vx, double vy, double vz, double m)\n        : position{x, y, z}, velocity{vx, vy, vz}, mass(m) {}\n};\n\nclass NBodySystem {\n    static std::array<body, 5> bodies;\n\n    static void offset_momentum() {\n        double px = 0.0, py = 0.0, pz = 0.0;\n        for (auto &b : bodies) {\n            px += b.velocity[0] * b.mass;\n            py += b.velocity[1] * b.mass;\n            pz += b.velocity[2] * b.mass;\n        }\n        bodies[0].velocity[0] -= px / SOLAR_MASS;\n        bodies[0].velocity[1] -= py / SOLAR_MASS;\n        bodies[0].velocity[2] -= pz / SOLAR_MASS;\n    }\n\npublic:\n    NBodySystem() {\n        offset_momentum();\n    }\n\n    void advance(double dt) {\n        const int nbodies = bodies.size();\n        for (int i = 0; i < nbodies; ++i) {\n            for (int j = i + 1; j < nbodies; ++j) {\n                double dx = bodies[i].position[0] - bodies[j].position[0];\n                double dy = bodies[i].position[1] - bodies[j].position[1];\n                double dz = bodies[i].position[2] - bodies[j].position[2];\n\n                double distance_squared = dx * dx + dy * dy + dz * dz;\n                double distance = std::sqrt(distance_squared);\n                double mag = dt / (distance_squared * distance);\n\n                bodies[i].velocity[0] -= dx * bodies[j].mass * mag;\n                bodies[i].velocity[1] -= dy * bodies[j].mass * mag;\n                bodies[i].velocity[2] -= dz * bodies[j].mass * mag;\n\n                bodies[j].velocity[0] += dx * bodies[i].mass * mag;\n                bodies[j].velocity[1] += dy * bodies[i].mass * mag;\n                bodies[j].velocity[2] += dz * bodies[i].mass * mag;\n            }\n        }\n\n        for (auto &b : bodies) {\n            b.position[0] += dt * b.velocity[0];\n            b.position[1] += dt * b.velocity[1];\n            b.position[2] += dt * b.velocity[2];\n        }\n    }\n\n    double energy() const {\n        double e = 0.0;\n        for (int i = 0; i < bodies.size(); ++i) {\n            const auto& b = bodies[i];\n            e += 0.5 * b.mass * (\n                b.velocity[0] * b.velocity[0] +\n                b.velocity[1] * b.velocity[1] +\n                b.velocity[2] * b.velocity[2]);\n\n            for (int j = i + 1; j < bodies.size(); ++j) {\n                const auto& b2 = bodies[j];\n                double dx = b.position[0] - b2.position[0];\n                double dy = b.position[1] - b2.position[1];\n                double dz = b.position[2] - b2.position[2];\n                double distance = std::sqrt(dx * dx + dy * dy + dz * dz);\n                e -= (b.mass * b2.mass) / distance;\n            }\n        }\n        return e;\n    }\n};\n\nstd::array<body, 5> NBodySystem::bodies = {{\n    body(0., 0., 0., 0., 0., 0., SOLAR_MASS),\n    body(4.84143144246472090e+00, -1.16032004402742839e+00, -1.03622044471123109e-01,\n         1.66007664274403694e-03 * DAYS_PER_YEAR, 7.69901118419740425e-03 * DAYS_PER_YEAR,\n         -6.90460016972063023e-05 * DAYS_PER_YEAR, 9.54791938424326609e-04 * SOLAR_MASS),\n    body(8.34336671824457987e+00, 4.12479856412430479e+00, -4.03523417114321381e-01,\n         -2.76742510726862411e-03 * DAYS_PER_YEAR, 4.99852801234917238e-03 * DAYS_PER_YEAR,\n         2.30417297573763929e-05 * DAYS_PER_YEAR, 2.85885980666130812e-04 * SOLAR_MASS),\n    body(1.28943695621391310e+01, -1.51111514016986312e+01, -2.23307578892655734e-01,\n         2.96460137564761618e-03 * DAYS_PER_YEAR, 2.37847173959480950e-03 * DAYS_PER_YEAR,\n         -2.96589568540237556e-05 * DAYS_PER_YEAR, 4.36624404335156298e-05 * SOLAR_MASS),\n    body(1.53796971148509165e+01, -2.59193146099879641e+01, 1.79258772950371181e-01,\n         2.68067772490389322e-03 * DAYS_PER_YEAR, 1.62824170038242295e-03 * DAYS_PER_YEAR,\n         -9.51592254519715870e-05 * DAYS_PER_YEAR, 5.15138902046611451e-05 * SOLAR_MASS)}};\n\nint main(int argc, char** argv) {\n    if (argc < 2) return 1;\n    int n = std::atoi(argv[1]);\n    NBodySystem system;\n\n    std::cout.precision(9);\n    std::cout << std::fixed << system.energy() << \"\\n\";\n    for (int i = 0; i < n; ++i) {\n        system.advance(0.01);\n    }\n    std::cout << system.energy() << \"\\n\";\n\n    return 0;\n}",
        2680.427,
        49506.62
    ],
    "5": [
        "#include <iostream>\n#include <cmath>\n#include <vector>\n#include <array>\n#include <immintrin.h> // For SIMD operations\n\nconstexpr double PI = 3.141592653589793;\nconstexpr double SOLAR_MASS = 4 * PI * PI;\nconstexpr double DAYS_PER_YEAR = 365.24;\n\nstruct body {\n    std::array<double, 3> position, velocity;\n    double mass;\n    constexpr body(double x, double y, double z, double vx, double vy, double vz, double m)\n        : position{x, y, z}, velocity{vx, vy, vz}, mass(m) {}\n};\n\nclass NBodySystem {\n    static std::array<body, 5> bodies;\n\n    static void offset_momentum() {\n        double px = 0.0, py = 0.0, pz = 0.0;\n        for (auto &b : bodies) {\n            px += b.velocity[0] * b.mass;\n            py += b.velocity[1] * b.mass;\n            pz += b.velocity[2] * b.mass;\n        }\n        bodies[0].velocity[0] -= px / SOLAR_MASS;\n        bodies[0].velocity[1] -= py / SOLAR_MASS;\n        bodies[0].velocity[2] -= pz / SOLAR_MASS;\n    }\n\npublic:\n    NBodySystem() {\n        offset_momentum();\n    }\n\n    void advance(double dt) {\n        const int nbodies = bodies.size();\n        for (int i = 0; i < nbodies; ++i) {\n            for (int j = i + 1; j < nbodies; ++j) {\n                double dx = bodies[i].position[0] - bodies[j].position[0];\n                double dy = bodies[i].position[1] - bodies[j].position[1];\n                double dz = bodies[i].position[2] - bodies[j].position[2];\n\n                double distance_squared = dx * dx + dy * dy + dz * dz;\n                double distance = std::sqrt(distance_squared);\n                double mag = dt / (distance_squared * distance);\n\n                bodies[i].velocity[0] -= dx * bodies[j].mass * mag;\n                bodies[i].velocity[1] -= dy * bodies[j].mass * mag;\n                bodies[i].velocity[2] -= dz * bodies[j].mass * mag;\n\n                bodies[j].velocity[0] += dx * bodies[i].mass * mag;\n                bodies[j].velocity[1] += dy * bodies[i].mass * mag;\n                bodies[j].velocity[2] += dz * bodies[i].mass * mag;\n            }\n        }\n\n        for (auto &b : bodies) {\n            b.position[0] += dt * b.velocity[0];\n            b.position[1] += dt * b.velocity[1];\n            b.position[2] += dt * b.velocity[2];\n        }\n    }\n\n    double energy() const {\n        double e = 0.0;\n        for (int i = 0; i < bodies.size(); ++i) {\n            const auto& b = bodies[i];\n            e += 0.5 * b.mass * (\n                b.velocity[0] * b.velocity[0] +\n                b.velocity[1] * b.velocity[1] +\n                b.velocity[2] * b.velocity[2]);\n\n            for (int j = i + 1; j < bodies.size(); ++j) {\n                const auto& b2 = bodies[j];\n                double dx = b.position[0] - b2.position[0];\n                double dy = b.position[1] - b2.position[1];\n                double dz = b.position[2] - b2.position[2];\n                double distance = std::sqrt(dx * dx + dy * dy + dz * dz);\n                e -= (b.mass * b2.mass) / distance;\n            }\n        }\n        return e;\n    }\n};\n\nstd::array<body, 5> NBodySystem::bodies = {{\n    body(0., 0., 0., 0., 0., 0., SOLAR_MASS),\n    body(4.84143144246472090e+00, -1.16032004402742839e+00, -1.03622044471123109e-01,\n         1.66007664274403694e-03 * DAYS_PER_YEAR, 7.69901118419740425e-03 * DAYS_PER_YEAR,\n         -6.90460016972063023e-05 * DAYS_PER_YEAR, 9.54791938424326609e-04 * SOLAR_MASS),\n    body(8.34336671824457987e+00, 4.12479856412430479e+00, -4.03523417114321381e-01,\n         -2.76742510726862411e-03 * DAYS_PER_YEAR, 4.99852801234917238e-03 * DAYS_PER_YEAR,\n         2.30417297573763929e-05 * DAYS_PER_YEAR, 2.85885980666130812e-04 * SOLAR_MASS),\n    body(1.28943695621391310e+01, -1.51111514016986312e+01, -2.23307578892655734e-01,\n         2.96460137564761618e-03 * DAYS_PER_YEAR, 2.37847173959480950e-03 * DAYS_PER_YEAR,\n         -2.96589568540237556e-05 * DAYS_PER_YEAR, 4.36624404335156298e-05 * SOLAR_MASS),\n    body(1.53796971148509165e+01, -2.59193146099879641e+01, 1.79258772950371181e-01,\n         2.68067772490389322e-03 * DAYS_PER_YEAR, 1.62824170038242295e-03 * DAYS_PER_YEAR,\n         -9.51592254519715870e-05 * DAYS_PER_YEAR, 5.15138902046611451e-05 * SOLAR_MASS)}};\n\nint main(int argc, char** argv) {\n    if (argc < 2) return 1;\n    int n = std::atoi(argv[1]);\n    NBodySystem system;\n\n    std::cout.precision(9);\n    std::cout << std::fixed << system.energy() << \"\\n\";\n    for (int i = 0; i < n; ++i) {\n        system.advance(0.01);\n    }\n    std::cout << system.energy() << \"\\n\";\n\n    return 0;\n}",
        2640.356,
        48913.7
    ]
}