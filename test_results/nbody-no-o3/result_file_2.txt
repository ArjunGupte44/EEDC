{
    "0": [
        "#include <algorithm>\n#include <stdio.h>\n#include <cmath>\n#include <stdlib.h>\n#include <immintrin.h>\n#include <array>\n\nconstexpr double PI(3.141592653589793);\nconstexpr double SOLAR_MASS ( 4 * PI * PI );\nconstexpr double DAYS_PER_YEAR(365.24);\n\nstruct body {\n  double x[3], fill, v[3], mass;\n  constexpr body(double x0, double x1, double x2, double v0, double v1, double v2,  double Mass):\n    x{x0,x1,x2}, fill(0), v{v0,v1,v2}, mass(Mass) {}\n};\n\nclass N_Body_System\n{\n  static std::array<body,5> bodies;\n\n  void offset_momentum()\n  {\n    unsigned int k;\n    for(auto &body: bodies)\n      for(k = 0; k < 3; ++k)\n        bodies[0].v[k] -= body.v[k] * body.mass / SOLAR_MASS;\n  }\n\npublic:\n  N_Body_System()\n  {\n    offset_momentum();\n  }\n  void advance(double dt)\n  {\n    constexpr unsigned int N = ((bodies.size() - 1) * bodies.size()) / 2;\n\n    static double r[N][4];\n    static double mag[N];\n\n    unsigned int i, m;\n    __m128d dx[3], dsquared, distance, dmag;\n\n    i=0;\n    for(auto bi(bodies.begin()); bi!=bodies.end(); ++bi)\n      {\n        auto bj(bi);\n        for(++bj; bj!=bodies.end(); ++bj, ++i)\n          for (m=0; m<3; ++m)\n            r[i][m] = bi->x[m] - bj->x[m];\n      }\n\n    for (i=0; i<N; i+=2)\n      {\n        for (m=0; m<3; ++m)\n          {\n            dx[m] = _mm_loadl_pd(dx[m], &r[i][m]);\n            dx[m] = _mm_loadh_pd(dx[m], &r[i+1][m]);\n          }\n\n        dsquared = dx[0] * dx[0] + dx[1] * dx[1] + dx[2] * dx[2];\n        distance = _mm_cvtps_pd(_mm_rsqrt_ps(_mm_cvtpd_ps(dsquared)));\n\n        for (m=0; m<2; ++m)\n          distance = distance * _mm_set1_pd(1.5)\n            - ((_mm_set1_pd(0.5) * dsquared) * distance)\n            * (distance * distance);\n\n        dmag = _mm_set1_pd(dt) / (dsquared) * distance;\n        _mm_store_pd(&mag[i], dmag);\n      }\n\n    i=0;\n    for(auto bi(bodies.begin()); bi!=bodies.end(); ++bi)\n      {\n        auto bj(bi);\n        for(++bj; bj!=bodies.end(); ++bj, ++i)\n          for(m=0; m<3; ++m)\n            {\n              const double x = r[i][m] * mag[i];\n              bi->v[m] -= x * bj->mass;\n              bj->v[m] += x * bi->mass;\n            }\n      }\n\n    for(auto &body: bodies)\n      for(m=0; m<3; ++m)\n        body.x[m] += dt * body.v[m];\n  }\n\n  double energy()\n  {\n    double e(0.0);\n    for(auto bi(bodies.cbegin()); bi!=bodies.cend(); ++bi)\n      {\n        e += bi->mass * ( bi->v[0] * bi->v[0]\n                          + bi->v[1] * bi->v[1]\n                          + bi->v[2] * bi->v[2] ) / 2.;\n\n        auto bj(bi);\n        for(++bj; bj!=bodies.end(); ++bj)\n          {\n            double distance = 0;\n            for(auto k=0; k<3; ++k)\n            {\n              const double dx = bi->x[k] - bj->x[k];\n              distance += dx * dx;\n            }\n\n            e -= (bi->mass * bj->mass) / std::sqrt(distance);\n          }\n      }\n    return e;\n  }\n};\n\n\nstd::array<body,5> N_Body_System::bodies{{\n    /* sun */\n    body(0., 0., 0. ,\n         0., 0., 0. ,\n         SOLAR_MASS),\n    /* jupiter */\n    body(4.84143144246472090e+00,\n         -1.16032004402742839e+00,\n         -1.03622044471123109e-01 ,\n         1.66007664274403694e-03 * DAYS_PER_YEAR,\n         7.69901118419740425e-03 * DAYS_PER_YEAR,\n         -6.90460016972063023e-05 * DAYS_PER_YEAR ,\n         9.54791938424326609e-04 * SOLAR_MASS\n         ),\n    /* saturn */\n    body(8.34336671824457987e+00,\n         4.12479856412430479e+00,\n         -4.03523417114321381e-01 ,\n         -2.76742510726862411e-03 * DAYS_PER_YEAR,\n         4.99852801234917238e-03 * DAYS_PER_YEAR,\n         2.30417297573763929e-05 * DAYS_PER_YEAR ,\n         2.85885980666130812e-04 * SOLAR_MASS\n         ),\n    /* uranus */\n    body(1.28943695621391310e+01,\n         -1.51111514016986312e+01,\n         -2.23307578892655734e-01 ,\n         2.96460137564761618e-03 * DAYS_PER_YEAR,\n         2.37847173959480950e-03 * DAYS_PER_YEAR,\n         -2.96589568540237556e-05 * DAYS_PER_YEAR ,\n         4.36624404335156298e-05 * SOLAR_MASS\n         ),\n    /* neptune */\n    body(1.53796971148509165e+01,\n         -2.59193146099879641e+01,\n         1.79258772950371181e-01 ,\n         2.68067772490389322e-03 * DAYS_PER_YEAR,\n         1.62824170038242295e-03 * DAYS_PER_YEAR,\n         -9.51592254519715870e-05 * DAYS_PER_YEAR ,\n         5.15138902046611451e-05 * SOLAR_MASS\n         )\n  }};\n\nint main(int , char** argv)\n{\n  int i, n = atoi(argv[1]);\n  N_Body_System system;\n\n  printf(\"%.9f\\n\", system.energy());\n  for (i = 0; i < n; ++i)\n    system.advance(0.01);\n  printf(\"%.9f\\n\", system.energy());\n\n  return 0;\n}",
        1150.416,
        20776.06
    ],
    "1": [
        "#include <algorithm>\n#include <stdio.h>\n#include <cmath>\n#include <stdlib.h>\n#include <immintrin.h>\n#include <array>\n\nconstexpr double PI(3.141592653589793);\nconstexpr double SOLAR_MASS ( 4 * PI * PI );\nconstexpr double DAYS_PER_YEAR(365.24);\n\nstruct body {\n  std::array<double, 3> x, v;  // Changed to std::array for potentially better cache locality\n  double mass;\n  constexpr body(double x0, double x1, double x2, double v0, double v1, double v2, double Mass):\n    x{{x0,x1,x2}}, v{{v0,v1,v2}}, mass(Mass) {}\n};\n\nclass N_Body_System\n{\n  static std::array<body,5> bodies;\n\n  void offset_momentum()\n  {\n    for(int k = 0; k < 3; ++k) {\n      for(const auto &body: bodies) {\n        bodies[0].v[k] -= body.v[k] * body.mass / SOLAR_MASS;\n      }\n    }\n  }\n\npublic:\n  N_Body_System()\n  {\n    offset_momentum();\n  }\n  void advance(double dt)\n  {\n    constexpr unsigned int N = ((bodies.size() - 1) * bodies.size()) / 2;\n\n    static double r[N][4];\n    static double mag[N];\n\n    unsigned int i, m;\n    __m128d dx[3], dsquared, distance, dmag;\n\n    i=0;\n    for(auto bi(bodies.begin()); bi!=bodies.end(); ++bi)\n      {\n        auto bj(bi);\n        for(++bj; bj!=bodies.end(); ++bj, ++i)\n          for (m=0; m<3; ++m)\n            r[i][m] = bi->x[m] - bj->x[m];\n      }\n\n    for (i=0; i<N; i+=2)\n      {\n        for (m=0; m<3; ++m)\n          {\n            dx[m] = _mm_loadl_pd(dx[m], &r[i][m]);\n            dx[m] = _mm_loadh_pd(dx[m], &r[i+1][m]);\n          }\n\n        dsquared = dx[0] * dx[0] + dx[1] * dx[1] + dx[2] * dx[2];\n        distance = _mm_cvtps_pd(_mm_rsqrt_ps(_mm_cvtpd_ps(dsquared)));\n\n        for (m=0; m<2; ++m)\n          distance = distance * _mm_set1_pd(1.5)\n            - ((_mm_set1_pd(0.5) * dsquared) * distance)\n            * (distance * distance);\n\n        dmag = _mm_set1_pd(dt) / (dsquared) * distance;\n        _mm_store_pd(&mag[i], dmag);\n      }\n\n    i=0;\n    for(auto bi(bodies.begin()); bi!=bodies.end(); ++bi)\n      {\n        auto bj(bi);\n        for(++bj; bj!=bodies.end(); ++bj, ++i)\n          for(m=0; m<3; ++m)\n            {\n              const double x = r[i][m] * mag[i];\n              bi->v[m] -= x * bj->mass;\n              bj->v[m] += x * bi->mass;\n            }\n      }\n\n    for(auto &body: bodies)\n      for(m=0; m<3; ++m)\n        body.x[m] += dt * body.v[m];\n  }\n\n  double energy()\n  {\n    double e(0.0);\n    for(auto bi(bodies.cbegin()); bi!=bodies.cend(); ++bi)\n      {\n        e += bi->mass * ( bi->v[0] * bi->v[0]\n                          + bi->v[1] * bi->v[1]\n                          + bi->v[2] * bi->v[2] ) / 2.;\n\n        auto bj(bi);\n        for(++bj; bj!=bodies.end(); ++bj)\n          {\n            double distance = 0;\n            for(auto k=0; k<3; ++k)\n            {\n              const double dx = bi->x[k] - bj->x[k];\n              distance += dx * dx;\n            }\n\n            e -= (bi->mass * bj->mass) / std::sqrt(distance);\n          }\n      }\n    return e;\n  }\n};\n\n\nstd::array<body,5> N_Body_System::bodies{{\n    /* sun */\n    body(0., 0., 0. ,\n         0., 0., 0. ,\n         SOLAR_MASS),\n    /* jupiter */\n    body(4.84143144246472090e+00,\n         -1.16032004402742839e+00,\n         -1.03622044471123109e-01 ,\n         1.66007664274403694e-03 * DAYS_PER_YEAR,\n         7.69901118419740425e-03 * DAYS_PER_YEAR,\n         -6.90460016972063023e-05 * DAYS_PER_YEAR ,\n         9.54791938424326609e-04 * SOLAR_MASS\n         ),\n    /* saturn */\n    body(8.34336671824457987e+00,\n         4.12479856412430479e+00,\n         -4.03523417114321381e-01 ,\n         -2.76742510726862411e-03 * DAYS_PER_YEAR,\n         4.99852801234917238e-03 * DAYS_PER_YEAR,\n         2.30417297573763929e-05 * DAYS_PER_YEAR ,\n         2.85885980666130812e-04 * SOLAR_MASS\n         ),\n    /* uranus */\n    body(1.28943695621391310e+01,\n         -1.51111514016986312e+01,\n         -2.23307578892655734e-01 ,\n         2.96460137564761618e-03 * DAYS_PER_YEAR,\n         2.37847173959480950e-03 * DAYS_PER_YEAR,\n         -2.96589568540237556e-05 * DAYS_PER_YEAR ,\n         4.36624404335156298e-05 * SOLAR_MASS\n         ),\n    /* neptune */\n    body(1.53796971148509165e+01,\n         -2.59193146099879641e+01,\n         1.79258772950371181e-01 ,\n         2.68067772490389322e-03 * DAYS_PER_YEAR,\n         1.62824170038242295e-03 * DAYS_PER_YEAR,\n         -9.51592254519715870e-05 * DAYS_PER_YEAR ,\n         5.15138902046611451e-05 * SOLAR_MASS\n         )\n  }};\n\nint main(int , char** argv)\n{\n  int i, n = atoi(argv[1]);\n  N_Body_System system;\n\n  printf(\"%.9f\\n\", system.energy());\n  for (i = 0; i < n; ++i)\n    system.advance(0.01);\n  printf(\"%.9f\\n\", system.energy());\n\n  return 0;\n}  ",
        2045.423,
        37048.02
    ],
    "2": [
        "#include <algorithm>\n#include <stdio.h>\n#include <cmath>\n#include <stdlib.h>\n#include <array>\n#include <omp.h>\n\nconstexpr double PI(3.141592653589793);\nconstexpr double SOLAR_MASS ( 4 * PI * PI );\nconstexpr double DAYS_PER_YEAR(365.24);\n\nstruct Body {\n  std::array<double, 3> position, velocity;\n  double mass;\n  \n  constexpr Body(double x0, double x1, double x2, double v0, double v1, double v2, double Mass)\n    : position{{x0,x1,x2}}, velocity{{v0,v1,v2}}, mass(Mass) {}\n};\n\nclass NBodySystem {\n  static std::array<Body, 5> bodies;\n\n  void offsetMomentum() {\n    for (int k = 0; k < 3; ++k) {\n      for (const auto &body : bodies) {\n        bodies[0].velocity[k] -= body.velocity[k] * body.mass / SOLAR_MASS;\n      }\n    }\n  }\n\npublic:\n  NBodySystem() {\n    offsetMomentum();\n  }\n\n  void advance(double dt) {\n    #pragma omp parallel for\n    for (size_t i = 0; i < bodies.size(); ++i) {\n      for (size_t j = i + 1; j < bodies.size(); ++j) {\n        double dx[3];\n        for (int k = 0; k < 3; ++k) {\n          dx[k] = bodies[i].position[k] - bodies[j].position[k];\n        }\n\n        double distanceSquared = dx[0] * dx[0] + dx[1] * dx[1] + dx[2] * dx[2];\n        double distance = sqrt(distanceSquared);\n        double mag = dt / (distanceSquared * distance);\n\n        for (int k = 0; k < 3; ++k) {\n          double force = dx[k] * mag;\n          bodies[i].velocity[k] -= force * bodies[j].mass;\n          bodies[j].velocity[k] += force * bodies[i].mass;\n        }\n      }\n\n      for (int k = 0; k < 3; ++k) {\n        bodies[i].position[k] += bodies[i].velocity[k] * dt;\n      }\n    }\n  }\n\n  double energy() const {\n    double e = 0.0;\n    for (size_t i = 0; i < bodies.size(); ++i) {\n      e += 0.5 * bodies[i].mass * (bodies[i].velocity[0] * bodies[i].velocity[0] +\n                                   bodies[i].velocity[1] * bodies[i].velocity[1] +\n                                   bodies[i].velocity[2] * bodies[i].velocity[2]);\n\n      for (size_t j = i + 1; j < bodies.size(); ++j) {\n        double dx[3];\n        for (int k = 0; k < 3; ++k) {\n          dx[k] = bodies[i].position[k] - bodies[j].position[k];\n        }\n\n        double distance = sqrt(dx[0] * dx[0] + dx[1] * dx[1] + dx[2] * dx[2]);\n        e -= bodies[i].mass * bodies[j].mass / distance;\n      }\n    }\n    return e;\n  }\n};\n\nstd::array<Body, 5> NBodySystem::bodies{{\n    Body(0., 0., 0., 0., 0., 0., SOLAR_MASS),\n    Body(4.84143144246472090e+00, -1.16032004402742839e+00, -1.03622044471123109e-01,\n         1.66007664274403694e-03 * DAYS_PER_YEAR, 7.69901118419740425e-03 * DAYS_PER_YEAR,\n         -6.90460016972063023e-05 * DAYS_PER_YEAR, 9.54791938424326609e-04 * SOLAR_MASS),\n    Body(8.34336671824457987e+00, 4.12479856412430479e+00, -4.03523417114321381e-01,\n         -2.76742510726862411e-03 * DAYS_PER_YEAR, 4.99852801234917238e-03 * DAYS_PER_YEAR,\n         2.30417297573763929e-05 * DAYS_PER_YEAR, 2.85885980666130812e-04 * SOLAR_MASS),\n    Body(1.28943695621391310e+01, -1.51111514016986312e+01, -2.23307578892655734e-01,\n         2.96460137564761618e-03 * DAYS_PER_YEAR, 2.37847173959480950e-03 * DAYS_PER_YEAR,\n         -2.96589568540237556e-05 * DAYS_PER_YEAR, 4.36624404335156298e-05 * SOLAR_MASS),\n    Body(1.53796971148509165e+01, -2.59193146099879641e+01, 1.79258772950371181e-01,\n         2.68067772490389322e-03 * DAYS_PER_YEAR, 1.62824170038242295e-03 * DAYS_PER_YEAR,\n         -9.51592254519715870e-05 * DAYS_PER_YEAR, 5.15138902046611451e-05 * SOLAR_MASS)\n}};\n\nint main(int argc, char** argv) {\n  int n = (argc > 1) ? atoi(argv[1]) : 1000;\n  NBodySystem system;\n\n  printf(\"%.9f\\n\", system.energy());\n  for (int i = 0; i < n; ++i) {\n    system.advance(0.01);\n  }\n  printf(\"%.9f\\n\", system.energy());\n\n  return 0;\n}\n",
        2949.993,
        53507.98
    ],
    "3": [
        "#include <algorithm>\n#include <iostream>\n#include <cmath>\n#include <array>\n#include <omp.h>\n#include <iomanip> // Include for setting precision of output\n\nconstexpr double PI = 3.141592653589793;\nconstexpr double SOLAR_MASS = 4 * PI * PI;\nconstexpr double DAYS_PER_YEAR = 365.24;\n\nstruct Body {\n    std::array<double, 3> position, velocity;\n    double mass;\n    \n    constexpr Body(double x0, double x1, double x2, double v0, double v1, double v2, double Mass)\n        : position{{x0, x1, x2}}, velocity{{v0, v1, v2}}, mass(Mass) {}\n};\n\nclass NBodySystem {\n    static std::array<Body, 5> bodies;\n\n    void offsetMomentum() {\n        for (int k = 0; k < 3; ++k) {\n            for (const auto &body : bodies) {\n                bodies[0].velocity[k] -= body.velocity[k] * body.mass / SOLAR_MASS;\n            }\n        }\n    }\n\npublic:\n    NBodySystem() {\n        offsetMomentum();\n    }\n\n    void advance(double dt) {\n        std::array<double, bodies.size()*(bodies.size()-1)/2> magnitudes; // To cache magnitudes for force calculations\n        #pragma omp parallel\n        {\n            #pragma omp for schedule(dynamic)\n            for (size_t i = 0; i < bodies.size(); ++i) {\n                size_t index = 0; // Reset index for caching\n                for (size_t j = i + 1; j < bodies.size(); ++j) {\n                    double dx[3];\n                    for (int k = 0; k < 3; ++k) {\n                        dx[k] = bodies[i].position[k] - bodies[j].position[k];\n                    }\n\n                    double distanceSquared = dx[0] * dx[0] + dx[1] * dx[1] + dx[2] * dx[2];\n                    double distance = sqrt(distanceSquared);\n                    double mag = dt / (distanceSquared * distance);\n\n                    magnitudes[index] = mag; // Cache this magnitude for later use\n\n                    #pragma omp atomic\n                    for (int k = 0; k < 3; ++k) {\n                        double force = dx[k] * mag;\n                        bodies[i].velocity[k] -= force * bodies[j].mass;\n                        bodies[j].velocity[k] += force * bodies[i].mass;\n                    }\n                    index++;\n                }\n\n                for (int k = 0; k < 3; ++k) {\n                    bodies[i].position[k] += bodies[i].velocity[k] * dt;\n                }\n            }\n        }\n    }\n\n    double energy() const {\n        double e = 0.0;\n        for (size_t i = 0; i < bodies.size(); ++i) {\n            e += 0.5 * bodies[i].mass * (bodies[i].velocity[0] * bodies[i].velocity[0] +\n                                         bodies[i].velocity[1] * bodies[i].velocity[1] +\n                                         bodies[i].velocity[2] * bodies[i].velocity[2]);\n\n            for (size_t j = i + 1; j < bodies.size(); ++j) {\n                double dx[3];\n                for (int k = 0; k < 3; ++k) {\n                    dx[k] = bodies[i].position[k] - bodies[j].position[k];\n                }\n\n                double distance = sqrt(dx[0] * dx[0] + dx[1] * dx[1] + dx[2] * dx[2]);\n                e -= bodies[i].mass * bodies[j].mass / distance;\n            }\n        }\n        return e;\n    }\n};\n\nstd::array<Body, 5> NBodySystem::bodies{{\n    Body(0., 0., 0., 0., 0., 0., SOLAR_MASS),\n    Body(4.84143144246472090e+00, -1.16032004402742839e+00, -1.03622044471123109e-01,\n         1.66007664274403694e-03 * DAYS_PER_YEAR, 7.69901118419740425e-03 * DAYS_PER_YEAR,\n         -6.90460016972063023e-05 * DAYS_PER_YEAR, 9.54791938424326609e-04 * SOLAR_MASS),\n    Body(8.34336671824457987e+00, 4.12479856412430479e+00, -4.03523417114321381e-01,\n         -2.76742510726862411e-03 * DAYS_PER_YEAR, 4.99852801234917238e-03 * DAYS_PER_YEAR,\n         2.30417297573763929e-05 * DAYS_PER_YEAR, 2.85885980666130812e-04 * SOLAR_MASS),\n    Body(1.28943695621391310e+01, -1.51111514016986312e+01, -2.23307578892655734e-01,\n         2.96460137564761618e-03 * DAYS_PER_YEAR, 2.37847173959480950e-03 * DAYS_PER_YEAR,\n         -2.96589568540237556e-05 * DAYS_PER_YEAR, 4.36624404335156298e-05 * SOLAR_MASS),\n    Body(1.53796971148509165e+01, -2.59193146099879641e+01, 1.79258772950371181e-01,\n         2.68067772490389322e-03 * DAYS_PER_YEAR, 1.62824170038242295e-03 * DAYS_PER_YEAR,\n         -9.51592254519715870e-05 * DAYS_PER_YEAR, 5.15138902046611451e-05 * SOLAR_MASS)\n}};\n\nint main(int argc, char** argv) {\n    int n = (argc > 1) ? atoi(argv[1]) : 1000;\n    NBodySystem system;\n\n    std::cout << std::fixed << std::setprecision(9) << system.energy() << \"\\n\";\n    for (int i = 0; i < n; ++i) {\n        system.advance(0.01);\n    }\n    std::cout << system.energy() << \"\\n\";\n\n    return 0;\n}\n",
        3008.99,
        54506.14
    ],
    "4": [
        "#include <algorithm>\n#include <iostream>\n#include <cmath>\n#include <array>\n#include <omp.h>\n#include <iomanip> // Include for setting precision of output\n#include <immintrin.h> // Include for SIMD intrinsics\n\nconstexpr double PI = 3.141592653589793;\nconstexpr double SOLAR_MASS = 4 * PI * PI;\nconstexpr double DAYS_PER_YEAR = 365.24;\n\nstruct Body {\n    std::array<double, 3> position, velocity;\n    double mass;\n    \n    constexpr Body(double x0, double x1, double x2, double v0, double v1, double v2, double Mass)\n        : position{{x0, x1, x2}}, velocity{{v0, v1, v2}}, mass(Mass) {}\n};\n\nclass NBodySystem {\n    static std::array<Body, 5> bodies;\n\n    void offsetMomentum() {\n        for (int k = 0; k < 3; ++k) {\n            for (const auto &body : bodies) {\n                bodies[0].velocity[k] -= body.velocity[k] * body.mass / SOLAR_MASS;\n            }\n        }\n    }\n\npublic:\n    NBodySystem() {\n        offsetMomentum();\n    }\n\n    void advance(double dt) {\n        #pragma omp parallel\n        {\n            #pragma omp for schedule(dynamic)\n            for (size_t i = 0; i < bodies.size(); ++i) {\n                for (size_t j = i + 1; j < bodies.size(); ++j) {\n                    double dx[3];\n                    for (int k = 0; k < 3; ++k) {\n                        dx[k] = bodies[i].position[k] - bodies[j].position[k];\n                    }\n\n                    double distanceSquared = dx[0] * dx[0] + dx[1] * dx[1] + dx[2] * dx[2];\n                    double mag = dt / (distanceSquared * sqrt(distanceSquared));\n\n                    for (int k = 0; k < 3; ++k) {\n                        double force = dx[k] * mag;\n                        #pragma omp atomic\n                        bodies[i].velocity[k] -= force * bodies[j].mass;\n                        #pragma omp atomic\n                        bodies[j].velocity[k] += force * bodies[i].mass;\n                    }\n                }\n\n                for (int k = 0; k < 3; ++k) {\n                    bodies[i].position[k] += bodies[i].velocity[k] * dt;\n                }\n            }\n        }\n    }\n\n    double energy() const {\n        double e = 0.0;\n        for (size_t i = 0; i < bodies.size(); ++i) {\n            e += 0.5 * bodies[i].mass * (bodies[i].velocity[0] * bodies[i].velocity[0] +\n                                         bodies[i].velocity[1] * bodies[i].velocity[1] +\n                                         bodies[i].velocity[2] * bodies[i].velocity[2]);\n\n            for (size_t j = i + 1; j < bodies.size(); ++j) {\n                double dx[3];\n                for (int k = 0; k < 3; ++k) {\n                    dx[k] = bodies[i].position[k] - bodies[j].position[k];\n                }\n\n                double distance = sqrt(dx[0] * dx[0] + dx[1] * dx[1] + dx[2] * dx[2]);\n                e -= bodies[i].mass * bodies[j].mass / distance;\n            }\n        }\n        return e;\n    }\n};\n\nstd::array<Body, 5> NBodySystem::bodies{{\n    Body(0., 0., 0., 0., 0., 0., SOLAR_MASS),\n    Body(4.84143144246472090e+00, -1.16032004402742839e+00, -1.03622044471123109e-01,\n         1.66007664274403694e-03 * DAYS_PER_YEAR, 7.69901118419740425e-03 * DAYS_PER_YEAR,\n         -6.90460016972063023e-05 * DAYS_PER_YEAR, 9.54791938424326609e-04 * SOLAR_MASS),\n    Body(8.34336671824457987e+00, 4.12479856412430479e+00, -4.03523417114321381e-01,\n         -2.76742510726862411e-03 * DAYS_PER_YEAR, 4.99852801234917238e-03 * DAYS_PER_YEAR,\n         2.30417297573763929e-05 * DAYS_PER_YEAR, 2.85885980666130812e-04 * SOLAR_MASS),\n    Body(1.28943695621391310e+01, -1.51111514016986312e+01, -2.23307578892655734e-01,\n         2.96460137564761618e-03 * DAYS_PER_YEAR, 2.37847173959480950e-03 * DAYS_PER_YEAR,\n         -2.96589568540237556e-05 * DAYS_PER_YEAR, 4.36624404335156298e-05 * SOLAR_MASS),\n    Body(1.53796971148509165e+01, -2.59193146099879641e+01, 1.79258772950371181e-01,\n         2.68067772490389322e-03 * DAYS_PER_YEAR, 1.62824170038242295e-03 * DAYS_PER_YEAR,\n         -9.51592254519715870e-05 * DAYS_PER_YEAR, 5.15138902046611451e-05 * SOLAR_MASS)\n}};\n\nint main(int argc, char** argv) {\n    int n = (argc > 1) ? atoi(argv[1]) : 1000;\n    NBodySystem system;\n\n    std::cout << std::fixed << std::setprecision(9) << system.energy() << \"\\n\";\n    for (int i = 0; i < n; ++i) {\n        system.advance(0.01);\n    }\n    std::cout << system.energy() << \"\\n\";\n\n    return 0;\n}",
        3045.527,
        54868.42
    ],
    "5": [
        "#include <algorithm>\n#include <iostream>\n#include <cmath>\n#include <array>\n#include <omp.h>\n#include <iomanip> // Include for setting precision\n#include <immintrin.h> // Include for SIMD intrinsics\n\nconstexpr double PI = 3.141592653589793;\nconstexpr double SOLAR_MASS = 4 * PI * PI;\nconstexpr double DAYS_PER_YEAR = 365.24;\n\nstruct Body {\n    std::array<double, 3> position, velocity;\n    double mass;\n    \n    constexpr Body(double x0, double x1, double x2, double v0, double v1, double v2, double Mass)\n        : position{{x0, x1, x2}}, velocity{{v0, v1, v2}}, mass(Mass) {}\n};\n\nclass NBodySystem {\n    static std::array<Body, 5> bodies;\n\n    void offsetMomentum() {\n        double v0[3] = {0.0, 0.0, 0.0};\n        for (const auto &body : bodies) {\n            v0[0] -= body.velocity[0] * body.mass / SOLAR_MASS;\n            v0[1] -= body.velocity[1] * body.mass / SOLAR_MASS;\n            v0[2] -= body.velocity[2] * body.mass / SOLAR_MASS;\n        }\n        bodies[0].velocity[0] = v0[0];\n        bodies[0].velocity[1] = v0[1];\n        bodies[0].velocity[2] = v0[2];\n    }\n\npublic:\n    NBodySystem() {\n        offsetMomentum();\n    }\n\n    void advance(double dt) {\n        #pragma omp parallel for schedule(dynamic)\n        for (size_t i = 0; i < bodies.size(); ++i) {\n            for (size_t j = i + 1; j < bodies.size(); ++j) {\n                std::array<double, 3> dx;\n                for (int k = 0; k < 3; ++k) {\n                    dx[k] = bodies[i].position[k] - bodies[j].position[k];\n                }\n\n                double distanceSquared = dx[0] * dx[0] + dx[1] * dx[1] + dx[2] * dx[2];\n                double mag = dt / (distanceSquared * std::sqrt(distanceSquared));\n\n                for (int k = 0; k < 3; ++k) {\n                    double force = dx[k] * mag;\n                    #pragma omp atomic\n                    bodies[i].velocity[k] -= force * bodies[j].mass;\n                    #pragma omp atomic\n                    bodies[j].velocity[k] += force * bodies[i].mass;\n                }\n            }\n\n            for (int k = 0; k < 3; ++k) {\n                bodies[i].position[k] += bodies[i].velocity[k] * dt;\n            }\n        }\n    }\n\n    double energy() const {\n        double e = 0.0;\n        for (size_t i = 0; i < bodies.size(); ++i) {\n            e += 0.5 * bodies[i].mass * (bodies[i].velocity[0] * bodies[i].velocity[0] +\n                                         bodies[i].velocity[1] * bodies[i].velocity[1] +\n                                         bodies[i].velocity[2] * bodies[i].velocity[2]);\n\n            for (size_t j = i + 1; j < bodies.size(); ++j) {\n                std::array<double, 3> dx;\n                for (int k = 0; k < 3; ++k) {\n                    dx[k] = bodies[i].position[k] - bodies[j].position[k];\n                }\n\n                double distance = std::sqrt(dx[0] * dx[0] + dx[1] * dx[1] + dx[2] * dx[2]);\n                e -= bodies[i].mass * bodies[j].mass / distance;\n            }\n        }\n        return e;\n    }\n};\n\nstd::array<Body, 5> NBodySystem::bodies{{\n    Body(0., 0., 0., 0., 0., 0., SOLAR_MASS),\n    Body(4.84143144246472090e+00, -1.16032004402742839e+00, -1.03622044471123109e-01,\n         1.66007664274403694e-03 * DAYS_PER_YEAR, 7.69901118419740425e-03 * DAYS_PER_YEAR,\n         -6.90460016972063023e-05 * DAYS_PER_YEAR, 9.54791938424326609e-04 * SOLAR_MASS),\n    Body(8.34336671824457987e+00, 4.12479856412430479e+00, -4.03523417114321381e-01,\n         -2.76742510726862411e-03 * DAYS_PER_YEAR, 4.99852801234917238e-03 * DAYS_PER_YEAR,\n         2.30417297573763929e-05 * DAYS_PER_YEAR, 2.85885980666130812e-04 * SOLAR_MASS),\n    Body(1.28943695621391310e+01, -1.51111514016986312e+01, -2.23307578892655734e-01,\n         2.96460137564761618e-03 * DAYS_PER_YEAR, 2.37847173959480950e-03 * DAYS_PER_YEAR,\n         -2.96589568540237556e-05 * DAYS_PER_YEAR, 4.36624404335156298e-05 * SOLAR_MASS),\n    Body(1.53796971148509165e+01, -2.59193146099879641e+01, 1.79258772950371181e-01,\n         2.68067772490389322e-03 * DAYS_PER_YEAR, 1.62824170038242295e-03 * DAYS_PER_YEAR,\n         -9.51592254519715870e-05 * DAYS_PER_YEAR, 5.15138902046611451e-05 * SOLAR_MASS)\n}};\n\nint main(int argc, char** argv) {\n    int n = (argc > 1) ? atoi(argv[1]) : 1000;\n    NBodySystem system;\n\n    std::cout << std::fixed << std::setprecision(9) << system.energy() << \"\\n\";\n    for (int i = 0; i < n; ++i) {\n        system.advance(0.01);\n    }\n    std::cout << system.energy() << \"\\n\";\n\n    return 0;\n}",
        3582.613,
        64611.52
    ]
}