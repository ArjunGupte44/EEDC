{
    "0": [
        "#include <algorithm>\n#include <stdio.h>\n#include <cmath>\n#include <stdlib.h>\n#include <immintrin.h>\n#include <array>\n\nconstexpr double PI(3.141592653589793);\nconstexpr double SOLAR_MASS ( 4 * PI * PI );\nconstexpr double DAYS_PER_YEAR(365.24);\n\nstruct body {\n  double x[3], fill, v[3], mass;\n  constexpr body(double x0, double x1, double x2, double v0, double v1, double v2,  double Mass):\n    x{x0,x1,x2}, fill(0), v{v0,v1,v2}, mass(Mass) {}\n};\n\nclass N_Body_System\n{\n  static std::array<body,5> bodies;\n\n  void offset_momentum()\n  {\n    unsigned int k;\n    for(auto &body: bodies)\n      for(k = 0; k < 3; ++k)\n        bodies[0].v[k] -= body.v[k] * body.mass / SOLAR_MASS;\n  }\n\npublic:\n  N_Body_System()\n  {\n    offset_momentum();\n  }\n  void advance(double dt)\n  {\n    constexpr unsigned int N = ((bodies.size() - 1) * bodies.size()) / 2;\n\n    static double r[N][4];\n    static double mag[N];\n\n    unsigned int i, m;\n    __m128d dx[3], dsquared, distance, dmag;\n\n    i=0;\n    for(auto bi(bodies.begin()); bi!=bodies.end(); ++bi)\n      {\n        auto bj(bi);\n        for(++bj; bj!=bodies.end(); ++bj, ++i)\n          for (m=0; m<3; ++m)\n            r[i][m] = bi->x[m] - bj->x[m];\n      }\n\n    for (i=0; i<N; i+=2)\n      {\n        for (m=0; m<3; ++m)\n          {\n            dx[m] = _mm_loadl_pd(dx[m], &r[i][m]);\n            dx[m] = _mm_loadh_pd(dx[m], &r[i+1][m]);\n          }\n\n        dsquared = dx[0] * dx[0] + dx[1] * dx[1] + dx[2] * dx[2];\n        distance = _mm_cvtps_pd(_mm_rsqrt_ps(_mm_cvtpd_ps(dsquared)));\n\n        for (m=0; m<2; ++m)\n          distance = distance * _mm_set1_pd(1.5)\n            - ((_mm_set1_pd(0.5) * dsquared) * distance)\n            * (distance * distance);\n\n        dmag = _mm_set1_pd(dt) / (dsquared) * distance;\n        _mm_store_pd(&mag[i], dmag);\n      }\n\n    i=0;\n    for(auto bi(bodies.begin()); bi!=bodies.end(); ++bi)\n      {\n        auto bj(bi);\n        for(++bj; bj!=bodies.end(); ++bj, ++i)\n          for(m=0; m<3; ++m)\n            {\n              const double x = r[i][m] * mag[i];\n              bi->v[m] -= x * bj->mass;\n              bj->v[m] += x * bi->mass;\n            }\n      }\n\n    for(auto &body: bodies)\n      for(m=0; m<3; ++m)\n        body.x[m] += dt * body.v[m];\n  }\n\n  double energy()\n  {\n    double e(0.0);\n    for(auto bi(bodies.cbegin()); bi!=bodies.cend(); ++bi)\n      {\n        e += bi->mass * ( bi->v[0] * bi->v[0]\n                          + bi->v[1] * bi->v[1]\n                          + bi->v[2] * bi->v[2] ) / 2.;\n\n        auto bj(bi);\n        for(++bj; bj!=bodies.end(); ++bj)\n          {\n            double distance = 0;\n            for(auto k=0; k<3; ++k)\n            {\n              const double dx = bi->x[k] - bj->x[k];\n              distance += dx * dx;\n            }\n\n            e -= (bi->mass * bj->mass) / std::sqrt(distance);\n          }\n      }\n    return e;\n  }\n};\n\n\nstd::array<body,5> N_Body_System::bodies{{\n    /* sun */\n    body(0., 0., 0. ,\n         0., 0., 0. ,\n         SOLAR_MASS),\n    /* jupiter */\n    body(4.84143144246472090e+00,\n         -1.16032004402742839e+00,\n         -1.03622044471123109e-01 ,\n         1.66007664274403694e-03 * DAYS_PER_YEAR,\n         7.69901118419740425e-03 * DAYS_PER_YEAR,\n         -6.90460016972063023e-05 * DAYS_PER_YEAR ,\n         9.54791938424326609e-04 * SOLAR_MASS\n         ),\n    /* saturn */\n    body(8.34336671824457987e+00,\n         4.12479856412430479e+00,\n         -4.03523417114321381e-01 ,\n         -2.76742510726862411e-03 * DAYS_PER_YEAR,\n         4.99852801234917238e-03 * DAYS_PER_YEAR,\n         2.30417297573763929e-05 * DAYS_PER_YEAR ,\n         2.85885980666130812e-04 * SOLAR_MASS\n         ),\n    /* uranus */\n    body(1.28943695621391310e+01,\n         -1.51111514016986312e+01,\n         -2.23307578892655734e-01 ,\n         2.96460137564761618e-03 * DAYS_PER_YEAR,\n         2.37847173959480950e-03 * DAYS_PER_YEAR,\n         -2.96589568540237556e-05 * DAYS_PER_YEAR ,\n         4.36624404335156298e-05 * SOLAR_MASS\n         ),\n    /* neptune */\n    body(1.53796971148509165e+01,\n         -2.59193146099879641e+01,\n         1.79258772950371181e-01 ,\n         2.68067772490389322e-03 * DAYS_PER_YEAR,\n         1.62824170038242295e-03 * DAYS_PER_YEAR,\n         -9.51592254519715870e-05 * DAYS_PER_YEAR ,\n         5.15138902046611451e-05 * SOLAR_MASS\n         )\n  }};\n\nint main(int , char** argv)\n{\n  int i, n = atoi(argv[1]);\n  N_Body_System system;\n\n  printf(\"%.9f\\n\", system.energy());\n  for (i = 0; i < n; ++i)\n    system.advance(0.01);\n  printf(\"%.9f\\n\", system.energy());\n\n  return 0;\n}",
        1147.184,
        20739.88
    ],
    "1": [
        "#include <iostream>\n#include <array>\n#include <cmath>\n#include <chrono>\n\nconstexpr double PI = 3.141592653589793;\nconstexpr double SOLAR_MASS = 4 * PI * PI;\nconstexpr double DAYS_PER_YEAR = 365.24;\nconst unsigned int NUM_BODY = 5;\n\nstruct Body {\n    double x[3];       // Position\n    double fill;       // Padding clear initialization\n    double v[3];       // Velocity\n    double mass;       // Mass\n\n    // Initialize fill inside constructor\n    constexpr Body(double x0, double x1, double x2, double v0, double v1, double v2, double m)\n      : x{x0, x1, x2}, fill(0.0), v{v0, v1, v2}, mass(m) {}\n};\n\nstruct NBodySystem {\n    std::array<Body, NUM_BODY> bodies;\n\n    NBodySystem() : bodies{\n        Body(0., 0., 0., 0., 0., 0., SOLAR_MASS),\n        Body(4.84143144246472090e+00, -1.16032004402742839e+00, -1.03622044471123109e-01,\n             1.66007664274403694e-03 * DAYS_PER_YEAR, 7.69901118419740425e-03 * DAYS_PER_YEAR, -6.90460016972063023e-05 * DAYS_PER_YEAR, \n             9.54791938424326609e-04 * SOLAR_MASS),\n        Body(8.34336671824457987e+00, 4.12479856412430479e+00, -4.03523417114321381e-01,\n             -2.76742510726862411e-03 * DAYS_PER_YEAR, 4.99852801234917238e-03 * DAYS_PER_YEAR, 2.30417297573763929e-05 * DAYS_PER_YEAR,\n             2.85885980666130812e-04 * SOLAR_MASS),\n        Body(1.28943695621391310e+01, -1.51111514016986312e+01, -2.23307578892655734e-01,\n             2.96460137564761618e-03 * DAYS_PER_YEAR, 2.37847173959480950e-03 * DAYS_PER_YEAR, -2.96589568540237556e-05 * DAYS_PER_YEAR,\n             4.36624404335156298e-05 * SOLAR_MASS),\n        Body(1.53796971148509165e+01, -2.59193146099879641e+01, 1.79258772950371181e-01,\n             2.68067772490389322e-03 * DAYS_PER_YEAR, 1.62824170038242295e-03 * DAYS_PER_YEAR, -9.51592254519715870e-05 * DAYS_PER_YEAR,\n             5.15138902046611451e-05 * SOLAR_MASS)}\n    {\n        init_momentum();\n    }\n\n    void init_momentum() {\n        for (unsigned int k = 0; k < 3; ++k) {\n            double momentum = 0;\n            for (auto& body : bodies) {\n                momentum += body.v[k] * body.mass;\n            }\n            bodies[0].v[k] -= momentum / SOLAR_MASS;\n        }\n    }\n\n    void advance(double dt) {\n        const unsigned int N = ((NUM_BODY - 1) * NUM_BODY) / 2;\n        \n        static double r[N][3] = {{0.0}};\n        static double mag[N] = {0.0};\n        \n        unsigned int i = 0;\n        for (auto bi = bodies.begin(); bi != bodies.end(); ++bi) {\n            auto bj = bi;\n            for (++bj; bj != bodies.end(); ++bj, ++i) {\n                for (unsigned int m = 0; m < 3; ++m) {\n                    r[i][m] = bi->x[m] - bj->x[m];\n                }\n            }\n        }\n\n        for (i = 0; i < N; i++) {\n            double distance = 0;\n            for (unsigned int m = 0; m < 3; ++m) {\n                distance += r[i][m] * r[i][m];\n            }\n            distance = std::sqrt(distance);\n            mag[i] = dt / (distance * distance * distance);\n        }\n\n        i = 0;\n        for (auto bi = bodies.begin(); bi != bodies.end(); ++bi) {\n            auto bj = bi;\n            for (++bj; bj != bodies.end(); ++bj, ++i) {\n                for (unsigned int m = 0; m < 3; ++m) {\n                    double tmp = r[i][m] * mag[i];\n                    bi->v[m] -= tmp * bj->mass;\n                    bj->v[m] += tmp * bi->mass;\n                }\n            }\n        }\n\n        for (auto& body : bodies) {\n            for (unsigned int m = 0; m < 3; ++m) {\n                body.x[m] += dt * body.v[m];\n            }\n        }\n    }\n\n    double energy() const {\n        double e = 0.0;\n        for (auto bi = bodies.begin(); bi != bodies.end(); ++bi) {\n            e += 0.5 * bi->mass * (bi->v[0] * bi->v[0] + bi->v[1] * bi->v[1] + bi->v[2] * bi->v[2]);\n            for (auto bj = bi + 1; bj != bodies.end(); ++bj) {\n                double dist = 0.0;\n                for (unsigned int k = 0; k < 3; ++k) {\n                    double d = bi->x[k] - bj->x[k];\n                    dist += d * d;\n                }\n                e -= (bi->mass * bj->mass) / std::sqrt(dist);\n            }\n        }\n        return e;\n    }\n};\n\nint main(int argc, char** argv) {\n    int n = argc >= 2 ? std::atoi(argv[1]) : 10000;\n\n    NBodySystem system;\n\n    std::cout.precision(9);\n    std::cout << system.energy() << std::endl;\n    for (int i = 0; i < n; ++i) {\n        system.advance(0.01);\n    }\n    std::cout << system.energy() << std::endl;\n\n    return 0;\n}",
        1074.899,
        19479.36
    ],
    "2": [
        "#include <iostream>\n#include <array>\n#include <cmath>\n\nconstexpr double PI = 3.141592653589793;\nconstexpr double SOLAR_MASS = 4 * PI * PI;\nconstexpr double DAYS_PER_YEAR = 365.24;\nconst unsigned int NUM_BODY = 5;\n\nstruct Body {\n    double x[3];     // Position\n    double v[3];     // Velocity\n    double mass;     // Mass\n\n    constexpr Body(double x0, double x1, double x2, double v0, double v1, double v2, double m)\n      : x{x0, x1, x2}, v{v0, v1, v2}, mass(m) {}\n};\n\nstruct NBodySystem {\n    std::array<Body, NUM_BODY> bodies;\n\n    NBodySystem() : bodies{\n        Body(0., 0., 0., 0., 0., 0., SOLAR_MASS),\n        Body(4.84143144246472090e+00, -1.16032004402742839e+00, -1.03622044471123109e-01,\n             1.66007664274403694e-03 * DAYS_PER_YEAR, 7.69901118419740425e-03 * DAYS_PER_YEAR, -6.90460016972063023e-05 * DAYS_PER_YEAR, \n             9.54791938424326609e-04 * SOLAR_MASS),\n        Body(8.34336671824457987e+00, 4.12479856412430479e+00, -4.03523417114321381e-01,\n             -2.76742510726862411e-03 * DAYS_PER_YEAR, 4.99852801234917238e-03 * DAYS_PER_YEAR, 2.30417297573763929e-05 * DAYS_PER_YEAR,\n             2.85885980666130812e-04 * SOLAR_MASS),\n        Body(1.28943695621391310e+01, -1.51111514016986312e+01, -2.23307578892655734e-01,\n             2.96460137564761618e-03 * DAYS_PER_YEAR, 2.37847173959480950e-03 * DAYS_PER_YEAR, -2.96589568540237556e-05 * DAYS_PER_YEAR,\n             4.36624404335156298e-05 * SOLAR_MASS),\n        Body(1.53796971148509165e+01, -2.59193146099879641e+01, 1.79258772950371181e-01,\n             2.68067772490389322e-03 * DAYS_PER_YEAR, 1.62824170038242295e-03 * DAYS_PER_YEAR, -9.51592254519715870e-05 * DAYS_PER_YEAR,\n             5.15138902046611451e-05 * SOLAR_MASS)}\n    {\n        init_momentum();\n    }\n\n    void init_momentum() {\n        for (unsigned int k = 0; k < 3; ++k) {\n            double momentum = 0;\n            for (auto& body : bodies) {\n                momentum += body.v[k] * body.mass;\n            }\n            bodies[0].v[k] -= momentum / SOLAR_MASS;\n        }\n    }\n\n    void advance(double dt) {\n        const unsigned int N = ((NUM_BODY - 1) * NUM_BODY) / 2;\n        std::array<std::array<double, 3>, N> r;\n        std::array<double, N> mag;\n\n        unsigned int index = 0;\n        for (size_t i = 0; i < NUM_BODY; ++i) {\n            for (size_t j = i + 1; j < NUM_BODY; ++j, ++index) {\n                for (size_t m = 0; m < 3; ++m) {\n                    r[index][m] = bodies[i].x[m] - bodies[j].x[m];\n                }\n\n                double distSq = r[index][0] * r[index][0] +\n                                r[index][1] * r[index][1] +\n                                r[index][2] * r[index][2];\n                double distance = std::sqrt(distSq);\n                mag[index] = dt / (distSq * distance);  // Avoid additional sqrt and divisions\n            }\n        }\n\n        index = 0;\n        for (size_t i = 0; i < NUM_BODY; ++i) {\n            for (size_t j = i + 1; j < NUM_BODY; ++j, ++index) {\n                double factor = mag[index];\n                for (size_t m = 0; m < 3; ++m) {\n                    double delta = r[index][m] * factor;\n                    bodies[i].v[m] -= delta * bodies[j].mass;\n                    bodies[j].v[m] += delta * bodies[i].mass;\n                }\n            }\n        }\n\n        for (auto& body : bodies) {\n            for (size_t m = 0; m < 3; ++m) {\n                body.x[m] += dt * body.v[m];\n            }\n        }\n    }\n\n    double energy() const {\n        double e = 0.0;\n        for (auto bi = bodies.begin(); bi != bodies.end(); ++bi) {\n            e += 0.5 * bi->mass * (bi->v[0] * bi->v[0] + bi->v[1] * bi->v[1] + bi->v[2] * bi->v[2]);\n            for (auto bj = bi + 1; bj != bodies.end(); ++bj) {\n                double distSq = 0.0;\n                for (unsigned int k = 0; k < 3; ++k) {\n                    double d = bi->x[k] - bj->x[k];\n                    distSq += d * d;\n                }\n                e -= (bi->mass * bj->mass) / std::sqrt(distSq);\n            }\n        }\n        return e;\n    }\n};\n\nint main(int argc, char** argv) {\n    int n = argc >= 2 ? std::atoi(argv[1]) : 10000;\n\n    NBodySystem system;\n\n    std::cout.precision(9);\n    std::cout << system.energy() << std::endl;\n    for (int i = 0; i < n; ++i) {\n        system.advance(0.01);\n    }\n    std::cout << system.energy() << std::endl;\n\n    return 0;\n}",
        3373.65,
        60758.56
    ],
    "3": [
        "#include <iostream>\n#include <array>\n#include <cmath>\n\nconstexpr double PI = 3.141592653589793;\nconstexpr double SOLAR_MASS = 4 * PI * PI;\nconstexpr double DAYS_PER_YEAR = 365.24;\nconst unsigned int NUM_BODY = 5;\n\nstruct Body {\n    double x[3];     // Position\n    double v[3];     // Velocity\n    double mass;     // Mass\n\n    constexpr Body(double x0, double x1, double x2, double v0, double v1, double v2, double m)\n      : x{x0, x1, x2}, v{v0, v1, v2}, mass(m) {}\n};\n\nstruct NBodySystem {\n    std::array<Body, NUM_BODY> bodies;\n\n    NBodySystem() : bodies{\n        Body(0., 0., 0., 0., 0., 0., SOLAR_MASS),\n        Body(4.84143144246472090e+00, -1.16032004402742839e+00, -1.03622044471123109e-01,\n             1.66007664274403694e-03 * DAYS_PER_YEAR, 7.69901118419740425e-03 * DAYS_PER_YEAR, -6.90460016972063023e-05 * DAYS_PER_YEAR, \n             9.54791938424326609e-04 * SOLAR_MASS),\n        Body(8.34336671824457987e+00, 4.12479856412430479e+00, -4.03523417114321381e-01,\n             -2.76742510726862411e-03 * DAYS_PER_YEAR, 4.99852801234917238e-03 * DAYS_PER_YEAR, 2.30417297573763929e-05 * DAYS_PER_YEAR,\n             2.85885980666130812e-04 * SOLAR_MASS),\n        Body(1.28943695621391310e+01, -1.51111514016986312e+01, -2.23307578892655734e-01,\n             2.96460137564761618e-03 * DAYS_PER_YEAR, 2.37847173959480950e-03 * DAYS_PER_YEAR, -2.96589568540237556e-05 * DAYS_PER_YEAR,\n             4.36624404335156298e-05 * SOLAR_MASS),\n        Body(1.53796971148509165e+01, -2.59193146099879641e+01, 1.79258772950371181e-01,\n             2.68067772490389322e-03 * DAYS_PER_YEAR, 1.62824170038242295e-03 * DAYS_PER_YEAR, -9.51592254519715870e-05 * DAYS_PER_YEAR,\n             5.15138902046611451e-05 * SOLAR_MASS)}\n    {\n        init_momentum();\n    }\n\n    void init_momentum() {\n        for (unsigned int k = 0; k < 3; ++k) {\n            double momentum = 0;\n            for (auto& body : bodies) {\n                momentum += body.v[k] * body.mass;\n            }\n            bodies[0].v[k] -= momentum / SOLAR_MASS;\n        }\n    }\n\n    void advance(double dt) {\n        const unsigned int N = ((NUM_BODY - 1) * NUM_BODY) / 2;\n        \n        std::array<std::array<double, 3>, N> r;\n        std::array<double, N> mag;\n\n        unsigned int index = 0;\n        for (size_t i = 0; i < NUM_BODY; ++i) {\n            for (size_t j = i + 1; j < NUM_BODY; ++j, ++index) {\n                double dx = bodies[i].x[0] - bodies[j].x[0];\n                double dy = bodies[i].x[1] - bodies[j].x[1];\n                double dz = bodies[i].x[2] - bodies[j].x[2];\n\n                double distSq = dx * dx + dy * dy + dz * dz;\n                double distance = std::sqrt(distSq);\n\n                mag[index] = dt / (distSq * distance);\n\n                double factor = mag[index];\n                bodies[i].v[0] -= dx * factor * bodies[j].mass;\n                bodies[j].v[0] += dx * factor * bodies[i].mass;\n                bodies[i].v[1] -= dy * factor * bodies[j].mass;\n                bodies[j].v[1] += dy * factor * bodies[i].mass;\n                bodies[i].v[2] -= dz * factor * bodies[j].mass;\n                bodies[j].v[2] += dz * factor * bodies[i].mass;\n            }\n        }\n\n        for (auto& body : bodies) {\n            body.x[0] += dt * body.v[0];\n            body.x[1] += dt * body.v[1];\n            body.x[2] += dt * body.v[2];\n        }\n    }\n\n    double energy() const {\n        double e = 0.0;\n        for (auto bi = bodies.begin(); bi != bodies.end(); ++bi) {\n            e += 0.5 * bi->mass * (bi->v[0] * bi->v[0] + bi->v[1] * bi->v[1] + bi->v[2] * bi->v[2]);\n            for (auto bj = bi + 1; bj != bodies.end(); ++bj) {\n                double dx = bi->x[0] - bj->x[0];\n                double dy = bi->x[1] - bj->x[1];\n                double dz = bi->x[2] - bj->x[2];\n\n                double distSq = dx * dx + dy * dy + dz * dz;\n\n                e -= (bi->mass * bj->mass) / std::sqrt(distSq);\n            }\n        }\n        return e;\n    }\n};\n\nint main(int argc, char** argv) {\n    int n = argc >= 2 ? std::atoi(argv[1]) : 10000;\n\n    NBodySystem system;\n\n    std::cout.precision(9);\n    std::cout << system.energy() << std::endl;\n    for (int i = 0; i < n; ++i) {\n        system.advance(0.01);\n    }\n    std::cout << system.energy() << std::endl;\n\n    return 0;\n}",
        1748.647,
        32121.0
    ],
    "4": [
        "#include <iostream>\n#include <array>\n#include <cmath>\n\nconstexpr double PI = 3.141592653589793;\nconstexpr double SOLAR_MASS = 4 * PI * PI;\nconstexpr double DAYS_PER_YEAR = 365.24;\nconst unsigned int NUM_BODY = 5;\n\nstruct Body {\n    double x[3];     // Position\n    double v[3];     // Velocity\n    double mass;     // Mass\n\n    constexpr Body(double x0, double x1, double x2, double v0, double v1, double v2, double m)\n      : x{x0, x1, x2}, v{v0, v1, v2}, mass(m) {}\n};\n\nclass NBodySystem {\n    std::array<Body, NUM_BODY> bodies;\n\n    void offset_momentum() {\n        double px = 0.0, py = 0.0, pz = 0.0;\n\n        for (auto &b : bodies) {\n            px += b.v[0] * b.mass;\n            py += b.v[1] * b.mass;\n            pz += b.v[2] * b.mass;\n        }\n\n        bodies[0].v[0] = -px / SOLAR_MASS;\n        bodies[0].v[1] = -py / SOLAR_MASS;\n        bodies[0].v[2] = -pz / SOLAR_MASS;\n    }\n\npublic:\n    NBodySystem()\n      : bodies{\n        Body(0., 0., 0., 0., 0., 0., SOLAR_MASS),\n        Body(4.84143144246472090e+00, -1.16032004402742839e+00, -1.03622044471123109e-01,\n             1.66007664274403694e-03 * DAYS_PER_YEAR, 7.69901118419740425e-03 * DAYS_PER_YEAR, -6.90460016972063023e-05 * DAYS_PER_YEAR, \n             9.54791938424326609e-04 * SOLAR_MASS),\n        Body(8.34336671824457987e+00, 4.12479856412430479e+00, -4.03523417114321381e-01,\n             -2.76742510726862411e-03 * DAYS_PER_YEAR, 4.99852801234917238e-03 * DAYS_PER_YEAR, 2.30417297573763929e-05 * DAYS_PER_YEAR,\n             2.85885980666130812e-04 * SOLAR_MASS),\n        Body(1.28943695621391310e+01, -1.51111514016986312e+01, -2.23307578892655734e-01,\n             2.96460137564761618e-03 * DAYS_PER_YEAR, 2.37847173959480950e-03 * DAYS_PER_YEAR, -2.96589568540237556e-05 * DAYS_PER_YEAR,\n             4.36624404335156298e-05 * SOLAR_MASS),\n        Body(1.53796971148509165e+01, -2.59193146099879641e+01, 1.79258772950371181e-01,\n             2.68067772490389322e-03 * DAYS_PER_YEAR, 1.62824170038242295e-03 * DAYS_PER_YEAR, -9.51592254519715870e-05 * DAYS_PER_YEAR,\n             5.15138902046611451e-05 * SOLAR_MASS)} { offset_momentum(); }\n\n    void advance(double dt) {\n        double r[NUM_BODY][NUM_BODY][3] = {0};\n        double mag[NUM_BODY][NUM_BODY] = {0};\n\n        for (unsigned int i = 0; i < NUM_BODY; i++) {\n            for (unsigned int j = i + 1; j < NUM_BODY; j++) {\n                for (unsigned int k = 0; k < 3; k++) {\n                    r[i][j][k] = bodies[i].x[k] - bodies[j].x[k];\n                }\n                \n                double distSq = r[i][j][0] * r[i][j][0] +\n                                r[i][j][1] * r[i][j][1] +\n                                r[i][j][2] * r[i][j][2];\n\n                double distSixth = distSq * std::sqrt(distSq);\n                mag[i][j] = dt / distSixth;\n            }\n        }\n\n        for (unsigned int i = 0; i < NUM_BODY; i++) {\n            for (unsigned int j = i + 1; j < NUM_BODY; j++) {\n                double massJ = bodies[j].mass;\n                double magFactor = mag[i][j];\n\n                for (unsigned int k = 0; k < 3; k++) {\n                    bodies[i].v[k] -= r[i][j][k] * magFactor * massJ;\n                    bodies[j].v[k] += r[i][j][k] * magFactor * bodies[i].mass;\n                }\n            }\n        }\n\n        for (auto &b : bodies) {\n            for (unsigned int k = 0; k < 3; k++) {\n                b.x[k] += dt * b.v[k];\n            }\n        }\n    }\n\n    double energy() const {\n        double e = 0.0;\n        for (auto bi = bodies.begin(); bi != bodies.end(); ++bi) {\n            e += 0.5 * bi->mass * (bi->v[0] * bi->v[0] + bi->v[1] * bi->v[1] + bi->v[2] * bi->v[2]);\n            for (auto bj = bi + 1; bj != bodies.end(); ++bj) {\n                double dx = bi->x[0] - bj->x[0];\n                double dy = bi->x[1] - bj->x[1];\n                double dz = bi->x[2] - bj->x[2];\n                \n                double dist = std::sqrt(dx * dx + dy * dy + dz * dz);\n                e -= (bi->mass * bj->mass) / dist;\n            }\n        }\n        return e;\n    }\n};\n\nint main(int argc, char** argv) {\n    int n = argc >= 2 ? std::atoi(argv[1]) : 10000;\n\n    NBodySystem system;\n\n    std::cout.precision(9);\n    std::cout << system.energy() << std::endl;\n    for (int i = 0; i < n; ++i) {\n        system.advance(0.01);\n    }\n    std::cout << system.energy() << std::endl;\n\n    return 0;\n}",
        1834.507,
        32991.28
    ],
    "5": [
        "#include <iostream>\n#include <array>\n#include <cmath>\n\nconstexpr double PI = 3.141592653589793;\nconstexpr double SOLAR_MASS = 4 * PI * PI;\nconstexpr double DAYS_PER_YEAR = 365.24;\nconst unsigned int NUM_BODY = 5;\n\nstruct Body {\n    double x[3];     // Position\n    double v[3];     // Velocity\n    double mass;     // Mass\n\n    constexpr Body(double x0, double x1, double x2, double v0, double v1, double v2, double m)\n      : x{x0, x1, x2}, v{v0, v1, v2}, mass(m) {}\n};\n\nclass NBodySystem {\n    std::array<Body, NUM_BODY> bodies;\n\n    void offset_momentum() {\n        double px = 0.0, py = 0.0, pz = 0.0;\n\n        for (auto &b : bodies) {\n            px += b.v[0] * b.mass;\n            py += b.v[1] * b.mass;\n            pz += b.v[2] * b.mass;\n        }\n\n        bodies[0].v[0] = -px / SOLAR_MASS;\n        bodies[0].v[1] = -py / SOLAR_MASS;\n        bodies[0].v[2] = -pz / SOLAR_MASS;\n    }\n\npublic:\n    NBodySystem()\n      : bodies{\n        Body(0., 0., 0., 0., 0., 0., SOLAR_MASS),\n        Body(4.84143144246472090e+00, -1.16032004402742839e+00, -1.03622044471123109e-01,\n             1.66007664274403694e-03 * DAYS_PER_YEAR, 7.69901118419740425e-03 * DAYS_PER_YEAR, -6.90460016972063023e-05 * DAYS_PER_YEAR, \n             9.54791938424326609e-04 * SOLAR_MASS),\n        Body(8.34336671824457987e+00, 4.12479856412430479e+00, -4.03523417114321381e-01,\n             -2.76742510726862411e-03 * DAYS_PER_YEAR, 4.99852801234917238e-03 * DAYS_PER_YEAR, 2.30417297573763929e-05 * DAYS_PER_YEAR,\n             2.85885980666130812e-04 * SOLAR_MASS),\n        Body(1.28943695621391310e+01, -1.51111514016986312e+01, -2.23307578892655734e-01,\n             2.96460137564761618e-03 * DAYS_PER_YEAR, 2.37847173959480950e-03 * DAYS_PER_YEAR, -2.96589568540237556e-05 * DAYS_PER_YEAR,\n             4.36624404335156298e-05 * SOLAR_MASS),\n        Body(1.53796971148509165e+01, -2.59193146099879641e+01, 1.79258772950371181e-01,\n             2.68067772490389322e-03 * DAYS_PER_YEAR, 1.62824170038242295e-03 * DAYS_PER_YEAR, -9.51592254519715870e-05 * DAYS_PER_YEAR,\n             5.15138902046611451e-05 * SOLAR_MASS)} { offset_momentum(); }\n\n    void advance(double dt) {\n        for (unsigned int i = 0; i < NUM_BODY; ++i) {\n            for (unsigned int j = i + 1; j < NUM_BODY; ++j) {\n                double dx = bodies[i].x[0] - bodies[j].x[0];\n                double dy = bodies[i].x[1] - bodies[j].x[1];\n                double dz = bodies[i].x[2] - bodies[j].x[2];\n\n                double distSq = dx * dx + dy * dy + dz * dz;\n                double mag = dt / (distSq * std::sqrt(distSq));\n\n                double mass_i = bodies[i].mass;\n                double mass_j = bodies[j].mass;\n\n                for (unsigned int k = 0; k < 3; ++k) {\n                    bodies[i].v[k] -= (bodies[i].x[k] - bodies[j].x[k]) * mag * mass_j;\n                    bodies[j].v[k] += (bodies[i].x[k] - bodies[j].x[k]) * mag * mass_i;\n                }\n            }\n        }\n\n        for (auto &b : bodies) {\n            for (unsigned int k = 0; k < 3; ++k) {\n                b.x[k] += dt * b.v[k];\n            }\n        }\n    }\n\n    double energy() const {\n        double e = 0.0;\n        for (auto bi = bodies.begin(); bi != bodies.end(); ++bi) {\n            e += 0.5 * bi->mass * (bi->v[0] * bi->v[0] + bi->v[1] * bi->v[1] + bi->v[2] * bi->v[2]);\n            for (auto bj = bi + 1; bj != bodies.end(); ++bj) {\n                double dx = bi->x[0] - bj->x[0];\n                double dy = bi->x[1] - bj->x[1];\n                double dz = bi->x[2] - bj->x[2];\n                \n                double dist = std::sqrt(dx * dx + dy * dy + dz * dz);\n                e -= (bi->mass * bj->mass) / dist;\n            }\n        }\n        return e;\n    }\n};\n\nint main(int argc, char** argv) {\n    int n = argc >= 2 ? std::atoi(argv[1]) : 10000;\n\n    NBodySystem system;\n\n    std::cout.precision(9);\n    std::cout << system.energy() << std::endl;\n    for (int i = 0; i < n; ++i) {\n        system.advance(0.01);\n    }\n    std::cout << system.energy() << std::endl;\n\n    return 0;\n}\n",
        2308.62,
        41923.98
    ]
}