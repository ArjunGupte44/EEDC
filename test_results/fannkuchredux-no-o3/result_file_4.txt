{
    "0": [
        "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nstatic int64_t fact[32];\n\nvoid initializeFact(int n)\n{\n    fact[0] = 1;\n    for (auto i = 1; i <= n; ++i)\n        fact[i] = i * fact[i - 1];\n}\n\nclass Permutation \n{\n  public:\n    Permutation(int n, int64_t start);\n    void advance();\n    int64_t countFlips() const;\n\n  private:\n     vector <int> count;\n     vector <int8_t> current;\n\n};\n\n// \n// Initialize the current value of a permutation\n// and the cycle count values used to advance .\n// \nPermutation::Permutation(int n, int64_t start)\n{\n    count.resize(n);\n    current.resize(n);\n\n    // Initialize count \n    for (auto i = n - 1; i >= 0; --i) \n    {\n        auto d = start / fact[i];\n        start = start % fact[i];\n        count[i] = d;\n    }\n\n    // Initialize current.\n    for (auto i = 0; i < n; ++i)\n        current[i] = i;\n\n    for (auto i = n - 1; i >= 0; --i) \n    {\n        auto d = count[i];\n        auto b = current.begin();\n        rotate(b, b + d, b + i + 1);\n    }\n}\n\n//\n// Advance the current permutation to the next in sequence.\n// \nvoid Permutation::advance()\n{\n    for (auto i = 1; ;++i) \n    {\n        // Tried using std::rotate here but that was slower.\n        auto first = current[0];\n        for (auto j = 0; j < i; ++j)\n            current[j] = current[j + 1];\n        current[i] = first;\n\n        ++(count[i]);\n        if (count[i] <= i)\n            break;\n        count[i] = 0;\n    }\n}\n\n//\n// Count the flips required to flip 0 to the front of the vector.\n//\n// Other than minor cosmetic changes, the following routine is\n// basically lifted from \"fannkuch-redux C gcc #5\"\n//\ninline int64_t Permutation::countFlips() const\n{\n    const auto n = current.size();\n    auto flips = 0;\n    auto first = current[0];\n    if (first > 0) \n    {\n        flips = 1;\n\n        int8_t temp[n];\n        // Make a copy of current to work on. \n        for (size_t i = 0; i < n; ++i)\n            temp[i] = current[i];\n\n\n        // Flip temp until the element at the first index is 0\n        for (; temp[first] > 0; ++flips) \n        {\n            // Record the newFirst and restore the old\n            // first at its new flipped position.\n            const int8_t newFirst = temp[first];\n            temp[first] = first;\n\n            if (first > 2) \n            {\n                int64_t low = 1, high = first - 1;\n                do \n                {\n                    swap(temp[low], temp[high]);\n                    if (!(low + 3 <= high && low < 16))\n                        break;\n                    ++low;\n                    --high;\n                } while (1);\n            }\n            // Update first to newFirst that we recorded earlier.\n            first = newFirst;\n        }\n    }\n    return flips;\n}\n\nint main(int argc, char **argv)\n{\n    const auto n = atoi(argv[1]);\n\n    // Compute some factorials for later use.\n    initializeFact(n);\n\n    // blockCount works best if it is set to a multiple of the number\n    // of CPUs so that the same number of blocks gets distributed to\n    // each cpu.  The computer used for development (Intel i7-4700MQ)\n    // had 8 \"CPU\"s (4 cores with hyperthreading) so 8, 16 and 24 \n    // all worked well.\n\n    auto blockCount = 24;\n    if (blockCount > fact[n])\n        blockCount = 1;\n    const int64_t blockLength = fact[n] / blockCount;\n\n    int64_t maxFlips = 0, checksum = 0;\n\n    // Iterate over each block.\n    #pragma omp parallel for \\\n        reduction(max:maxFlips) \\\n        reduction(+:checksum)\n\n    for (int64_t blockStart = 0;\n         blockStart < fact[n]; \n         blockStart += blockLength) \n    {\n        // first permutation for this block.\n        Permutation permutation(n, blockStart);\n\n        // Iterate over each permutation in the block.\n        auto index = blockStart;\n        while (1) \n        {\n            const auto flips = permutation.countFlips();\n\n            if (flips) \n            {\n                if (index % 2 == 0)\n                    checksum += flips;\n                else\n                    checksum -= flips;\n\n                if (flips > maxFlips)\n                    maxFlips = flips;\n            }\n\n            if (++index == blockStart + blockLength)\n                break;\n\n            // next permutation for this block.\n            permutation.advance();\n        }\n    }\n\n    // Output the results to stdout.\n    cout << checksum << endl;\n    cout << \"Pfannkuchen(\" << n << \") = \" << maxFlips << endl;\n\n    return 0;\n}",
        1135.982,
        6561.464
    ],
    "1": [
        "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cstring>  // For efficient memory operations\n#include <omp.h>\n\nusing namespace std;\n\nstatic int64_t fact[32];\n\nvoid initializeFact(int n) {\n    fact[0] = 1;\n    for (auto i = 1; i <= n; ++i)\n        fact[i] = i * fact[i - 1];\n}\n\nclass Permutation {\npublic:\n    Permutation(int n, int64_t start);\n    void advance();\n    int64_t countFlips() const;\n\nprivate:\n    vector<int> count;\n    vector<int8_t> current;\n};\n\nPermutation::Permutation(int n, int64_t start) {\n    count.resize(n);\n    current.resize(n);\n\n    for (auto i = n - 1; i >= 0; --i) {\n        auto d = start / fact[i];\n        start = start % fact[i];\n        count[i] = d;\n    }\n\n    for (auto i = 0; i < n; ++i)\n        current[i] = i;\n\n    for (auto i = n - 1; i >= 0; --i) {\n        auto d = count[i];\n        auto b = current.begin();\n        rotate(b, b + d, b + i + 1);\n    }\n}\n\nvoid Permutation::advance() {\n    for (auto i = 1;; ++i) {\n        int8_t first = current[0];\n        memmove(&current[0], &current[1], i);\n        current[i] = first;\n\n        ++(count[i]);\n        if (count[i] <= i)\n            break;\n        count[i] = 0;\n    }\n}\n\ninline int64_t Permutation::countFlips() const {\n    const auto n = current.size();\n    auto flips = 0;\n    auto first = current[0];\n    if (first > 0) {\n        flips = 1;\n\n        int8_t temp[n];\n        memcpy(temp, current.data(), n);\n\n        while (temp[first] > 0) {\n            int8_t newFirst = temp[first];\n            temp[first] = first;\n\n            if (first > 2) {\n                int64_t low = 1, high = first - 1;\n                while (low < high) {\n                    swap(temp[low++], temp[high--]);\n                }\n            }\n            first = newFirst;\n            ++flips;\n        }\n    }\n    return flips;\n}\n\nint main(int argc, char **argv) {\n    const auto n = atoi(argv[1]);\n\n    initializeFact(n);\n\n    auto blockCount = 24;\n    if (blockCount > fact[n])\n        blockCount = 1;\n    const int64_t blockLength = fact[n] / blockCount;\n\n    int64_t maxFlips = 0, checksum = 0;\n\n#pragma omp parallel for reduction(max:maxFlips) reduction(+:checksum)\n    for (int64_t blockStart = 0; blockStart < fact[n]; blockStart += blockLength) {\n        Permutation permutation(n, blockStart);\n\n        auto index = blockStart;\n        while (1) {\n            const auto flips = permutation.countFlips();\n\n            if (flips) {\n                checksum += (index % 2 == 0) ? flips : -flips;\n                if (flips > maxFlips)\n                    maxFlips = flips;\n            }\n\n            if (++index == blockStart + blockLength)\n                break;\n\n            permutation.advance();\n        }\n    }\n\n    cout << checksum << endl;\n    cout << \"Pfannkuchen(\" << n << \") = \" << maxFlips << endl;\n\n    return 0;\n}",
        953.416,
        5786.524
    ],
    "2": [
        "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cstring>  // For efficient memory operations\n#include <omp.h>\n\nusing namespace std;\n\nstatic int64_t fact[32];\n\nvoid initializeFact(int n) {\n    fact[0] = 1;\n    for (auto i = 1; i <= n; ++i)\n        fact[i] = i * fact[i - 1];\n}\n\nclass Permutation {\npublic:\n    Permutation(int n, int64_t start);\n    void advance();\n    int64_t countFlips() const;\n\nprivate:\n    vector<int> count;\n    vector<int8_t> current;\n};\n\nPermutation::Permutation(int n, int64_t start) {\n    count.resize(n);\n    current.resize(n);\n\n    for (auto i = n - 1; i >= 0; --i) {\n        auto d = start / fact[i];\n        start = start % fact[i];\n        count[i] = d;\n    }\n\n    for (auto i = 0; i < n; ++i)\n        current[i] = i;\n\n    for (auto i = n - 1; i >= 0; --i) {\n        auto d = count[i];\n        auto b = current.begin();\n        rotate(b, b + d, b + i + 1);\n    }\n}\n\nvoid Permutation::advance() {\n    for (auto i = 1;; ++i) {\n        int8_t first = current[0];\n        // Using direct memory manipulation to improve performance\n        memmove(&current[0], &current[1], i);\n        current[i] = first;\n\n        ++(count[i]);\n        if (count[i] <= i)\n            break;\n        count[i] = 0;\n    }\n}\n\ninline int64_t Permutation::countFlips() const {\n    const auto n = current.size();\n    auto flips = 0;\n    auto first = current[0];\n    if (first > 0) {\n        flips = 1;\n\n        int8_t temp[n];\n        memcpy(temp, current.data(), n);\n\n        while (temp[first] > 0) {\n            int8_t newFirst = temp[first];\n            temp[first] = first;\n\n            if (first > 2) {\n                int64_t low = 1, high = first - 1;\n                while (low < high) {\n                    swap(temp[low++], temp[high--]);\n                }\n            }\n            first = newFirst;\n            ++flips;\n        }\n    }\n    return flips;\n}\n\nint main(int argc, char **argv) {\n    const auto n = atoi(argv[1]);\n\n    initializeFact(n);\n\n    auto blockCount = 24;\n    if (blockCount > fact[n])\n        blockCount = 1;\n    const int64_t blockLength = fact[n] / blockCount;\n\n    int64_t maxFlips = 0, checksum = 0;\n\n    #pragma omp parallel for reduction(max:maxFlips) reduction(+:checksum)\n    for (int64_t blockStart = 0; blockStart < fact[n]; blockStart += blockLength) {\n        Permutation permutation(n, blockStart);\n\n        auto index = blockStart;\n        while (1) {\n            const auto flips = permutation.countFlips();\n\n            if (flips) {\n                checksum += (index % 2 == 0) ? flips : -flips;\n                if (flips > maxFlips)\n                    maxFlips = flips;\n            }\n\n            if (++index == blockStart + blockLength)\n                break;\n\n            permutation.advance();\n        }\n    }\n\n    cout << checksum << endl;\n    cout << \"Pfannkuchen(\" << n << \") = \" << maxFlips << endl;\n\n    return 0;\n}",
        964.221,
        5662.112
    ],
    "3": [
        "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cstring>  // For efficient memory operations\n#include <omp.h>\n\nusing namespace std;\n\nstatic int64_t fact[32];\n\nvoid initializeFact(int n) {\n    fact[0] = 1;\n    for (auto i = 1; i <= n; ++i)\n        fact[i] = i * fact[i - 1];\n}\n\nclass Permutation {\npublic:\n    Permutation(int n, int64_t start);\n    void advance();\n    int64_t countFlips() const;\n\nprivate:\n    vector<int> count;\n    vector<int8_t> current;\n    mutable vector<int8_t> temp; // Use class member to avoid stack re-allocation\n};\n\nPermutation::Permutation(int n, int64_t start) : temp(n) { // Initialize temp here\n    count.resize(n);\n    current.resize(n);\n\n    for (auto i = n - 1; i >= 0; --i) {\n        auto d = start / fact[i];\n        start = start % fact[i];\n        count[i] = d;\n    }\n\n    for (auto i = 0; i < n; ++i)\n        current[i] = i;\n\n    for (auto i = n - 1; i >= 0; --i) {\n        auto d = count[i];\n        auto b = current.begin();\n        rotate(b, b + d, b + i + 1);\n    }\n}\n\nvoid Permutation::advance() {\n    for (auto i = 1;; ++i) {\n        int8_t first = current[0];\n        memmove(&current[0], &current[1], i);\n        current[i] = first;\n\n        ++(count[i]);\n        if (count[i] <= i)\n            break;\n        count[i] = 0;\n    }\n}\n\ninline int64_t Permutation::countFlips() const {\n    const auto n = current.size();\n    auto flips = 0;\n    auto first = current[0];\n    if (first > 0) {\n        flips = 1;\n        std::copy(current.begin(), current.end(), temp.begin()); // Replace memcpy with STL copy\n\n        while (temp[first] > 0) {\n            int8_t newFirst = temp[first];\n            temp[first] = first;\n\n            if (first > 2) {\n                std::reverse(temp.begin() + 1, temp.begin() + first); // Replace manual swap loop with reverse\n            }\n            first = newFirst;\n            ++flips;\n        }\n    }\n    return flips;\n}\n\nint main(int argc, char **argv) {\n    if (argc < 2) {\n        cerr << \"Usage: \" << argv[0] << \" <number>\" << endl;\n        return 1;\n    }\n    const auto n = atoi(argv[1]);\n\n    initializeFact(n);\n\n    auto blockCount = 24;\n    if (blockCount > fact[n])\n        blockCount = 1;\n    const int64_t blockLength = fact[n] / blockCount;\n\n    int64_t maxFlips = 0, checksum = 0;\n\n    #pragma omp parallel for reduction(max:maxFlips) reduction(+:checksum)\n    for (int64_t blockStart = 0; blockStart < fact[n]; blockStart += blockLength) {\n        Permutation permutation(n, blockStart);\n\n        auto index = blockStart;\n        while (1) {\n            const auto flips = permutation.countFlips();\n\n            if (flips) {\n                checksum += (index % 2 == 0) ? flips : -flips;\n                if (flips > maxFlips)\n                    maxFlips = flips;\n            }\n\n            if (++index == blockStart + blockLength)\n                break;\n\n            permutation.advance();\n        }\n    }\n\n    cout << checksum << endl;\n    cout << \"Pfannkuchen(\" << n << \") = \" << maxFlips << endl;\n\n    return 0;\n}",
        2944.993,
        17918.16
    ],
    "4": [
        "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cstring>  // For efficient memory operations\n#include <omp.h>\n\nusing namespace std;\n\nstatic int64_t fact[32];\n\nvoid initializeFact(int n) {\n    fact[0] = 1;\n    for (auto i = 1; i <= n; ++i)\n        fact[i] = i * fact[i - 1];\n}\n\nclass Permutation {\npublic:\n    Permutation(int n, int64_t start);\n    void advance();\n    int64_t countFlips() const;\n\nprivate:\n    vector<int> count;\n    vector<int8_t> current;\n    mutable vector<int8_t> temp; // Use class member to avoid stack re-allocation\n};\n\nPermutation::Permutation(int n, int64_t start) : temp(n) { // Initialize temp here\n    count.resize(n);\n    current.resize(n);\n\n    for (auto i = n - 1; i >= 0; --i) {\n        auto d = start / fact[i];\n        start = start % fact[i];\n        count[i] = d;\n    }\n\n    for (auto i = 0; i < n; ++i)\n        current[i] = i;\n\n    for (auto i = n - 1; i >= 0; --i) {\n        auto d = count[i];\n        auto b = current.begin();\n        rotate(b, b + d, b + i + 1);\n    }\n}\n\nvoid Permutation::advance() {\n    for (auto i = 1;; ++i) {\n        int8_t first = current[0];\n        memmove(&current[0], &current[1], i * sizeof(int8_t)); // Use memmove instead of rotate\n        current[i] = first;\n\n        ++(count[i]);\n        if (count[i] <= i)\n            break;\n        count[i] = 0;\n    }\n}\n\ninline int64_t Permutation::countFlips() const {\n    const auto n = current.size();\n    auto flips = 0;\n    auto first = current[0];\n    if (first > 0) {\n        flips = 1;\n        std::copy(current.begin(), current.end(), temp.begin()); // Efficient copy using STL\n\n        while (temp[first] > 0) {\n            int8_t newFirst = temp[first];\n            temp[first] = first;\n\n            if (first > 2) {\n                std::reverse(temp.begin() + 1, temp.begin() + first); // Efficient reverse operation\n            }\n            first = newFirst;\n            ++flips;\n        }\n    }\n    return flips;\n}\n\nint main(int argc, char **argv) {\n    if (argc < 2) {\n        cerr << \"Usage: \" << argv[0] << \" <number>\" << endl;\n        return 1;\n    }\n    const auto n = atoi(argv[1]);\n\n    initializeFact(n);\n\n    auto blockCount = 24;\n    if (blockCount > fact[n])\n        blockCount = 1;\n    const int64_t blockLength = fact[n] / blockCount;\n\n    int64_t maxFlips = 0, checksum = 0;\n\n    #pragma omp parallel for reduction(max:maxFlips) reduction(+:checksum)\n    for (int64_t blockStart = 0; blockStart < fact[n]; blockStart += blockLength) {\n        Permutation permutation(n, blockStart);\n\n        auto index = blockStart;\n        while (1) {\n            const auto flips = permutation.countFlips();\n\n            if (flips) {\n                checksum += (index % 2 == 0) ? flips : -flips;\n                if (flips > maxFlips)\n                    maxFlips = flips;\n            }\n\n            if (++index == blockStart + blockLength)\n                break;\n\n            permutation.advance();\n        }\n    }\n\n    cout << checksum << endl;\n    cout << \"Pfannkuchen(\" << n << \") = \" << maxFlips << endl;\n\n    return 0;\n}",
        2923.554,
        17851.62
    ],
    "5": [
        "#include <iostream>\n#include <vector>\n#include <array>\n#include <algorithm>\n#include <cstring> // For efficient memory operations\n#include <omp.h>\n\nusing namespace std;\n\nstatic int64_t fact[32];\n\nvoid initializeFact(int n) {\n    fact[0] = 1;\n    for (auto i = 1; i <= n; ++i)\n        fact[i] = i * fact[i - 1];\n}\n\nclass Permutation {\npublic:\n    Permutation(int n, int64_t start);\n    void advance();\n    int64_t countFlips() const;\n\nprivate:\n    std::array<int, 16> count; // Using arrays for known sizes can be more efficient\n    std::array<int8_t, 16> current;\n    mutable std::array<int8_t, 16> temp; // Unify memory access patterns\n};\n\nPermutation::Permutation(int n, int64_t start) : temp() { // Removed explicit initialization since array auto-inits\n    count.fill(0);\n    for (auto i = n - 1; i >= 0; --i) {\n        auto d = start / fact[i];\n        start = start % fact[i];\n        count[i] = d;\n    }\n\n    for (auto i = 0; i < n; ++i)\n        current[i] = i;\n\n    for (auto i = n - 1; i >= 0; --i) {\n        auto d = count[i];\n        auto b = current.begin();\n        std::rotate(b, b + d, b + i + 1);\n    }\n}\n\nvoid Permutation::advance() {\n    for (auto i = 1;; ++i) {\n        int8_t first = current[0];\n        std::memmove(&current[0], &current[1], i * sizeof(int8_t)); // More efficient move\n        current[i] = first;\n\n        ++(count[i]);\n        if (count[i] <= i)\n            break;\n        count[i] = 0;\n    }\n}\n\ninline int64_t Permutation::countFlips() const {\n    const auto n = current.size();\n    auto flips = 0;\n    auto first = current[0];\n    if (first > 0) {\n        flips = 1;\n        std::copy(current.begin(), current.end(), temp.begin()); // Standard copies\n\n        while (temp[first] > 0) {\n            int8_t newFirst = temp[first];\n            temp[first] = first;\n            if (first > 2) {\n                std::reverse(temp.begin() + 1, temp.begin() + first); // Efficient reverse\n            }\n            first = newFirst;\n            ++flips;\n        }\n    }\n    return flips;\n}\n\nint main(int argc, char **argv) {\n    if (argc < 2) {\n        cerr << \"Usage: \" << argv[0] << \" <number>\" << endl;\n        return 1;\n    }\n    const auto n = atoi(argv[1]);\n\n    initializeFact(n);\n\n    auto blockCount = 24;\n    if (blockCount > fact[n])\n        blockCount = 1;\n    const int64_t blockLength = fact[n] / blockCount;\n\n    int64_t maxFlips = 0, checksum = 0;\n\n    #pragma omp parallel for reduction(max:maxFlips) reduction(+:checksum)\n    for (int64_t blockStart = 0; blockStart < fact[n]; blockStart += blockLength) {\n        Permutation permutation(n, blockStart);\n\n        auto index = blockStart;\n        while (1) {\n            const auto flips = permutation.countFlips();\n            if (flips) {\n                checksum += (index % 2 == 0) ? flips : -flips;\n                if (flips > maxFlips)\n                    maxFlips = flips;\n            }\n\n            if (++index == blockStart + blockLength)\n                break;\n\n            permutation.advance();\n        }\n    }\n\n    cout << checksum << endl;\n    cout << \"Pfannkuchen(\" << n << \") = \" << maxFlips << endl;\n\n    return 0;\n}",
        1886.946,
        11345.62
    ]
}

Program executed for 8.918250 minutes
Program catched 0 compilation_errors and 0 output_errors