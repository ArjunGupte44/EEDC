{
    "0": [
        "#include <iostream>\n#include <stdlib.h>\n#include <stdio.h>\n#include <apr_pools.h>\n\n\nconst size_t    LINE_SIZE = 64;\n\nclass Apr\n{\npublic:\n    Apr() \n    {\n        apr_initialize();\n    }\n\n    ~Apr() \n    {\n        apr_terminate();\n    }\n};\n\nstruct Node \n{\n    Node *l, *r;\n    \n    int check() const \n    {\n        if (l)\n            return l->check() + 1 + r->check();\n        else return 1;\n    }\n};\n\nclass NodePool\n{\npublic:\n    NodePool() \n    {\n        apr_pool_create_unmanaged(&pool);\n    }\n\n    ~NodePool() \n    {\n        apr_pool_destroy(pool);\n    }\n\n    Node* alloc()\n    {\n        return (Node *)apr_palloc(pool, sizeof(Node));\n    }\n\n    void clear()\n    {\n        apr_pool_clear(pool);\n    }\n\nprivate:\n    apr_pool_t* pool;\n};\n\nNode *make(int d, NodePool &store)\n{\n    Node* root = store.alloc();\n\n    if(d>0){\n        root->l=make(d-1, store);\n        root->r=make(d-1, store);\n    }else{\n        root->l=root->r=0;\n    }\n\n    return root;\n}\n\nint main(int argc, char *argv[]) \n{\n    Apr apr;\n    int min_depth = 4;\n    int max_depth = std::max(min_depth+2,\n                             (argc == 2 ? atoi(argv[1]) : 10));\n    int stretch_depth = max_depth+1;\n\n    // Alloc then dealloc stretchdepth tree\n    {\n        NodePool store;\n        Node *c = make(stretch_depth, store);\n        std::cout << \"stretch tree of depth \" << stretch_depth << \"\\t \"\n                  << \"check: \" << c->check() << std::endl;\n    }\n\n    NodePool long_lived_store;\n    Node *long_lived_tree = make(max_depth, long_lived_store);\n\n    // buffer to store output of each thread\n    char *outputstr = (char*)malloc(LINE_SIZE * (max_depth +1) * sizeof(char));\n\n    #pragma omp parallel for \n    for (int d = min_depth; d <= max_depth; d += 2) \n    {\n        int iterations = 1 << (max_depth - d + min_depth);\n        int c = 0;\n\n        // Create a memory pool for this thread to use.\n        NodePool store;\n\n        for (int i = 1; i <= iterations; ++i) \n        {\n            Node *a = make(d, store);\n            c += a->check();\n            store.clear();\n        }\n\n        // each thread write to separate location\n        sprintf(outputstr + LINE_SIZE * d, \"%d\\t trees of depth %d\\t check: %d\\n\",\n           iterations, d, c);\n    }\n\n    // print all results\n    for (int d = min_depth; d <= max_depth; d += 2) \n        printf(\"%s\", outputstr + (d * LINE_SIZE) );\n    free(outputstr);\n\n    std::cout << \"long lived tree of depth \" << max_depth << \"\\t \"\n              << \"check: \" << (long_lived_tree->check()) << \"\\n\";\n\n    return 0;\n}",
        86.148,
        779.318
    ],
    "1": [
        "#include <iostream>\n#include <stdlib.h>\n#include <stdio.h>\n#include <apr_pools.h>\n\n\nconst size_t LINE_SIZE = 64;\n\nclass Apr\n{\npublic:\n    Apr() \n    {\n        apr_initialize();\n    }\n\n    ~Apr() \n    {\n        apr_terminate();\n    }\n};\n\nstruct Node \n{\n    Node *l, *r;\n    \n    int check() const \n    {\n        return l ? l->check() + 1 + r->check() : 1;\n    }\n};\n\nclass NodePool\n{\npublic:\n    NodePool() \n    {\n        apr_pool_create_unmanaged(&pool);\n    }\n\n    ~NodePool() \n    {\n        apr_pool_destroy(pool);\n    }\n\n    Node* alloc()\n    {\n        return (Node *)apr_palloc(pool, sizeof(Node));\n    }\n\n    void clear()\n    {\n        apr_pool_clear(pool);\n    }\n\nprivate:\n    apr_pool_t* pool;\n};\n\nNode *make(int d, NodePool &store)\n{\n    Node* root = store.alloc();\n\n    if (d > 0) {\n        root->l = make(d-1, store);\n        root->r = make(d-1, store);\n    } else {\n        root->l = root->r = nullptr;\n    }\n\n    return root;\n}\n\nint main(int argc, char *argv[]) \n{\n    Apr apr;\n    int min_depth = 4;\n    int max_depth = std::max(min_depth + 2, (argc == 2 ? atoi(argv[1]) : 10));\n    int stretch_depth = max_depth + 1;\n\n    // Alloc and then dealloc stretch depth tree\n    {\n        NodePool store;\n        Node* c = make(stretch_depth, store);\n        std::cout << \"stretch tree of depth \" << stretch_depth << \"\\t \"\n                  << \"check: \" << c->check() << std::endl;\n    }\n\n    NodePool long_lived_store;\n    Node* long_lived_tree = make(max_depth, long_lived_store);\n\n    char *outputstr = (char*)malloc(LINE_SIZE * (max_depth / 2 + 1) * sizeof(char));\n    \n    #pragma omp parallel for \n    for (int d = min_depth; d <= max_depth; d += 2) \n    {\n        int iterations = 1 << (max_depth - d + min_depth);\n        int c = 0;\n\n        NodePool store;\n\n        for (int i = 1; i <= iterations; ++i) \n        {\n            Node* a = make(d, store);\n            c += a->check();\n            store.clear();\n        }\n\n        snprintf(outputstr + LINE_SIZE / 2 * d, LINE_SIZE, \"%d\\t trees of depth %d\\t check: %d\\n\", iterations, d, c);\n    }\n\n    for (int d = min_depth; d <= max_depth; d += 2) \n        printf(\"%s\", outputstr + (d * LINE_SIZE / 2));\n    free(outputstr);\n\n    std::cout << \"long lived tree of depth \" << max_depth << \"\\t \"\n              << \"check: \" << (long_lived_tree->check()) << \"\\n\";\n\n    return 0;\n}",
        84.576,
        753.757
    ],
    "2": [
        "#include <iostream>\n#include <vector>\n#include <string>\n#include <sstream>\n#include <omp.h>\n#include <unordered_map>\n#include <atomic>\n\nstruct Node {\n    Node* l = nullptr;\n    Node* r = nullptr;\n    int check() const {\n        return l ? l->check() + 1 + r->check() : 1;\n    }\n};\n\nclass NodePool {\npublic:\n    std::vector<Node> pool;\n    std::atomic<size_t> index;\n\n    NodePool(size_t initial_size = 1024) : pool(initial_size), index(0) {}\n\n    Node* alloc() {\n        size_t current_index = index.fetch_add(1);\n        if (current_index >= pool.size()) {\n            #pragma omp critical\n            {\n                if (pool.size() <= current_index) {\n                    pool.resize(pool.size() * 2);\n                }\n            }\n        }\n        return &pool[current_index];\n    }\n\n    void clear() {\n        index.store(0);\n    }\n};\n\nNode* make(int d, NodePool& store) {\n    Node* root = store.alloc();\n    if (d > 0) {\n        root->l = make(d - 1, store);\n        root->r = make(d - 1, store);\n    } else {\n        root->l = root->r = nullptr;\n    }\n    return root;\n}\n\nint main(int argc, char* argv[]) {\n    int min_depth = 4;\n    int max_depth = argc > 1 ? std::max(min_depth + 2, atoi(argv[1])) : 10;\n    int stretch_depth = max_depth + 1;\n\n    {\n        NodePool store(1 << (stretch_depth + 1));\n        Node* c = make(stretch_depth, store);\n        std::cout << \"stretch tree of depth \" << stretch_depth << \"\\t check: \" << c->check() << std::endl;\n    }\n\n    NodePool long_lived_store(1 << (max_depth + 1));\n    Node* long_lived_tree = make(max_depth, long_lived_store);\n\n    std::vector<std::string> results(max_depth/2);\n    std::unordered_map<int, int> check_memo;\n\n    #pragma omp parallel for schedule(dynamic)\n    for (int d = min_depth; d <= max_depth; d += 2) {\n        int iterations = 1 << (max_depth - d + min_depth);\n        int c = 0;\n        NodePool store(1 << (d + 1));\n\n        for (int i = 1; i <= iterations; ++i) {\n            Node* a = make(d, store);\n            c += a->check();\n            store.clear();\n        }\n\n        #pragma omp critical\n        {\n            std::ostringstream thread_output;\n            thread_output << iterations << \"\\t trees of depth \" << d << \"\\t check: \" << c << \"\\n\";\n            results[d/2 - min_depth/2] = thread_output.str();\n        }\n    }\n\n    for (const auto& result : results) {\n        std::cout << result;\n    }\n\n    std::cout << \"long lived tree of depth \" << max_depth << \"\\t check: \" << long_lived_tree->check() << \"\\n\";\n\n    return 0;\n}",
        141.492,
        1316.282
    ],
    "3": [
        "#include <iostream>\n#include <vector>\n#include <string>\n#include <sstream>\n#include <omp.h>\n\nstruct Node {\n    Node* l = nullptr;\n    Node* r = nullptr;\n    int check() const {\n        return l ? l->check() + 1 + r->check() : 1;\n    }\n};\n\nclass NodePool {\npublic:\n    std::vector<Node> pool;\n    size_t index;\n\n    NodePool(size_t size) : pool(size), index(0) {}\n\n    Node* alloc() {\n        if (index < pool.size()) {\n            return &pool[index++];\n        }\n        return nullptr; // Could resize but currently avoids this to save energy.\n    }\n\n    void clear() {\n        index = 0;\n    }\n};\n\nNode* make(int d, NodePool& store) {\n    Node* root = store.alloc();\n    if (!root) return nullptr;\n    if (d > 0) {\n        root->l = make(d - 1, store);\n        root->r = make(d - 1, store);\n    }\n    return root;\n}\n\nint main(int argc, char* argv[]) {\n    int min_depth = 4;\n    int max_depth = argc > 1 ? std::max(min_depth + 2, atoi(argv[1])) : 10;\n    int stretch_depth = max_depth + 1;\n\n    {\n        NodePool store((1 << (stretch_depth + 1)) - 1);\n        Node* c = make(stretch_depth, store);\n\n        if (c) { // Check for nullptr to avoid dereferencing\n            std::cout << \"stretch tree of depth \" << stretch_depth << \"\\t check: \" << c->check() << std::endl;\n        }\n    }\n\n    NodePool long_lived_store((1 << (max_depth + 1)) - 1);\n    Node* long_lived_tree = make(max_depth, long_lived_store);\n\n    std::vector<std::string> results(max_depth / 2);\n\n    #pragma omp parallel for schedule(dynamic)\n    for (int d = min_depth; d <= max_depth; d += 2) {\n        int iterations = 1 << (max_depth - d + min_depth);\n        int c = 0;\n        NodePool store((1 << (d + 1)) - 1);\n\n        for (int i = 0; i < iterations; ++i) {\n            Node* a = make(d, store);\n            if (a) { // Check for nullptr\n                c += a->check();\n                store.clear();\n            }\n        }\n\n        std::ostringstream thread_output;\n        thread_output << iterations << \"\\t trees of depth \" << d << \"\\t check: \" << c << \"\\n\";\n        results[(d - min_depth) / 2] = thread_output.str();\n    }\n\n    for (const auto& result : results) {\n        std::cout << result;\n    }\n\n    if (long_lived_tree) { // Check for nullptr\n        std::cout << \"long lived tree of depth \" << max_depth << \"\\t check: \" << long_lived_tree->check() << \"\\n\";\n    }\n\n    return 0;\n}",
        95.689,
        862.519
    ],
    "4": [
        "#include <iostream>\n#include <omp.h>\n#include <vector>\n#include <sstream>\n\nstruct Node {\n    Node* l = nullptr;\n    Node* r = nullptr;\n    int check() const {\n        return l ? l->check() + 1 + r->check() : 1;\n    }\n};\n\nclass NodePool {\npublic:\n    std::vector<Node> pool;\n    size_t index;\n\n    NodePool(size_t size) : pool(size), index(0) {}\n\n    Node* alloc() {\n        return index < pool.size() ? &pool[index++] : nullptr;\n    }\n\n    void clear() {\n        index = 0;\n    }\n};\n\nNode* make(int d, NodePool& store) {\n    Node* root = store.alloc();\n    if (!root) return nullptr;\n    if (d > 0) {\n        root->l = make(d - 1, store);\n        root->r = make(d - 1, store);\n    }\n    return root;\n}\n\nint main(int argc, char* argv[]) {\n    int min_depth = 4;\n    int max_depth = argc > 1 ? std::max(min_depth + 2, atoi(argv[1])) : 10;\n    int stretch_depth = max_depth + 1;\n\n    {\n        NodePool store((1 << (stretch_depth + 1)) - 1);\n        Node* c = make(stretch_depth, store);\n\n        if (c) {\n            std::cout << \"stretch tree of depth \" << stretch_depth << \"\\t check: \" << c->check() << std::endl;\n        }\n    }\n\n    NodePool long_lived_store((1 << (max_depth + 1)) - 1);\n    Node* long_lived_tree = make(max_depth, long_lived_store);\n\n    const int result_count = (max_depth - min_depth) / 2 + 1;\n    std::vector<std::string> results(result_count);\n\n    for (int d = min_depth; d <= max_depth; d += 2) {\n        int iterations = 1 << (max_depth - d + min_depth);\n        int c = 0;\n\n        #pragma omp parallel \n        {\n            std::vector<NodePool> stores(omp_get_num_threads(), NodePool((1 << (d + 1)) - 1));\n\n            #pragma omp for reduction(+:c) schedule(static)\n            for (int i = 0; i < iterations; ++i) {\n                Node* a = make(d, stores[omp_get_thread_num()]);\n                if (a) {\n                    c += a->check();\n                    stores[omp_get_thread_num()].clear();\n                }\n            }\n        }\n\n        std::ostringstream thread_output;\n        thread_output << iterations << \"\\t trees of depth \" << d << \"\\t check: \" << c << \"\\n\";\n        results[(d - min_depth) / 2] = thread_output.str();\n    }\n\n    for (const auto& result : results) {\n        std::cout << result;\n    }\n\n    if (long_lived_tree) {\n        std::cout << \"long lived tree of depth \" << max_depth << \"\\t check: \" << long_lived_tree->check() << \"\\n\";\n    }\n\n    return 0;\n}",
        806.768,
        10237.24
    ],
    "5": [
        "#include <iostream>  // Include necessary standard libraries\n#include <vector>\n#include <sstream>   // For std::ostringstream\n#include <algorithm> // For max\n#include <cstddef>   // For size_t\n#include <omp.h>     // Include OpenMP for parallelization\n\nstruct Node {\n    Node* l = nullptr;\n    Node* r = nullptr;\n    int check() const {\n        return l ? l->check() + 1 + r->check() : 1;  // Recursive check function\n    }\n};\n\nclass NodePool {\npublic:\n    std::vector<Node> pool;\n    size_t index;\n\n    NodePool(size_t size) : pool(size), index(0) {}\n\n    Node* alloc() {\n        return index < pool.size() ? &pool[index++] : nullptr;\n    }\n\n    void clear() {\n        index = 0;\n    }\n};\n\nNode* make(int d, NodePool& store) {\n    Node* root = store.alloc();\n    if (!root) return nullptr;\n    if (d > 0) {\n        root->l = make(d - 1, store);\n        root->r = make(d - 1, store);\n    }\n    return root;\n}\n\nint main(int argc, char* argv[]) {\n    int min_depth = 4;\n    int max_depth = argc > 1 ? std::max(min_depth + 2, atoi(argv[1])) : 10;\n    int stretch_depth = max_depth + 1;\n\n    {\n        NodePool store(1 << (stretch_depth + 1));\n        Node* c = make(stretch_depth, store);\n        if (c) {\n            std::cout << \"stretch tree of depth \" << stretch_depth << \"\\t check: \" << c->check() << std::endl;\n        }\n    }\n\n    NodePool long_lived_store(1 << (max_depth + 1));\n    Node* long_lived_tree = make(max_depth, long_lived_store);\n\n    std::vector<std::string> results((max_depth - min_depth) / 2 + 1);\n\n    #pragma omp parallel for schedule(static)\n    for (int d = min_depth; d <= max_depth; d += 2) {\n        int iterations = 1 << (max_depth - d + min_depth);\n        int c = 0;\n        NodePool store(1 << (d + 1));\n\n        for (int i = 0; i < iterations; ++i) {\n            Node* a = make(d, store);\n            if (a) {\n                c += a->check();\n                store.clear();\n            }\n        }\n\n        std::ostringstream thread_output;\n        thread_output << iterations << \"\\t trees of depth \" << d << \"\\t check: \" << c << \"\\n\";\n        results[(d - min_depth) / 2] = thread_output.str();\n    }\n\n    for (const auto& result : results) {\n        std::cout << result;\n    }\n\n    if (long_lived_tree) {\n        std::cout << \"long lived tree of depth \" << max_depth << \"\\t check: \" << long_lived_tree->check() << \"\\n\";\n    }\n\n    return 0;\n}",
        95.751,
        814.659
    ]
}