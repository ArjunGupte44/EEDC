{
    "0": [
        "// g++ 4.8.x bug, compile with: -Wl,--no-as-needed option \n\n#include <iostream>\n#include <iomanip>\n#include <cstdint>\n#include <cstdio>\n#include <string>\n#include <cstring>\n#include <algorithm>\n#include <map>\n#include <ext/pb_ds/assoc_container.hpp>\n#include <future>\n#include <unistd.h>\n\nunsigned char tonum[256],tochar[4];\nstatic void init()\n{\n   tonum['A'] = 0;\n   tonum['C'] = 1;\n   tonum['T'] = 2;\n   tonum['G'] = 3;\n   tochar[0] = 'A';\n   tochar[1] = 'C';\n   tochar[2] = 'T';\n   tochar[3] = 'G';\n}\n\nstruct T{\n   T(const std::string& s = std::string())\n   :data(0),size(s.size())\n   {\n      reset(s,0,s.size());\n   }\n   void reset(const std::string& s,unsigned beg,unsigned end)\n   {\n      size = end-beg;\n      data = 0;\n      for(unsigned i = beg; i != end; ++i)\n      {\n         data <<= 2;\n         data |= tonum[unsigned(s[i])];\n      }\n   }\n   bool operator<(const T& in)const\n   {\n      return data < in.data;\n   }\n   bool operator==(const T& in)const\n   {\n      return data == in.data;\n   }\n   operator std::string()const\n   {\n      std::string tmp;\n      uint64_t tmp1 = data;\n      for(unsigned i = 0;i!=size;++i)\n      {\n         tmp+=tochar[tmp1 & 3];\n         tmp1 >>= 2;\n      }\n      std::reverse(tmp.begin(),tmp.end());\n      return tmp;\n   }\n   struct hash{\n   uint64_t operator()(const T& t)const{ return t.data; }\n   };\n   uint64_t data;\n   unsigned char size;\n};\n\n__gnu_pbds::cc_hash_table<T,unsigned,T::hash>\ncalculate(const std::string& input,unsigned size, unsigned beg=0,unsigned incr=1)\n{\n   __gnu_pbds::cc_hash_table<T,unsigned,T::hash> frequencies;\n   T tmp;\n   for (unsigned i = beg, i_end = input.size() + 1 - size; i < i_end; i+=incr)\n   {\n     tmp.reset(input,i,i+size);\n      ++frequencies[tmp];\n   }\n   return frequencies;\n}\n\n__gnu_pbds::cc_hash_table<T,unsigned,T::hash>\ntcalculate(const std::string& input,unsigned size)\n{\n   unsigned N = sysconf (_SC_NPROCESSORS_ONLN);\n\n   std::future<__gnu_pbds::cc_hash_table<T,unsigned,T::hash>> ft[N];\n   for(unsigned i = 0; i<N;++i)\n      ft[i] = std::async(std::launch::async,calculate,std::ref(input),size,i,N);\n\n   auto frequencies = ft[0].get();\n\n   for(unsigned i = 1 ; i<N; ++i)\n      for(auto& j : ft[i].get())\n      {\n         frequencies[j.first]+=j.second;\n      }\n   return frequencies;\n}\n\nvoid write_frequencies(const std::string & input, unsigned size)\n{\n   unsigned sum = input.size() + 1 - size;\n   auto frequencies = tcalculate(input,size);\n   std::map<unsigned, std::string,std::greater<unsigned>> freq;\n   for(auto& i: frequencies)\n   {\n      freq.insert(std::make_pair(i.second,i.first));\n   }\n   for(auto& i : freq)\n      std::cout << i.second << ' ' << (sum ? double(100 * i.first) / sum : 0.0) << '\\n';\n   std::cout << '\\n';\n}\n\nvoid write_count(const std::string & input, const std::string& string)\n{\n   unsigned size = string.size();\n   auto frequencies = tcalculate(input,size);\n\n   std::cout << frequencies[string] << '\\t' << string << '\\n';\n}\n\nint main()\n{\n   init();\n   std::string input;\n   char buffer[256];\n   while (fgets(buffer,100,stdin) && memcmp(\">THREE\",buffer,6)!=0);\n   while (fgets(buffer,100,stdin) && buffer[0] != '>')\n   {\n      if (buffer[0] != ';')\n      {\n         input.append(buffer,strlen(buffer)-1);\n      }\n   }\n   std::transform(input.begin(),input.end(),input.begin(),::toupper);\n\n   std::cout << std::setprecision(3) << std::setiosflags(std::ios::fixed);\n   write_frequencies(input,1);\n   write_frequencies(input,2);\n   write_count(input, \"GGT\");\n   write_count(input, \"GGTA\");\n   write_count(input, \"GGTATT\");\n   write_count(input, \"GGTATTTTAATT\");\n   write_count(input, \"GGTATTTTAATTTATAGT\");\n}",
        475.911,
        3672.324
    ],
    "1": [
        "#include <iostream>\n#include <iomanip>\n#include <cstdint>\n#include <cstdio>\n#include <string>\n#include <cstring>\n#include <algorithm>\n#include <map>\n#include <ext/pb_ds/assoc_container.hpp>\n#include <future>\n#include <unistd.h>\n\nunsigned char tonum[256],tochar[4];\nstatic void init()\n{\n   tonum['A'] = 0;\n   tonum['C'] = 1;\n   tonum['T'] = 2;\n   tonum['G'] = 3;\n   tochar[0] = 'A';\n   tochar[1] = 'C';\n   tochar[2] = 'T';\n   tochar[3] = 'G';\n}\n\nstruct T{\n   T(const std::string& s = std::string())\n   :data(0),size(s.size())\n   {\n      reset(s,0,s.size());\n   }\n   void reset(const std::string& s,unsigned beg,unsigned end)\n   {\n      size = end-beg;\n      data = 0;\n      for(unsigned i = beg; i != end; ++i)\n      {\n         data <<= 2;\n         data |= tonum[unsigned(s[i])];\n      }\n   }\n   bool operator<(const T& in)const\n   {\n      return data < in.data;\n   }\n   bool operator==(const T& in)const\n   {\n      return data == in.data;\n   }\n   operator std::string()const\n   {\n      std::string tmp;\n      uint64_t tmp1 = data;\n      for(unsigned i = 0;i!=size;++i)\n      {\n         tmp+=tochar[tmp1 & 3];\n         tmp1 >>= 2;\n      }\n      std::reverse(tmp.begin(),tmp.end());\n      return tmp;\n   }\n   struct hash{\n   uint64_t operator()(const T& t)const{ return t.data; }\n   };\n   uint64_t data;\n   unsigned char size;\n};\n\n__gnu_pbds::cc_hash_table<T,unsigned,T::hash>\ncalculate(const std::string& input,unsigned size, unsigned beg=0,unsigned incr=1)\n{\n   __gnu_pbds::cc_hash_table<T,unsigned,T::hash> frequencies;\n   T tmp;\n   for (unsigned i = beg, i_end = input.size() + 1 - size; i < i_end; i+=incr)\n   {\n     tmp.reset(input,i,i+size);\n      ++frequencies[tmp];\n   }\n   return frequencies;\n}\n\n__gnu_pbds::cc_hash_table<T,unsigned,T::hash>\ntcalculate(const std::string& input,unsigned size)\n{\n   unsigned N = sysconf (_SC_NPROCESSORS_ONLN);\n\n   std::future<__gnu_pbds::cc_hash_table<T,unsigned,T::hash>> ft[N];\n   for(unsigned i = 0; i<N;++i)\n      ft[i] = std::async(std::launch::async,calculate,std::ref(input),size,i,N);\n\n   auto frequencies = ft[0].get();\n\n   for(unsigned i = 1 ; i<N; ++i)\n      for(auto& j : ft[i].get())\n      {\n         frequencies[j.first]+=j.second;\n      }\n   return frequencies;\n}\n\nvoid write_frequencies(const std::string & input, unsigned size)\n{\n   unsigned sum = input.size() + 1 - size;\n   auto frequencies = tcalculate(input,size);\n   std::map<unsigned, std::string,std::greater<unsigned>> freq;\n   for(auto& i: frequencies)\n   {\n      freq.insert(std::make_pair(i.second,i.first));\n   }\n   for(auto& i : freq)\n      std::cout << i.second << ' ' << (sum ? double(100 * i.first) / sum : 0.0) << '\\n';\n   std::cout << '\\n';\n}\n\nvoid write_count(const std::string & input, const std::string& string)\n{\n   unsigned size = string.size();\n   auto frequencies = tcalculate(input,size);\n\n   std::cout << frequencies[string] << '\\t' << string << '\\n';\n}\n\nint main()\n{\n   init();\n   std::string input;\n   char buffer[256];\n   while (fgets(buffer,100,stdin) && memcmp(\">THREE\",buffer,6)!=0);\n   while (fgets(buffer,100,stdin) && buffer[0] != '>')\n   {\n      if (buffer[0] != ';')\n      {\n         input.append(buffer,strlen(buffer)-1);\n      }\n   }\n   std::transform(input.begin(),input.end(),input.begin(),::toupper);\n\n   std::cout << std::setprecision(3) << std::setiosflags(std::ios::fixed);\n   write_frequencies(input,1);\n   write_frequencies(input,2);\n   write_count(input, \"GGT\");\n   write_count(input, \"GGTA\");\n   write_count(input, \"GGTATT\");\n   write_count(input, \"GGTATTTTAATT\");\n   write_count(input, \"GGTATTTTAATTTATAGT\");\n} ",
        478.076,
        3676.878
    ],
    "2": [
        "#include <iostream>\n#include <iomanip>\n#include <cstdint>\n#include <cstdio>\n#include <string>\n#include <cstring>\n#include <algorithm>\n#include <map>\n#include <ext/pb_ds/assoc_container.hpp>\n#include <thread>\n#include <vector>\n#include <future>\n#include <unistd.h>\n\nunsigned char tonum[256],tochar[4];\nstatic void init()\n{\n   tonum['A'] = 0;\n   tonum['C'] = 1;\n   tonum['T'] = 2;\n   tonum['G'] = 3;\n   tochar[0] = 'A';\n   tochar[1] = 'C';\n   tochar[2] = 'T';\n   tochar[3] = 'G';\n}\n\nstruct T{\n   T(const std::string& s = std::string())\n   :data(0),size(s.size())\n   {\n      reset(s,0,s.size());\n   }\n   void reset(const std::string& s,unsigned beg,unsigned end)\n   {\n      size = end-beg;\n      data = 0;\n      for(unsigned i = beg; i != end; ++i)\n      {\n         data <<= 2;\n         data |= tonum[unsigned(s[i])];\n      }\n   }\n   bool operator<(const T& in)const\n   {\n      return data < in.data;\n   }\n   bool operator==(const T& in)const\n   {\n      return data == in.data;\n   }\n   operator std::string()const\n   {\n      std::string tmp;\n      uint64_t tmp1 = data;\n      for(unsigned i = 0;i!=size;++i)\n      {\n         tmp+=tochar[tmp1 & 3];\n         tmp1 >>= 2;\n      }\n      std::reverse(tmp.begin(),tmp.end());\n      return tmp;\n   }\n   struct hash{\n   uint64_t operator()(const T& t)const{ return t.data; }\n   };\n   uint64_t data;\n   unsigned char size;\n};\n\n__gnu_pbds::cc_hash_table<T,unsigned,T::hash>\ncalculate(const std::string& input,unsigned size, unsigned beg=0,unsigned incr=1)\n{\n   __gnu_pbds::cc_hash_table<T,unsigned,T::hash> frequencies;\n   T tmp;\n   for (unsigned i = beg, i_end = input.size() + 1 - size; i < i_end; i+=incr)\n   {\n     tmp.reset(input,i,i+size);\n      ++frequencies[tmp];\n   }\n   return frequencies;\n}\n\n__gnu_pbds::cc_hash_table<T,unsigned,T::hash>\ntcalculate(const std::string& input,unsigned size)\n{\n   unsigned N = sysconf (_SC_NPROCESSORS_ONLN);\n\n   std::vector<std::thread> threads;\n   std::vector<__gnu_pbds::cc_hash_table<T,unsigned,T::hash>> results(N);\n\n   for(unsigned i = 0; i<N;++i)\n      threads.emplace_back([&, i]{results[i] = calculate(input, size, i, N);});\n\n   for(auto& thread : threads) {\n      if(thread.joinable()) thread.join();\n   }\n\n   auto frequencies = results[0];\n   for(unsigned i = 1 ; i<N; ++i)\n      for(auto& j : results[i]) {\n         frequencies[j.first]+=j.second;\n      }\n   return frequencies;\n}\n\nvoid write_frequencies(const std::string & input, unsigned size)\n{\n   unsigned sum = input.size() + 1 - size;\n   auto frequencies = tcalculate(input,size);\n   std::map<unsigned, std::string,std::greater<unsigned>> freq;\n   for(auto& i: frequencies)\n   {\n      freq.insert(std::make_pair(i.second,i.first));\n   }\n   for(auto& i : freq)\n      std::cout << i.second << ' ' << (sum ? double(100 * i.first) / sum : 0.0) << '\\n';\n   std::cout << '\\n';\n}\n\nvoid write_count(const std::string & input, const std::string& string)\n{\n   unsigned size = string.size();\n   auto frequencies = tcalculate(input,size);\n\n   std::cout << frequencies[string] << '\\t' << string << '\\n';\n}\n\nint main()\n{\n   init();\n   std::string input;\n   char buffer[256];\n   while (fgets(buffer,100,stdin) && memcmp(\">THREE\",buffer,6)!=0);\n   while (fgets(buffer,100,stdin) && buffer[0] != '>')\n   {\n      if (buffer[0] != ';')\n      {\n         input.append(buffer,strlen(buffer)-1);\n      }\n   }\n   std::transform(input.begin(),input.end(),input.begin(),::toupper);\n\n   std::cout << std::setprecision(3) << std::setiosflags(std::ios::fixed);\n   write_frequencies(input,1);\n   write_frequencies(input,2);\n   write_count(input, \"GGT\");\n   write_count(input, \"GGTA\");\n   write_count(input, \"GGTATT\");\n   write_count(input, \"GGTATTTTAATT\");\n   write_count(input, \"GGTATTTTAATTTATAGT\");\n}",
        489.349,
        3689.174
    ],
    "3": [
        "#include <iostream>\n#include <iomanip>\n#include <cstdint>\n#include <string>\n#include <cstring>\n#include <map>\n#include <vector>\n#include <future>\n#include <algorithm>\n#include <unordered_map>\n#include <cstdio>\n#include <thread>\n#include <mutex>\n\nusing namespace std;\n\nunsigned char tonum[256], tochar[4];\n\nstatic void init() {\n    tonum['A'] = 0;\n    tonum['C'] = 1;\n    tonum['T'] = 2;\n    tonum['G'] = 3;\n    tochar[0] = 'A';\n    tochar[1] = 'C';\n    tochar[2] = 'T';\n    tochar[3] = 'G';\n}\n\nstruct T {\n    T(const std::string &s = std::string()) : data(0), size(s.size()) {\n        reset(s, 0, s.size());\n    }\n    void reset(const std::string &s, unsigned beg, unsigned end) {\n        size = end - beg;\n        data = 0;\n        for (unsigned i = beg; i != end; ++i) {\n            data = (data << 2) | tonum[unsigned(s[i])];\n        }\n    }\n    bool operator<(const T &in) const {\n        return data < in.data;\n    }\n    bool operator==(const T &in) const {\n        return data == in.data;\n    }\n    operator std::string() const {\n        std::string tmp(size, ' ');\n        uint64_t tmp1 = data;\n        for (int i = size - 1; i >= 0; --i) {\n            tmp[i] = tochar[tmp1 & 3];\n            tmp1 >>= 2;\n        }\n        return tmp;\n    }\n    struct hash {\n        uint64_t operator()(const T &t) const { return t.data; }\n    };\n    uint64_t data;\n    unsigned char size;\n};\n\nusing hash_table = std::unordered_map<T, unsigned, T::hash>;\n\nhash_table calculate(const std::string &input, unsigned size, unsigned beg = 0, unsigned incr = 1) {\n    hash_table frequencies;\n    T tmp;\n    for (unsigned i = beg, i_end = input.size() + 1 - size; i < i_end; i += incr) {\n        tmp.reset(input, i, i + size);\n        ++frequencies[tmp];\n    }\n    return frequencies;\n}\n\nhash_table tcalculate(const std::string &input, unsigned size) {\n    unsigned N = std::max(std::thread::hardware_concurrency(), 1U);\n    std::vector<std::future<hash_table>> futures;\n    for (unsigned i = 0; i < N; ++i) {\n        futures.emplace_back(std::async(std::launch::async, calculate, std::ref(input), size, i, N));\n    }\n\n    hash_table frequencies;\n    if (!futures.empty()) {\n        frequencies = futures.front().get();\n        futures.erase(futures.begin());\n    }\n\n    for (auto &fut : futures) {\n        for (auto &entry : fut.get()) {\n            frequencies[entry.first] += entry.second;\n        }\n    }\n    return frequencies;\n}\n\nvoid write_frequencies(const std::string &input, unsigned size) {\n    unsigned sum = input.size() + 1 - size;\n    auto frequencies = tcalculate(input, size);\n    std::map<unsigned, std::string, std::greater<>> freq;\n    for (auto &i : frequencies) {\n        freq.insert({i.second, std::string(i.first)});\n    }\n    for (auto &i : freq)\n        std::cout << i.second << ' ' << (sum ? double(100 * i.first) / sum : 0.0) << '\\n';\n    std::cout << '\\n';\n}\n\nvoid write_count(const std::string &input, const std::string &str) {\n    unsigned size = str.size();\n    auto frequencies = tcalculate(input, size);\n    std::cout << frequencies[T(str)] << '\\t' << str << '\\n';\n}\n\nint main() {\n    init();\n    std::string input;\n    char buffer[256];\n    while (fgets(buffer, sizeof(buffer), stdin) && strncmp(buffer, \">THREE\", 6) != 0);\n    while (fgets(buffer, sizeof(buffer), stdin) && buffer[0] != '>') {\n        if (buffer[0] != ';') {\n            input.append(buffer, strcspn(buffer, \"\\n\"));\n        }\n    }\n    std::transform(input.begin(), input.end(), input.begin(), ::toupper);\n\n    std::cout << std::setprecision(3) << std::setiosflags(std::ios::fixed);\n    write_frequencies(input, 1);\n    write_frequencies(input, 2);\n    write_count(input, \"GGT\");\n    write_count(input, \"GGTA\");\n    write_count(input, \"GGTATT\");\n    write_count(input, \"GGTATTTTAATT\");\n    write_count(input, \"GGTATTTTAATTTATAGT\");\n}\n",
        736.593,
        5005.23
    ],
    "4": [
        "#include <iostream>\n#include <iomanip>\n#include <cstdint>\n#include <string>\n#include <cstring>\n#include <vector>\n#include <thread>\n#include <unordered_map>\n#include <algorithm>\n#include <mutex>\n\nusing namespace std;\n\nunsigned char tonum[256], tochar[4];\n\n// Initialize lookup tables\nstatic void init() {\n    tonum['A'] = 0;\n    tonum['C'] = 1;\n    tonum['T'] = 2;\n    tonum['G'] = 3;\n    \n    tochar[0] = 'A';\n    tochar[1] = 'C';\n    tochar[2] = 'T';\n    tochar[3] = 'G';\n}\n\n// Helper struct for hashed k-mer\nstruct T {\n    T(const std::string &s = std::string()) : data(0), size(s.size()) {\n        reset(s, 0, s.size());\n    }\n    void reset(const std::string &s, unsigned beg, unsigned end) {\n        size = end - beg;\n        data = 0;\n        for (unsigned i = beg; i != end; ++i) {\n            data = (data << 2) | tonum[unsigned(s[i])];\n        }\n    }\n    bool operator<(const T &in) const {\n        return data < in.data;\n    }\n    bool operator==(const T &in) const {\n        return data == in.data;\n    }\n    operator std::string() const {\n        std::string tmp(size, ' ');\n        uint64_t tmp1 = data;\n        for (int i = size - 1; i >= 0; --i) {\n            tmp[i] = tochar[tmp1 & 3];\n            tmp1 >>= 2;\n        }\n        return tmp;\n    }\n    struct hash {\n        uint64_t operator()(const T &t) const { return t.data; }\n    };\n    uint64_t data;\n    unsigned char size;\n};\n\n// Type alias for frequency table\nusing hash_table = std::unordered_map<T, unsigned, T::hash>;\n\n// Function to calculate frequency in a given range\nvoid calculate_range(const std::string &input, unsigned size, unsigned beg, unsigned incr, hash_table &frequencies) {\n    T tmp;\n    for (unsigned i = beg, i_end = input.size() + 1 - size; i < i_end; i += incr) {\n        tmp.reset(input, i, i + size);\n        ++frequencies[tmp];\n    }\n}\n\n// Threaded calculation of k-mer frequencies\nhash_table tcalculate(const std::string &input, unsigned size) {\n    unsigned N = std::max(std::thread::hardware_concurrency(), 1U);\n    std::vector<std::thread> threads;\n    std::vector<hash_table> partial_frequencies(N);\n\n    for (unsigned i = 0; i < N; ++i) {\n        threads.emplace_back(calculate_range, std::cref(input), size, i, N, std::ref(partial_frequencies[i]));\n    }\n    \n    for (auto &t : threads) {\n        t.join();\n    }\n    \n    hash_table frequencies;\n    for (auto& local_frequencies : partial_frequencies) {\n        for (auto& entry : local_frequencies) {\n            frequencies[entry.first] += entry.second;\n        }\n    }\n\n    return frequencies;\n}\n\n// Write frequencies for k-mers\nvoid write_frequencies(const std::string &input, unsigned size) {\n    unsigned sum = input.size() + 1 - size;\n    auto frequencies = tcalculate(input, size);\n    std::vector<std::pair<unsigned, std::string>> freq;\n    for (auto &i : frequencies) {\n        freq.emplace_back(i.second, std::string(i.first));\n    }\n    // Sort the vector by frequency and k-mer string lexicographically\n    std::sort(freq.begin(), freq.end(), [](const auto &a, const auto &b) {\n        return a.first > b.first || (a.first == b.first && a.second < b.second);\n    });\n    \n    for (auto &i : freq)\n        std::cout << i.second << ' ' << (sum ? double(100 * i.first) / sum : 0.0) << '\\n';\n    std::cout << '\\n';\n}\n\n// Write count for a specific string\nvoid write_count(const std::string &input, const std::string &str) {\n    unsigned size = str.size();\n    auto frequencies = tcalculate(input, size);\n    std::cout << frequencies[T(str)] << '\\t' << str << '\\n';\n}\n\n// Main function\nint main() {\n    init();\n    std::string input;\n    char buffer[256];\n    while (fgets(buffer, sizeof(buffer), stdin) && strncmp(buffer, \">THREE\", 6) != 0);\n    while (fgets(buffer, sizeof(buffer), stdin) && buffer[0] != '>') {\n        if (buffer[0] != ';') {\n            input.append(buffer, strcspn(buffer, \"\\n\"));\n        }\n    }\n    std::transform(input.begin(), input.end(), input.begin(), ::toupper);\n\n    std::cout << std::setprecision(3) << std::setiosflags(std::ios::fixed);\n    write_frequencies(input, 1);\n    write_frequencies(input, 2);\n    write_count(input, \"GGT\");\n    write_count(input, \"GGTA\");\n    write_count(input, \"GGTATT\");\n    write_count(input, \"GGTATTTTAATT\");\n    write_count(input, \"GGTATTTTAATTTATAGT\");\n}",
        789.15,
        5318.372
    ],
    "5": [
        "#include <iostream>\n#include <iomanip>\n#include <cstdint>\n#include <string>\n#include <cstring>\n#include <vector>\n#include <thread>\n#include <unordered_map>\n#include <algorithm>\n#include <mutex>\n\nusing namespace std;\n\nunsigned char tonum[256], tochar[4];\n\n// Initialize lookup tables\nstatic void init() {\n    tonum['A'] = 0;\n    tonum['C'] = 1;\n    tonum['T'] = 2;\n    tonum['G'] = 3;\n    \n    tochar[0] = 'A';\n    tochar[1] = 'C';\n    tochar[2] = 'T';\n    tochar[3] = 'G';\n}\n\n// Helper struct for hashed k-mer\nstruct T {\n    T(const std::string &s = std::string()) : data(0), size(s.size()) {\n        reset(s, 0, s.size());\n    }\n    void reset(const std::string &s, unsigned beg, unsigned end) {\n        size = end - beg;\n        data = 0;\n        for (unsigned i = beg; i != end; ++i) {\n            data = (data << 2) | tonum[unsigned(s[i])];\n        }\n    }\n    bool operator<(const T &in) const {\n        return data < in.data;\n    }\n    bool operator==(const T &in) const {\n        return data == in.data;\n    }\n    operator std::string() const {\n        std::string tmp(size, ' ');\n        uint64_t tmp1 = data;\n        for (int i = size - 1; i >= 0; --i) {\n            tmp[i] = tochar[tmp1 & 3];\n            tmp1 >>= 2;\n        }\n        return tmp;\n    }\n    struct hash {\n        uint64_t operator()(const T &t) const { return t.data; }\n    };\n    uint64_t data;\n    unsigned char size;\n};\n\n// Type alias for frequency table\nusing hash_table = std::unordered_map<T, unsigned, T::hash>;\n\n// Function to calculate frequency in a given range\nvoid calculate_range(const std::string &input, unsigned size, unsigned beg, unsigned incr, hash_table &frequencies) {\n    T tmp;\n    for (unsigned i = beg, i_end = input.size() + 1 - size; i < i_end; i += incr) {\n        tmp.reset(input, i, i + size);\n        ++frequencies[tmp];\n    }\n}\n\n// Threaded calculation of k-mer frequencies using thread pool\nhash_table tcalculate(const std::string &input, unsigned size) {\n    static unsigned N = std::max(std::thread::hardware_concurrency(), 1U);\n    std::vector<std::thread> threads;\n    std::vector<hash_table> partial_frequencies(N);\n\n    for (unsigned i = 0; i < N; ++i) {\n        threads.emplace_back(calculate_range, std::cref(input), size, i, N, std::ref(partial_frequencies[i]));\n    }\n    \n    for (auto &t : threads) {\n        t.join();\n    }\n    \n    hash_table frequencies;\n    for (auto& local_frequencies : partial_frequencies) {\n        for (auto& entry : local_frequencies) {\n            frequencies[entry.first] += entry.second;\n        }\n    }\n\n    return frequencies;\n}\n\n// Write frequencies for k-mers\nvoid write_frequencies(const std::string &input, unsigned size) {\n    unsigned sum = input.size() + 1 - size;\n    auto frequencies = tcalculate(input, size);\n    std::vector<std::pair<unsigned, std::string>> freq;\n    for (auto &i : frequencies) {\n        freq.emplace_back(i.second, std::string(i.first));\n    }\n    // Sort the vector by frequency and k-mer string lexicographically\n    std::sort(freq.begin(), freq.end(), [](const auto &a, const auto &b) {\n        return a.first > b.first || (a.first == b.first && a.second < b.second);\n    });\n    \n    for (auto &i : freq)\n        std::cout << i.second << ' ' << (sum ? double(100 * i.first) / sum : 0.0) << '\\n';\n    std::cout << '\\n';\n}\n\n// Write count for a specific string\nvoid write_count(const std::string &input, const std::string &str) {\n    unsigned size = str.size();\n    auto frequencies = tcalculate(input, size);\n    std::cout << frequencies[T(str)] << '\\t' << str << '\\n';\n}\n\n// Main function\nint main() {\n    init();\n    std::string input;\n    char buffer[256];\n    while (fgets(buffer, sizeof(buffer), stdin) && strncmp(buffer, \">THREE\", 6) != 0);\n    while (fgets(buffer, sizeof(buffer), stdin) && buffer[0] != '>') {\n        if (buffer[0] != ';') {\n            input.append(buffer, strcspn(buffer, \"\\n\"));\n        }\n    }\n    std::transform(input.begin(), input.end(), input.begin(), ::toupper);\n\n    std::cout << std::setprecision(3) << std::setiosflags(std::ios::fixed);\n    write_frequencies(input, 1);\n    write_frequencies(input, 2);\n    write_count(input, \"GGT\");\n    write_count(input, \"GGTA\");\n    write_count(input, \"GGTATT\");\n    write_count(input, \"GGTATTTTAATT\");\n    write_count(input, \"GGTATTTTAATTTATAGT\");\n}",
        737.254,
        5044.888
    ]
}

Program executed for 7.895594 minutes
Program catched 9 compilation_errors and 0 output_errors