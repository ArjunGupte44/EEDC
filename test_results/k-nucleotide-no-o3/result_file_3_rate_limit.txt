Four iterations then ratelimit.

{
    "0": [
        "// g++ 4.8.x bug, compile with: -Wl,--no-as-needed option \n\n#include <iostream>\n#include <iomanip>\n#include <cstdint>\n#include <cstdio>\n#include <string>\n#include <cstring>\n#include <algorithm>\n#include <map>\n#include <ext/pb_ds/assoc_container.hpp>\n#include <future>\n#include <unistd.h>\n\nunsigned char tonum[256],tochar[4];\nstatic void init()\n{\n   tonum['A'] = 0;\n   tonum['C'] = 1;\n   tonum['T'] = 2;\n   tonum['G'] = 3;\n   tochar[0] = 'A';\n   tochar[1] = 'C';\n   tochar[2] = 'T';\n   tochar[3] = 'G';\n}\n\nstruct T{\n   T(const std::string& s = std::string())\n   :data(0),size(s.size())\n   {\n      reset(s,0,s.size());\n   }\n   void reset(const std::string& s,unsigned beg,unsigned end)\n   {\n      size = end-beg;\n      data = 0;\n      for(unsigned i = beg; i != end; ++i)\n      {\n         data <<= 2;\n         data |= tonum[unsigned(s[i])];\n      }\n   }\n   bool operator<(const T& in)const\n   {\n      return data < in.data;\n   }\n   bool operator==(const T& in)const\n   {\n      return data == in.data;\n   }\n   operator std::string()const\n   {\n      std::string tmp;\n      uint64_t tmp1 = data;\n      for(unsigned i = 0;i!=size;++i)\n      {\n         tmp+=tochar[tmp1 & 3];\n         tmp1 >>= 2;\n      }\n      std::reverse(tmp.begin(),tmp.end());\n      return tmp;\n   }\n   struct hash{\n   uint64_t operator()(const T& t)const{ return t.data; }\n   };\n   uint64_t data;\n   unsigned char size;\n};\n\n__gnu_pbds::cc_hash_table<T,unsigned,T::hash>\ncalculate(const std::string& input,unsigned size, unsigned beg=0,unsigned incr=1)\n{\n   __gnu_pbds::cc_hash_table<T,unsigned,T::hash> frequencies;\n   T tmp;\n   for (unsigned i = beg, i_end = input.size() + 1 - size; i < i_end; i+=incr)\n   {\n     tmp.reset(input,i,i+size);\n      ++frequencies[tmp];\n   }\n   return frequencies;\n}\n\n__gnu_pbds::cc_hash_table<T,unsigned,T::hash>\ntcalculate(const std::string& input,unsigned size)\n{\n   unsigned N = sysconf (_SC_NPROCESSORS_ONLN);\n\n   std::future<__gnu_pbds::cc_hash_table<T,unsigned,T::hash>> ft[N];\n   for(unsigned i = 0; i<N;++i)\n      ft[i] = std::async(std::launch::async,calculate,std::ref(input),size,i,N);\n\n   auto frequencies = ft[0].get();\n\n   for(unsigned i = 1 ; i<N; ++i)\n      for(auto& j : ft[i].get())\n      {\n         frequencies[j.first]+=j.second;\n      }\n   return frequencies;\n}\n\nvoid write_frequencies(const std::string & input, unsigned size)\n{\n   unsigned sum = input.size() + 1 - size;\n   auto frequencies = tcalculate(input,size);\n   std::map<unsigned, std::string,std::greater<unsigned>> freq;\n   for(auto& i: frequencies)\n   {\n      freq.insert(std::make_pair(i.second,i.first));\n   }\n   for(auto& i : freq)\n      std::cout << i.second << ' ' << (sum ? double(100 * i.first) / sum : 0.0) << '\\n';\n   std::cout << '\\n';\n}\n\nvoid write_count(const std::string & input, const std::string& string)\n{\n   unsigned size = string.size();\n   auto frequencies = tcalculate(input,size);\n\n   std::cout << frequencies[string] << '\\t' << string << '\\n';\n}\n\nint main()\n{\n   init();\n   std::string input;\n   char buffer[256];\n   while (fgets(buffer,100,stdin) && memcmp(\">THREE\",buffer,6)!=0);\n   while (fgets(buffer,100,stdin) && buffer[0] != '>')\n   {\n      if (buffer[0] != ';')\n      {\n         input.append(buffer,strlen(buffer)-1);\n      }\n   }\n   std::transform(input.begin(),input.end(),input.begin(),::toupper);\n\n   std::cout << std::setprecision(3) << std::setiosflags(std::ios::fixed);\n   write_frequencies(input,1);\n   write_frequencies(input,2);\n   write_count(input, \"GGT\");\n   write_count(input, \"GGTA\");\n   write_count(input, \"GGTATT\");\n   write_count(input, \"GGTATTTTAATT\");\n   write_count(input, \"GGTATTTTAATTTATAGT\");\n}",
        475.488,
        3681.928
    ],
    "1": [
        "#include <iostream>\n#include <iomanip>\n#include <cstdint>\n#include <cstdio>\n#include <string>\n#include <cstring>\n#include <algorithm>\n#include <map>\n#include <ext/pb_ds/assoc_container.hpp>\n#include <future>\n#include <unistd.h>\n\nunsigned char tonum[256], tochar[4];\nstatic void init() {\n    tonum['A'] = 0;\n    tonum['C'] = 1;\n    tonum['T'] = 2;\n    tonum['G'] = 3;\n    tochar[0] = 'A';\n    tochar[1] = 'C';\n    tochar[2] = 'T';\n    tochar[3] = 'G';\n}\n\nstruct T {\n    T(const std::string& s = std::string()) : data(0), size(s.size()) {\n        reset(s, 0, s.size());\n    }\n\n    void reset(const std::string& s, unsigned beg, unsigned end) {\n        size = end-beg;\n        data = 0;\n        for (unsigned i = beg; i != end; ++i) {\n            data <<= 2;\n            data |= tonum[unsigned(s[i])];\n        }\n    }\n\n    bool operator<(const T& in) const {\n        return data < in.data;\n    }\n\n    bool operator==(const T& in) const {\n        return data == in.data;\n    }\n\n    operator std::string() const {\n        std::string tmp;\n        uint64_t tmp1 = data;\n        for (unsigned i = 0; i != size; ++i) {\n            tmp += tochar[tmp1 & 3];\n            tmp1 >>= 2;\n        }\n        std::reverse(tmp.begin(), tmp.end());\n        return tmp;\n    }\n\n    struct hash {\n        uint64_t operator()(const T& t) const { return t.data; }\n    };\n\n    uint64_t data;\n    unsigned char size;\n};\n\n__gnu_pbds::cc_hash_table<T, unsigned, T::hash>\ncalculate(const std::string& input, unsigned size, unsigned beg = 0, unsigned incr = 1) {\n    __gnu_pbds::cc_hash_table<T, unsigned, T::hash> frequencies;\n    T tmp;\n    unsigned long hash = 0;\n    unsigned long base = 1;\n\n    for (unsigned i = beg; i < beg + size; ++i) {\n        hash = (hash << 2) + tonum[unsigned(input[i])];\n        if (i > beg) base <<= 2;\n    }\n\n    tmp.reset(input, beg, beg + size);\n    frequencies[tmp]++;\n\n    for (unsigned i = beg + size; i < input.size(); i += incr) {\n        hash = ((hash - ((unsigned long)tonum[unsigned(input[i - size])] * base)) << 2) + tonum[unsigned(input[i])];\n        tmp.reset(input, i + 1 - size, i + 1);\n        frequencies[tmp]++;\n    }\n    return frequencies;\n}\n\n__gnu_pbds::cc_hash_table<T, unsigned, T::hash>\ntcalculate(const std::string& input, unsigned size) {\n    unsigned N = std::max(1u, (unsigned)sysconf(_SC_NPROCESSORS_ONLN));\n    std::vector<std::future<__gnu_pbds::cc_hash_table<T, unsigned, T::hash>>> futures;\n\n    for (unsigned i = 0; i < N; ++i)\n        futures.emplace_back(std::async(std::launch::async, calculate, std::cref(input), size, i, N));\n\n    auto frequencies = futures[0].get();\n    for (unsigned i = 1; i < N; ++i) {\n        for (auto& j : futures[i].get()) {\n            frequencies[j.first] += j.second;\n        }\n    }\n    return frequencies;\n}\n\nvoid write_frequencies(const std::string& input, unsigned size) {\n    unsigned sum = input.size() + 1 - size;\n    auto frequencies = tcalculate(input, size);\n    std::map<unsigned, std::string, std::greater<unsigned>> freq;\n    for (auto& i: frequencies) {\n        freq.insert(std::make_pair(i.second, i.first));\n    }\n    for (auto& i : freq)\n        std::cout << i.second << ' ' << (sum ? double(100 * i.first) / sum : 0.0) << '\\n';\n    std::cout << '\\n';\n}\n\nvoid write_count(const std::string& input, const std::string& string) {\n    unsigned size = string.size();\n    auto frequencies = tcalculate(input, size);\n\n    std::cout << frequencies[string] << '\\t' << string << '\\n';\n}\n\nint main() {\n    init();\n    std::string input;\n    char buffer[256];\n    while (fgets(buffer, 100, stdin) && memcmp(\">THREE\", buffer, 6) != 0);\n    while (fgets(buffer, 100, stdin) && buffer[0] != '>') {\n        if (buffer[0] != ';') {\n            input.append(buffer, strlen(buffer) - 1);\n        }\n    }\n    std::transform(input.begin(), input.end(), input.begin(), ::toupper);\n\n    std::cout << std::setprecision(3) << std::setiosflags(std::ios::fixed);\n    write_frequencies(input, 1);\n    write_frequencies(input, 2);\n    write_count(input, \"GGT\");\n    write_count(input, \"GGTA\");\n    write_count(input, \"GGTATT\");\n    write_count(input, \"GGTATTTTAATT\");\n    write_count(input, \"GGTATTTTAATTTATAGT\");\n}",
        487.717,
        3755.936
    ],
    "2": [
        "#include <iostream>\n#include <iomanip>\n#include <cstdint>\n#include <string>\n#include <unordered_map>\n#include <thread>\n#include <vector>\n#include <algorithm>\n#include <map>  // Include for std::map\n#include <cstring>  // Include for memcmp and strlen\n\nunsigned char tonum[256], tochar[4];\n\nstatic void init() {\n    tonum['A'] = 0;\n    tonum['C'] = 1;\n    tonum['T'] = 2;\n    tonum['G'] = 3;\n    tochar[0] = 'A';\n    tochar[1] = 'C';\n    tochar[2] = 'T';\n    tochar[3] = 'G';\n}\n\nclass T {\npublic:\n    T(const std::string& s = std::string()) : data(0), size(s.size()) {\n        reset(s, 0, s.size());\n    }\n    void reset(const std::string& s, unsigned beg, unsigned end) {\n        size = end-beg;\n        data = 0;\n        for (unsigned i = beg; i != end; ++i) {\n            data <<= 2;\n            data |= tonum[unsigned(s[i])];\n        }\n    }\n    bool operator==(const T& in) const {\n        return data == in.data;\n    }\n    std::string toString() const {\n        std::string tmp;\n        uint64_t tmpData = data;\n        for (unsigned i = 0; i != size; ++i) {\n            tmp += tochar[tmpData & 3];\n            tmpData >>= 2;\n        }\n        std::reverse(tmp.begin(), tmp.end());\n        return tmp;\n    }\n\n    struct hash {\n        uint64_t operator()(const T& t) const {\n            return t.data;\n        }\n    };\n\n    uint64_t data;\n    unsigned char size;\n};\n\nusing HashTable = std::unordered_map<T, unsigned, T::hash>;\n\nHashTable calculate(const std::string& input, unsigned size, unsigned beg, unsigned incr) {\n    HashTable frequencies;\n    T tmp;\n\n    unsigned long hash = 0;\n    unsigned long base = 1;\n\n    for (unsigned i = beg; i < beg + size; ++i) {\n        hash = (hash << 2) + tonum[unsigned(input[i])];\n        if (i > beg) base <<= 2;\n    }\n\n    tmp.reset(input, beg, beg + size);\n    frequencies[tmp]++;\n\n    for (unsigned i = beg + size; i < input.size(); i += incr) {\n        hash = ((hash - ((unsigned long)tonum[unsigned(input[i - size])] * base) << 2) + tonum[unsigned(input[i])]);\n        tmp.reset(input, i + 1 - size, i + 1);\n        frequencies[tmp]++;\n    }\n    return frequencies;\n}\n\nHashTable tcalculate(const std::string& input, unsigned size) {\n    unsigned N = std::thread::hardware_concurrency();\n    std::vector<std::thread> threads(N);\n    std::vector<HashTable> threadResults(N);\n\n    for (unsigned i = 0; i < N; ++i) {\n        threads[i] = std::thread([&, i] {\n            threadResults[i] = calculate(input, size, i, N);\n        });\n    }\n\n    for (auto &th : threads) {\n        th.join();\n    }\n\n    // Combine results\n    for (unsigned i = 1; i < N; ++i) {\n        for (const auto& entry : threadResults[i]) {\n            threadResults[0][entry.first] += entry.second;\n        }\n    }\n\n    return threadResults[0];\n}\n\nvoid write_frequencies(const std::string& input, unsigned size) {\n    unsigned sum = input.size() + 1 - size;\n    auto frequencies = tcalculate(input, size);\n    std::map<unsigned, std::string, std::greater<unsigned>> sortedFrequencies;\n\n    for (const auto& entry : frequencies) {\n        sortedFrequencies.insert(std::make_pair(entry.second, entry.first.toString()));\n    }\n\n    for (const auto& entry : sortedFrequencies) {\n        std::cout << entry.second << ' ' << (sum ? (100.0 * entry.first) / sum : 0.0) << '\\n';\n    }\n    std::cout << '\\n';\n}\n\nvoid write_count(const std::string& input, const std::string& str) {\n    unsigned size = str.size();\n    auto frequencies = tcalculate(input, size);\n    T tmp(str);\n    std::cout << frequencies[tmp] << '\\t' << str << '\\n';\n}\n\nint main() {\n    init();\n    std::string input;\n    char buffer[256];\n    while (fgets(buffer, 100, stdin) && memcmp(\">THREE\", buffer, 6) != 0);\n    while (fgets(buffer, 100, stdin) && buffer[0] != '>') {\n        if (buffer[0] != ';') {\n            input.append(buffer, strlen(buffer) - 1);\n        }\n    }\n    std::transform(input.begin(), input.end(), input.begin(), ::toupper);\n\n    std::cout << std::setprecision(3) << std::setiosflags(std::ios::fixed);\n    write_frequencies(input, 1);\n    write_frequencies(input, 2);\n    write_count(input, \"GGT\");\n    write_count(input, \"GGTA\");\n    write_count(input, \"GGTATT\");\n    write_count(input, \"GGTATTTTAATT\");\n    write_count(input, \"GGTATTTTAATTTATAGT\");\n}",
        782.512,
        5258.968
    ],
    "3": [
        "#include <iostream>\n#include <iomanip>\n#include <cstdint>\n#include <string>\n#include <unordered_map>\n#include <thread>\n#include <vector>\n#include <algorithm>\n#include <map>\n#include <cstring>\n\nunsigned char tonum[256], tochar[4];\n\nstatic void init() {\n    tonum['A'] = 0;\n    tonum['C'] = 1;\n    tonum['T'] = 2;\n    tonum['G'] = 3;\n    tochar[0] = 'A';\n    tochar[1] = 'C';\n    tochar[2] = 'T';\n    tochar[3] = 'G';\n}\n\nclass T {\npublic:\n    T(const std::string& s = std::string()) : data(0), size(s.size()) {\n        reset(s, 0, s.size());\n    }\n    void reset(const std::string& s, unsigned beg, unsigned end) {\n        size = end - beg;\n        data = 0;\n        for (unsigned i = beg; i != end; ++i) {\n            data <<= 2;\n            data |= tonum[unsigned(s[i])];\n        }\n    }\n    bool operator==(const T& in) const {\n        return data == in.data;\n    }\n    std::string toString() const {\n        std::string tmp;\n        uint64_t tmpData = data;\n        for (unsigned i = 0; i != size; ++i) {\n            tmp += tochar[tmpData & 3];\n            tmpData >>= 2;\n        }\n        std::reverse(tmp.begin(), tmp.end());\n        return tmp;\n    }\n\n    struct hash {\n        uint64_t operator()(const T& t) const {\n            return t.data;\n        }\n    };\n\n    uint64_t data;\n    unsigned char size;\n};\n\nusing HashTable = std::unordered_map<T, unsigned, T::hash>;\n\nHashTable calculate(const std::string& input, unsigned size, unsigned beg, unsigned incr) {\n    HashTable frequencies;\n    T tmp;\n\n    unsigned long hash = 0;\n    unsigned long base = 1;\n\n    // Precompute hash for the initial window\n    for (unsigned i = beg; i < beg + size; ++i) {\n        hash = (hash << 2) + tonum[unsigned(input[i])];\n        if (i > beg) base <<= 2;\n    }\n\n    tmp.reset(input, beg, beg + size);\n    frequencies[tmp]++;\n\n    // Efficiently update subsequent hashes\n    for (unsigned i = beg + size; i < input.size(); i += incr) {\n        hash = ((hash - ((unsigned long)tonum[unsigned(input[i - size])] * base)) << 2) + tonum[unsigned(input[i])];\n        tmp.reset(input, i + 1 - size, i + 1);\n        frequencies[tmp]++;\n    }\n    return frequencies;\n}\n\nHashTable tcalculate(const std::string& input, unsigned size) {\n    unsigned N = std::thread::hardware_concurrency();\n    std::vector<std::thread> threads(N);\n    std::vector<HashTable> threadResults(N);\n\n    for (unsigned i = 0; i < N; ++i) {\n        threads[i] = std::thread([&](unsigned i) {\n            threadResults[i] = calculate(input, size, i, N);\n        }, i);\n    }\n\n    for (auto& th : threads) {\n        th.join();\n    }\n\n    // Combine results\n    for (unsigned i = 1; i < N; ++i) {\n        for (const auto& entry : threadResults[i]) {\n            threadResults[0][entry.first] += entry.second;\n        }\n    }\n\n    return threadResults[0];\n}\n\nvoid write_frequencies(const std::string& input, unsigned size) {\n    unsigned sum = input.size() + 1 - size;\n    auto frequencies = tcalculate(input, size);\n    std::map<unsigned, std::string, std::greater<unsigned>> sortedFrequencies;\n\n    for (const auto& entry : frequencies) {\n        sortedFrequencies.insert(std::make_pair(entry.second, entry.first.toString()));\n    }\n\n    for (const auto& entry : sortedFrequencies) {\n        std::cout << entry.second << ' ' << (sum ? (100.0 * entry.first) / sum : 0.0) << '\\n';\n    }\n    std::cout << '\\n';\n}\n\nvoid write_count(const std::string& input, const std::string& str) {\n    unsigned size = str.size();\n    auto frequencies = tcalculate(input, size);\n    T tmp(str);\n    std::cout << frequencies[tmp] << '\\t' << str << '\\n';\n}\n\nint main() {\n    init();\n    std::string input;\n    char buffer[256];\n    while (fgets(buffer, 100, stdin) && memcmp(\">THREE\", buffer, 6) != 0);\n    while (fgets(buffer, 100, stdin) && buffer[0] != '>') {\n        if (buffer[0] != ';') {\n            input.append(buffer, strlen(buffer) - 1);\n        }\n    }\n    std::transform(input.begin(), input.end(), input.begin(), ::toupper);\n\n    std::cout << std::setprecision(3) << std::setiosflags(std::ios::fixed);\n    write_frequencies(input, 1);\n    write_frequencies(input, 2);\n    write_count(input, \"GGT\");\n    write_count(input, \"GGTA\");\n    write_count(input, \"GGTATT\");\n    write_count(input, \"GGTATTTTAATT\");\n    write_count(input, \"GGTATTTTAATTTATAGT\");\n}",
        829.763,
        5580.668
    ],
    "4": [
        "#include <iostream>\n#include <iomanip>\n#include <cstdint>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <map>\n#include <unordered_map>\n#include <cstring>\n\nusing namespace std;\n\n// Maps for encoding and decoding nucleotides\nunsigned char tonum[256], tochar[4];\n\nstatic void init() {\n    tonum['A'] = 0;\n    tonum['C'] = 1;\n    tonum['T'] = 2;\n    tonum['G'] = 3;\n    tochar[0] = 'A';\n    tochar[1] = 'C';\n    tochar[2] = 'T';\n    tochar[3] = 'G';\n}\n\nclass T {\npublic:\n    T(const std::string& s = std::string()) : data(0), size(s.size()) {\n        reset(s, 0, s.size());\n    }\n    void reset(const std::string& s, unsigned beg, unsigned end) {\n        size = end - beg;\n        data = 0;\n        for (unsigned i = beg; i != end; ++i) {\n            data <<= 2;\n            data |= tonum[unsigned(s[i])];\n        }\n    }\n    bool operator==(const T& in) const {\n        return data == in.data;\n    }\n    std::string toString() const {\n        std::string tmp(size, ' ');\n        uint64_t tmpData = data;\n        for (int i = size - 1; i >= 0; --i) {\n            tmp[i] = tochar[tmpData & 3];\n            tmpData >>= 2;\n        }\n        return tmp;\n    }\n\n    struct hash {\n        std::size_t operator()(const T& t) const {\n            return t.data;\n        }\n    };\n\n    uint64_t data;\n    unsigned char size;\n};\n\nusing HashTable = unordered_map<T, unsigned, T::hash>;\n\nHashTable calculate(const std::string& input, unsigned size) {\n    HashTable frequencies;\n    T tmp;\n\n    if (input.size() < size) return frequencies;\n\n    unsigned long hash = 0;\n    unsigned long base = 1;\n\n    // Precompute hash for the initial window\n    for (unsigned i = 0; i < size; ++i) {\n        hash = (hash << 2) + tonum[unsigned(input[i])];\n        if (i > 0) base <<= 2;\n    }\n\n    tmp.reset(input, 0, size);\n    frequencies[tmp]++;\n\n    // Efficiently update subsequent hashes\n    for (unsigned i = size; i < input.size(); ++i) {\n        hash = ((hash - ((unsigned long)tonum[unsigned(input[i-size])] * base)) << 2) + tonum[unsigned(input[i])];\n        tmp.reset(input, i + 1 - size, i + 1);\n        frequencies[tmp]++;\n    }\n    return frequencies;\n}\n\nvoid write_frequencies(const std::string& input, unsigned size) {\n    unsigned sum = input.size() + 1 - size;\n    auto frequencies = calculate(input, size);\n    std::map<unsigned, std::string, std::greater<unsigned>> sortedFrequencies;\n\n    for (const auto& entry : frequencies) {\n        sortedFrequencies.insert(std::make_pair(entry.second, entry.first.toString()));\n    }\n\n    for (const auto& entry : sortedFrequencies) {\n        std::cout << entry.second << ' ' << (sum ? (100.0 * entry.first) / sum : 0.0) << \"\\n\";\n    }\n    std::cout << '\\n';\n}\n\nvoid write_count(const std::string& input, const std::string& str) {\n    unsigned size = str.size();\n    auto frequencies = calculate(input, size);\n    T tmp(str);\n    std::cout << frequencies[tmp] << '\\t' << str << '\\n';\n}\n\nint main() {\n    init();\n    std::string input;\n    char buffer[256];\n\n    while (fgets(buffer, 100, stdin) && memcmp(\">THREE\", buffer, 6) != 0);\n    while (fgets(buffer, 100, stdin) && buffer[0] != '>') {\n        if (buffer[0] != ';') {\n            input.append(buffer, strcspn(buffer, \"\\n\")); // Proper newline removal\n        }\n    }\n    std::transform(input.begin(), input.end(), input.begin(), ::toupper);\n\n    std::cout << std::setprecision(3) << std::setiosflags(std::ios::fixed);\n    write_frequencies(input, 1);\n    write_frequencies(input, 2);\n    write_count(input, \"GGT\");\n    write_count(input, \"GGTA\");\n    write_count(input, \"GGTATT\");\n    write_count(input, \"GGTATTTTAATT\");\n    write_count(input, \"GGTATTTTAATTTATAGT\");\n}\n",
        3910.487,
        73618.92
    ]
}

Program executed for 0.000000 minutes