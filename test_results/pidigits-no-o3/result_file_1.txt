{
    "0": [
        "#include <gmpxx.h>\n#include <cstdlib>\n#include <iostream>\n\nclass LFT {\npublic:\n    mpz_class q;\n    mpz_class r;\n    mpz_class t;\n    unsigned k;\n\npublic:\n    LFT() : q(1), r(0), t(1), k(0){};\n\n    void next() {\n        ++k;\n        r = (2 * k + 1) * (2 * q + r);\n        t = (2 * k + 1) * t;\n        q = q * k;\n    }\n\n    unsigned extract(unsigned x) const {\n        static mpz_class tmp0, tmp1;\n        tmp0 = q * x + r;\n        tmp1 = tmp0 / t;\n        return tmp1.get_ui();\n    }\n\n    void produce(unsigned n) {\n        q = 10 * q;\n        r = 10 * (r - n * t);\n    }\n};\n\nint main(int, char** argv) {\n    std::ios_base::sync_with_stdio(false);\n\n    const std::size_t TOTAL_DIGITS = std::atol(argv[1]);\n\n    LFT lft;\n    std::size_t n_digits = 0;\n    while (n_digits < TOTAL_DIGITS) {\n        std::size_t i = 0;\n        while (i < 10 and n_digits < TOTAL_DIGITS) {\n            lft.next();\n            if (lft.q > lft.r) continue;\n\n            auto digit = lft.extract(3);\n            if (digit == lft.extract(4)) {\n                std::cout << digit;\n                lft.produce(digit);\n                ++i;\n                ++n_digits;\n            }\n        }\n\n        // Pad digits with extra spaces if TOTAL_DIGITS was not a\n        // multiple of 10.\n        for (; i < 10; ++i) std::cout << ' ';\n        std::cout << \"\\t:\" << n_digits << '\\n';\n    }\n}",
        26.754,
        527.891
    ],
    "1": [
        "#include <gmpxx.h>\n#include <cstdlib>\n#include <iostream>\n#include <vector>\n\nclass LFT {\npublic:\n    mpz_class q;\n    mpz_class r;\n    mpz_class t;\n    unsigned k;\n\npublic:\n    LFT() : q(1), r(0), t(1), k(0) {};\n\n    void next() {\n        ++k;\n        r = (2 * k + 1) * (2 * q + r);\n        t = (2 * k + 1) * t;\n        q = q * k;\n    }\n\n    unsigned extract(unsigned x) const {\n        static mpz_class tmp0, tmp1;\n        tmp0 = q * x + r;\n        tmp1 = tmp0 / t;\n        return tmp1.get_ui();\n    }\n\n    void produce(unsigned n) {\n        q = 10 * q;\n        r = 10 * (r - n * t);\n    }\n};\n\nint main(int, char** argv) {\n    std::ios_base::sync_with_stdio(false);\n    std::vector<char> buffer;\n\n    const std::size_t TOTAL_DIGITS = std::atol(argv[1]);\n\n    LFT lft;\n    std::size_t n_digits = 0;\n    while (n_digits < TOTAL_DIGITS) {\n        std::size_t i = 0;\n        while (i < 10 && n_digits < TOTAL_DIGITS) {\n            lft.next();\n            if (lft.q > lft.r) continue;\n\n            auto digit = lft.extract(3);\n            if (digit == lft.extract(4)) {\n                buffer.push_back('0' + digit); // buffer output\n                lft.produce(digit);\n                ++i;\n                ++n_digits;\n            }\n        }\n\n        // Pad digits with extra spaces if TOTAL_DIGITS was not a multiple of 10.\n        for (; i < 10; ++i) buffer.push_back(' ');\n        buffer.push_back('\\t');\n        buffer.push_back(':');\n\n        // Corrected buffer insertion\n        auto n_digits_str = std::to_string(n_digits);\n        buffer.insert(buffer.end(), n_digits_str.begin(), n_digits_str.end());\n        buffer.push_back('\\n');\n    }\n\n    // Output entire buffer contents at once\n    std::cout.write(buffer.data(), buffer.size());\n}\n",
        27.438,
        544.161
    ],
    "2": [
        "#include <gmpxx.h>\n#include <cstdlib>\n#include <iostream>\n#include <vector>\n\nclass LFT {\npublic:\n    mpz_class q;\n    mpz_class r;\n    mpz_class t;\n    unsigned k;\n\npublic:\n    LFT() : q(1), r(0), t(1), k(0) {};\n\n    void next() {\n        ++k;\n        mpz_class temp = (2 * k + 1);\n        r = temp * (2 * q + r);\n        t = temp * t;\n        q = q * k;\n    }\n\n    unsigned extract(unsigned x) const {\n        mpz_class tmp0 = q * x + r;\n        mpz_class tmp1 = tmp0 / t;\n        return tmp1.get_ui();\n    }\n\n    void produce(unsigned n) {\n        q = 10 * q;\n        r = 10 * (r - n * t);\n    }\n};\n\nint main(int, char** argv) {\n    const std::size_t TOTAL_DIGITS = std::atol(argv[1]);\n    std::ios_base::sync_with_stdio(false);\n    std::vector<char> buffer;\n    buffer.reserve(TOTAL_DIGITS * 5); // Reserve ample space\n\n    LFT lft;\n    std::size_t n_digits = 0;\n    while (n_digits < TOTAL_DIGITS) {\n        std::size_t i = 0;\n        while (i < 10 && n_digits < TOTAL_DIGITS) {\n            lft.next();\n            if (lft.q > lft.r) continue;\n\n            auto digit = lft.extract(3);\n            if (digit == lft.extract(4)) {\n                buffer.push_back('0' + digit);\n                lft.produce(digit);\n                ++i;\n                ++n_digits;\n            }\n        }\n\n        for (; i < 10; ++i) buffer.push_back(' ');\n        buffer.push_back('\\t');\n        buffer.push_back(':');\n\n        auto n_digits_str = std::to_string(n_digits);\n        buffer.insert(buffer.end(), n_digits_str.begin(), n_digits_str.end());\n        buffer.push_back('\\n');\n    }\n\n    std::cout.write(buffer.data(), buffer.size());\n}",
        27.08,
        525.233
    ],
    "3": [
        "#include <gmpxx.h>\n#include <cstdlib>\n#include <iostream>\n#include <vector>\n\nclass LFT {\npublic:\n    mpz_class q;\n    mpz_class r;\n    mpz_class t;\n    unsigned k;\n\npublic:\n    LFT() : q(1), r(0), t(1), k(0) {};\n\n    void next() {\n        ++k;\n        mpz_class temp = (2 * k + 1);\n        r = temp * (2 * q + r);\n        t = temp * t;\n        q = q * k;\n    }\n\n    unsigned extract(unsigned x) const {\n        mpz_class tmp0 = q * x + r;\n        mpz_class tmp1 = tmp0 / t;\n        return tmp1.get_ui();\n    }\n\n    void produce(unsigned n) {\n        q = 10 * q;\n        r = 10 * (r - n * t);\n    }\n};\n\nint main(int, char** argv) {\n    const std::size_t TOTAL_DIGITS = std::atol(argv[1]);\n    std::ios_base::sync_with_stdio(false);\n    std::vector<char> buffer;\n    buffer.reserve(TOTAL_DIGITS * 5); // Reserve ample space\n\n    LFT lft;\n    std::size_t n_digits = 0;\n    while (n_digits < TOTAL_DIGITS) {\n        std::size_t i = 0;\n        while (i < 10 && n_digits < TOTAL_DIGITS) {\n            lft.next();\n            if (lft.q > lft.r) continue;\n\n            auto digit = lft.extract(3);\n            if (digit == lft.extract(4)) {\n                buffer.push_back('0' + digit);\n                lft.produce(digit);\n                ++i;\n                ++n_digits;\n            }\n        }\n\n        for (; i < 10; ++i) buffer.push_back(' ');\n        buffer.push_back('\\t');\n        buffer.push_back(':');\n\n        auto n_digits_str = std::to_string(n_digits);\n        buffer.insert(buffer.end(), n_digits_str.begin(), n_digits_str.end());\n        buffer.push_back('\\n');\n    }\n\n    std::cout.write(buffer.data(), buffer.size());\n}",
        27.521,
        541.59
    ],
    "4": [
        "#include <gmpxx.h>\n#include <cstdlib>\n#include <iostream>\n#include <vector>\n\nclass LFT {\npublic:\n    mpz_class q;\n    mpz_class r;\n    mpz_class t;\n    unsigned k;\n\n    LFT() : q(1), r(0), t(1), k(0) {}\n\n    void next() {\n        ++k;\n        r = (2 * k + 1) * (2 * q + r);\n        t = (2 * k + 1) * t;\n        q = q * k;\n    }\n\n    unsigned extract(unsigned x) const {\n        mpz_class tmp0 = q * x + r;\n        mpz_class tmp1 = tmp0 / t;\n        return tmp1.get_ui();\n    }\n\n    void produce(unsigned n) {\n        q = 10 * q;\n        r = 10 * (r - n * t);\n    }\n};\n\nint main(int argc, char** argv) {\n    if (argc < 2) {\n        std::cerr << \"Usage: \" << argv[0] << \" <number_of_digits>\" << std::endl;\n        return 1;\n    }\n    const std::size_t TOTAL_DIGITS = std::atol(argv[1]);\n    std::ios_base::sync_with_stdio(false);\n    std::vector<char> buffer(TOTAL_DIGITS + TOTAL_DIGITS / 10 * 20); // Adjusted for output format\n\n    LFT lft;\n    std::size_t n_digits = 0, count = 0, print_pos = 0;\n    while (n_digits < TOTAL_DIGITS) {\n        lft.next();\n        if (lft.q <= lft.r) {\n            auto digit = lft.extract(3);\n            if (digit == lft.extract(4)) {\n                buffer[print_pos++] = '0' + static_cast<char>(digit);\n                n_digits++;\n                lft.produce(digit);\n                ++count;\n\n                // Every 10 digits\n                if (count == 10 || n_digits == TOTAL_DIGITS) {\n                    buffer[print_pos++] = '\\t';\n                    buffer[print_pos++] = ':';\n                    std::string n_digits_str = std::to_string(n_digits);\n                    for (char c : n_digits_str) {\n                        buffer[print_pos++] = c;\n                    }\n                    buffer[print_pos++] = '\\n';\n                    count = 0;\n                }\n            }\n        }\n    }\n\n    buffer[print_pos] = '\\0';\n    std::cout.write(buffer.data(), print_pos);\n    return 0;\n}",
        27.107,
        521.333
    ],
    "5": [
        "#include <gmpxx.h>\n#include <cstdlib>\n#include <iostream>\n#include <vector>\n\nclass LFT {\npublic:\n    mpz_class q;\n    mpz_class r;\n    mpz_class t;\n    unsigned k;\n\n    LFT() : q(1), r(0), t(1), k(0) {}\n\n    void next() {\n        ++k;\n        r = (2 * k + 1) * (2 * q + r);\n        t = (2 * k + 1) * t;\n        q = q * k;\n    }\n\n    unsigned extract(unsigned x) const {\n        static mpz_class tmp0, tmp1; // Reuse these to reduce allocations\n        tmp0 = q * x + r;\n        tmp1 = tmp0 / t;\n        return tmp1.get_ui();\n    }\n\n    void produce(unsigned n) {\n        q = 10 * q;\n        r = 10 * (r - n * t);\n    }\n};\n\nint main(int argc, char** argv) {\n    if (argc < 2) {\n        std::cerr << \"Usage: \" << argv[0] << \" <number_of_digits>\" << std::endl;\n        return 1;\n    }\n    const std::size_t TOTAL_DIGITS = std::atol(argv[1]);\n    std::ios_base::sync_with_stdio(false);\n    \n    std::vector<char> buffer(TOTAL_DIGITS + TOTAL_DIGITS / 10 * 20); // Adjusted for output format sizing\n\n    LFT lft;\n    std::size_t n_digits = 0, count = 0, print_pos = 0;\n    while (n_digits < TOTAL_DIGITS) {\n        lft.next();\n        if (lft.q <= lft.r) {\n            auto digit = lft.extract(3);\n            if (digit == lft.extract(4)) {\n                buffer[print_pos++] = '0' + static_cast<char>(digit);\n                n_digits++;\n                lft.produce(digit);\n                ++count;\n\n                // Controlled output every 10 digits\n                if (count == 10 || n_digits == TOTAL_DIGITS) {\n                    buffer[print_pos++] = '\\t';\n                    buffer[print_pos++] = ':';\n                    std::string n_digits_str = std::to_string(n_digits);\n                    for (char c : n_digits_str) {\n                        buffer[print_pos++] = c;\n                    }\n                    buffer[print_pos++] = '\\n';\n                    count = 0;\n                }\n            }\n        }\n    }\n\n    buffer[print_pos] = '\\0';\n    std::cout.write(buffer.data(), print_pos);\n    return 0;\n}",
        27.478,
        538.354
    ]
}

Program executed for 6.909258 minutes