{
    "0": [
        "#include <gmpxx.h>\n#include <cstdlib>\n#include <iostream>\n\nclass LFT {\npublic:\n    mpz_class q;\n    mpz_class r;\n    mpz_class t;\n    unsigned k;\n\npublic:\n    LFT() : q(1), r(0), t(1), k(0){};\n\n    void next() {\n        ++k;\n        r = (2 * k + 1) * (2 * q + r);\n        t = (2 * k + 1) * t;\n        q = q * k;\n    }\n\n    unsigned extract(unsigned x) const {\n        static mpz_class tmp0, tmp1;\n        tmp0 = q * x + r;\n        tmp1 = tmp0 / t;\n        return tmp1.get_ui();\n    }\n\n    void produce(unsigned n) {\n        q = 10 * q;\n        r = 10 * (r - n * t);\n    }\n};\n\nint main(int, char** argv) {\n    std::ios_base::sync_with_stdio(false);\n\n    const std::size_t TOTAL_DIGITS = std::atol(argv[1]);\n\n    LFT lft;\n    std::size_t n_digits = 0;\n    while (n_digits < TOTAL_DIGITS) {\n        std::size_t i = 0;\n        while (i < 10 and n_digits < TOTAL_DIGITS) {\n            lft.next();\n            if (lft.q > lft.r) continue;\n\n            auto digit = lft.extract(3);\n            if (digit == lft.extract(4)) {\n                std::cout << digit;\n                lft.produce(digit);\n                ++i;\n                ++n_digits;\n            }\n        }\n\n        // Pad digits with extra spaces if TOTAL_DIGITS was not a\n        // multiple of 10.\n        for (; i < 10; ++i) std::cout << ' ';\n        std::cout << \"\\t:\" << n_digits << '\\n';\n    }\n}",
        26.935,
        522.304
    ],
    "1": [
        "#include <iostream>\n#include <gmpxx.h>\n#include <cstdlib>\n\nclass LFT {\npublic:\n    mpz_class q, r, t;\n    unsigned k;\n\n    LFT() : q(1), r(0), t(1), k(0){}\n\n    void next() {\n        ++k;\n        r = (2 * k + 1) * (2 * q + r);\n        t *= (2 * k + 1);\n        q *= k;\n    }\n\n    unsigned extract(unsigned x) const {\n        static mpz_class tmp0, tmp1;\n        tmp0 = q * x + r;\n        tmp1 = tmp0 / t;\n        return tmp1.get_ui();\n    }\n\n    void produce(unsigned n) {\n        q *= 10;\n        r = 10 * (r - n * t);\n    }\n};\n\nint main(int argc, char** argv) {\n    if (argc <= 1) {\n        std::cerr << \"Usage: \" << argv[0] << \" <total_digits>\" << std::endl;\n        return 1;\n    }\n\n    std::ios_base::sync_with_stdio(false);\n    const std::size_t TOTAL_DIGITS = std::atol(argv[1]);\n\n    LFT lft;\n    std::size_t n_digits = 0;\n    while (n_digits < TOTAL_DIGITS) {\n        std::size_t i = 0;\n        while (i < 10 && n_digits < TOTAL_DIGITS) {\n            lft.next();\n            if (lft.q <= lft.r) {\n                auto digit = lft.extract(3);\n                if (digit == lft.extract(4)) {\n                    std::cout << digit;\n                    lft.produce(digit);\n                    ++i;\n                    ++n_digits;\n                }\n            }\n        }\n\n        for (; i < 10; ++i) std::cout << ' ';\n        std::cout << \"\\t:\" << n_digits << '\\n';\n    }\n    return 0;\n}",
        26.964,
        523.025
    ],
    "2": [
        "#include <iostream>\n#include <gmpxx.h>\n#include <cstdlib>\n\nclass LFT {\npublic:\n    mpz_class q, r, t;\n    unsigned k;\n\n    LFT() : q(1), r(0), t(1), k(0){}\n\n    void next() {\n        ++k;\n        r = (2 * k + 1) * (2 * q + r);\n        t *= (2 * k + 1);\n        q *= k;\n    }\n\n    unsigned extract(unsigned x) const {\n        static mpz_class tmp0, tmp1;\n        tmp0 = q * x + r;\n        if (t != 0) {\n            tmp1 = tmp0 / t;\n            return tmp1.get_ui();\n        }\n        return 0;\n    }\n\n    void produce(unsigned n) {\n        q *= 10;\n        r = 10 * (r - n * t);\n    }\n};\n\nint main(int argc, char** argv) {\n    if (argc <= 1) {\n        std::cerr << \"Usage: \" << argv[0] << \" <total_digits>\" << std::endl;\n        return 1;\n    }\n\n    std::ios_base::sync_with_stdio(false);\n    const std::size_t TOTAL_DIGITS = std::atol(argv[1]);\n    \n    LFT lft;\n    std::size_t n_digits = 0;\n    char buffer[11];  // buffer to batch output\n\n    while (n_digits < TOTAL_DIGITS) {\n        std::size_t i = 0;\n        while (i < 10 && n_digits < TOTAL_DIGITS) {\n            lft.next();\n            if (lft.q <= lft.r) {\n                auto digit = lft.extract(3);\n                if (digit == lft.extract(4)) {\n                    buffer[i] = '0' + digit;  // store characters into a buffer\n                    lft.produce(digit);\n                    ++i;\n                    ++n_digits;\n                }\n            }\n        }\n\n        buffer[i] = '\\0';  // null-terminate buffer\n        std::cout << buffer;\n        for (; i < 10; ++i) std::cout << ' ';  // pad with spaces if needed\n        std::cout << \"\\t:\" << n_digits << '\\n';\n    }\n    return 0;\n}",
        26.816,
        530.316
    ],
    "3": [
        "#include <iostream>\n#include <gmpxx.h>\n#include <cstdlib>\n\nclass LFT {\npublic:\n    mpz_class q, r, t;\n    unsigned k;\n\n    LFT() : q(1), r(0), t(1), k(0){}\n\n    void next() {\n        ++k;\n        r = (2 * k + 1) * (2 * q + r);\n        t *= (2 * k + 1);\n        q *= k;\n    }\n\n    unsigned extract(unsigned x) const {\n        static mpz_class tmp0, tmp1;\n        tmp0 = q * x + r;\n        if (t != 0) {\n            tmp1 = tmp0 / t;\n            return tmp1.get_ui();\n        }\n        return 0;\n    }\n\n    void produce(unsigned n) {\n        q *= 10;\n        r = 10 * (r - n * t);\n    }\n};\n\nint main(int argc, char** argv) {\n    if (argc <= 1) {\n        std::cerr << \"Usage: \" << argv[0] << \" <total_digits>\" << std::endl;\n        return 1;\n    }\n\n    std::ios_base::sync_with_stdio(false);\n    const std::size_t TOTAL_DIGITS = std::atol(argv[1]);\n    \n    LFT lft;\n    std::size_t n_digits = 0;\n    char buffer[11];  // buffer to batch output\n\n    // Declaring variables outside the loop to avoid repeated allocation\n    unsigned digit;\n    \n    while (n_digits < TOTAL_DIGITS) {\n        std::size_t i = 0;\n        while (i < 10 && n_digits < TOTAL_DIGITS) {\n            lft.next();\n            if (lft.q <= lft.r) {\n                // Memoization attempt or checking once if result fixed\n                digit = lft.extract(3);\n                if (digit == lft.extract(4)) {\n                    buffer[i] = '0' + digit;  // store characters into a buffer\n                    lft.produce(digit);\n                    ++i;\n                    ++n_digits;\n                }\n            }\n        }\n\n        buffer[i] = '\\0';  // null-terminate buffer\n        std::cout << buffer;\n        for (; i < 10; ++i) std::cout << ' ';  // pad with spaces if needed\n        std::cout << \"\\t:\" << n_digits << '\\n';\n    }\n    return 0;\n}",
        27.06,
        542.193
    ],
    "4": [
        "#include <iostream>\n#include <gmpxx.h>\n#include <cstdlib>\n\nclass LFT {\npublic:\n    mpz_class q, r, t;\n    unsigned k;\n\n    LFT() : q(1), r(0), t(1), k(0){}\n\n    void next() {\n        ++k;\n        r = (2 * k + 1) * (2 * q + r);\n        t *= (2 * k + 1);\n        q *= k;\n    }\n\n    unsigned extract(unsigned x) const {\n        if (t != 0) {\n            mpz_class result = (q * x + r) / t;\n            return result.get_ui();\n        }\n        return 0;\n    }\n\n    void produce(unsigned n) {\n        q *= 10;\n        r = 10 * (r - n * t);\n    }\n};\n\nint main(int argc, char** argv) {\n    if (argc <= 1) {\n        std::cerr << \"Usage: \" << argv[0] << \" <total_digits>\" << std::endl;\n        return 1;\n    }\n\n    std::ios_base::sync_with_stdio(false);\n    const std::size_t TOTAL_DIGITS = std::atol(argv[1]);\n    \n    LFT lft;\n    std::size_t n_digits = 0;\n    char buffer[11];  // buffer to batch output\n\n    // Declaring variables outside the loop to avoid repeated allocation\n    unsigned digit;\n    \n    while (n_digits < TOTAL_DIGITS) {\n        std::size_t i = 0;\n        while (i < 10 && n_digits < TOTAL_DIGITS) {\n            lft.next();\n            if (lft.q <= lft.r) {\n                // Attempt to avoid recalculations\n                digit = lft.extract(3);\n                if (lft.extract(4) == digit) {\n                    buffer[i] = '0' + digit;  // Batch store characters into a buffer\n                    lft.produce(digit);\n                    ++i;\n                    ++n_digits;\n                }\n            }\n        }\n\n        buffer[i] = '\\0';  // null-terminate buffer\n        std::cout << buffer;\n        for (; i < 10; ++i) std::cout << ' ';  // pad with spaces if needed\n        std::cout << \"\\t:\" << n_digits << '\\n';\n    }\n    return 0;\n}",
        29.785,
        583.259
    ],
    "5": [
        "#include <iostream>\n#include <gmpxx.h>\n#include <cstdlib>\n\nclass LFT {\npublic:\n    mpz_class q, r, t;\n    unsigned k;\n\n    LFT() : q(1), r(0), t(1), k(0) {}\n\n    void next() {\n        ++k;\n        r = (2 * k + 1) * (2 * q + r);\n        t *= (2 * k + 1);\n        q *= k;\n    }\n\n    unsigned extract(unsigned x) const {\n        if (t != 0) {\n            mpz_class result = (q * x + r) / t;\n            return result.get_ui();\n        }\n        return 0;\n    }\n\n    void produce(unsigned n) {\n        q *= 10;\n        r = 10 * (r - n * t);\n    }\n};\n\nint main(int argc, char** argv) {\n    if (argc <= 1) {\n        std::cerr << \"Usage: \" << argv[0] << \" <total_digits>\" << std::endl;\n        return 1;\n    }\n\n    std::ios_base::sync_with_stdio(false);\n    const std::size_t TOTAL_DIGITS = std::atol(argv[1]);\n    \n    LFT lft;\n    std::size_t n_digits = 0;\n    char buffer[11];\n\n    while (n_digits < TOTAL_DIGITS) {\n        std::size_t i = 0;\n        while (i < 10 && n_digits < TOTAL_DIGITS) {\n            lft.next();\n            if (lft.q <= lft.r) {\n                unsigned digit = lft.extract(3);\n                if (lft.extract(4) == digit) {\n                    buffer[i++] = '0' + digit; \n                    lft.produce(digit);\n                    ++n_digits;\n                }\n            }\n        }\n\n        buffer[i] = '\\0';\n        std::cout << buffer;\n        for (; i < 10; ++i) std::cout << ' '; \n        std::cout << \"\\t:\" << n_digits << '\\n';\n    }\n    return 0;\n}",
        29.775,
        573.42
    ]
}

Program executed for 2.842720 minutes