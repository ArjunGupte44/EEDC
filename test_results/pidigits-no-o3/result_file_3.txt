{
    "0": [
        "#include <gmpxx.h>\n#include <cstdlib>\n#include <iostream>\n\nclass LFT {\npublic:\n    mpz_class q;\n    mpz_class r;\n    mpz_class t;\n    unsigned k;\n\npublic:\n    LFT() : q(1), r(0), t(1), k(0){};\n\n    void next() {\n        ++k;\n        r = (2 * k + 1) * (2 * q + r);\n        t = (2 * k + 1) * t;\n        q = q * k;\n    }\n\n    unsigned extract(unsigned x) const {\n        static mpz_class tmp0, tmp1;\n        tmp0 = q * x + r;\n        tmp1 = tmp0 / t;\n        return tmp1.get_ui();\n    }\n\n    void produce(unsigned n) {\n        q = 10 * q;\n        r = 10 * (r - n * t);\n    }\n};\n\nint main(int, char** argv) {\n    std::ios_base::sync_with_stdio(false);\n\n    const std::size_t TOTAL_DIGITS = std::atol(argv[1]);\n\n    LFT lft;\n    std::size_t n_digits = 0;\n    while (n_digits < TOTAL_DIGITS) {\n        std::size_t i = 0;\n        while (i < 10 and n_digits < TOTAL_DIGITS) {\n            lft.next();\n            if (lft.q > lft.r) continue;\n\n            auto digit = lft.extract(3);\n            if (digit == lft.extract(4)) {\n                std::cout << digit;\n                lft.produce(digit);\n                ++i;\n                ++n_digits;\n            }\n        }\n\n        // Pad digits with extra spaces if TOTAL_DIGITS was not a\n        // multiple of 10.\n        for (; i < 10; ++i) std::cout << ' ';\n        std::cout << \"\\t:\" << n_digits << '\\n';\n    }\n}",
        27.113,
        532.217
    ],
    "1": [
        "#include <gmpxx.h>\n#include <cstdlib>\n#include <iostream>\n\nclass LFT {\npublic:\n    mpz_class q;\n    mpz_class r;\n    mpz_class t;\n    unsigned k;\n\npublic:\n    LFT() : q(1), r(0), t(1), k(0){};\n\n    void next() {\n        ++k;\n        r = (2 * k + 1) * (2 * q + r);\n        t *= (2 * k + 1);\n        q *= k;\n    }\n\n    unsigned extract(unsigned x) const {\n        static mpz_class tmp0, tmp1;\n        tmp0 = q * x + r;\n        tmp1 = tmp0 / t;\n        return tmp1.get_ui();\n    }\n\n    void produce(unsigned n) {\n        q *= 10;\n        r -= n * t;\n        r *= 10;\n    }\n};\n\nint main(int, char** argv) {\n    std::ios_base::sync_with_stdio(false);\n\n    const std::size_t TOTAL_DIGITS = std::atol(argv[1]);\n\n    LFT lft;\n    std::size_t n_digits = 0;\n    while (n_digits < TOTAL_DIGITS) {\n        std::size_t i = 0;\n        while (i < 10 && n_digits < TOTAL_DIGITS) {\n            lft.next();\n            if (lft.q > lft.r) continue;\n\n            auto digit = lft.extract(3);\n            if (digit == lft.extract(4)) {\n                std::cout << digit;\n                lft.produce(digit);\n                ++i;\n                ++n_digits;\n            }\n        }\n\n        for (; i < 10; ++i) std::cout << ' ';\n        std::cout << \"\\t:\" << n_digits << '\\n';\n    }\n}\n",
        27.213,
        527.775
    ],
    "2": [
        "#include <gmpxx.h>\n#include <cstdlib>\n#include <iostream>\n\nclass LFT {\npublic:\n    mpz_class q, r, t;\n    unsigned k;\n    LFT() : q(1), r(0), t(1), k(0){};\n    void next() {\n        ++k;\n        mpz_class sk = 2 * k + 1;\n        r = sk * (2 * q + r);\n        t *= sk;\n        q *= k;\n    }\n    unsigned extract(unsigned x) const {\n        static mpz_class tmp0, tmp1;\n        tmp0 = q * x + r;\n        tmp1 = tmp0 / t;\n        return tmp1.get_ui();\n    }\n    void produce(unsigned n) {\n        q *= 10;\n        r = (r - n * t) * 10;\n    }\n};\n\nint main(int, char** argv) {\n    std::ios_base::sync_with_stdio(false);\n    std::size_t TOTAL_DIGITS = std::atol(argv[1]);\n    LFT lft;\n    std::size_t n_digits = 0;\n    while (n_digits < TOTAL_DIGITS) {\n        std::size_t i = 0;\n        while (i < 10 && n_digits < TOTAL_DIGITS) {\n            lft.next();\n            if (lft.q > lft.r) continue;\n            unsigned digit = lft.extract(3);\n            if (digit == lft.extract(4)) {\n                std::cout << digit;\n                lft.produce(digit);\n                ++i;\n                ++n_digits;\n            }\n        }\n        for (; i < 10; ++i) std::cout << ' ';\n        std::cout << \"\\t:\" << n_digits << '\\n';\n    }\n}",
        26.955,
        527.421
    ],
    "3": [
        "#include <gmpxx.h>\n#include <cstdlib>\n#include <iostream>\n\nclass LFT {\npublic:\n    mpz_class q{1}, r{0}, t{1};\n    unsigned k{0};\n\n    void next() {\n        ++k;\n        mpz_class sk = 2 * k + 1;\n        r = sk * (2 * q + r);\n        t *= sk;\n        q *= k;\n    }\n\n    unsigned extract(unsigned x) const {\n        mpz_class tmp0 = q * x + r;\n        mpz_class tmp1 = tmp0 / t;\n        return tmp1.get_ui();\n    }\n\n    void produce(unsigned n) {\n        q *= 10;\n        r = (r - n * t) * 10;\n    }\n};\n\nint main(int, char** argv) {\n    std::ios_base::sync_with_stdio(false);\n    std::size_t TOTAL_DIGITS = std::atol(argv[1]);\n    LFT lft;\n    std::size_t n_digits = 0;\n    while (n_digits < TOTAL_DIGITS) {\n        std::size_t i = 0;\n        while (i < 10 && n_digits < TOTAL_DIGITS) {\n            lft.next();\n            if (lft.q > lft.r) continue;\n            unsigned digit = lft.extract(3);\n            if (digit == lft.extract(4)) {\n                std::cout << digit;\n                lft.produce(digit);\n                ++i;\n                ++n_digits;\n            }\n        }\n        for (; i < 10; ++i) std::cout << ' ';\n        std::cout << \"\\t:\" << n_digits << '\\n';\n    }\n}",
        27.205,
        558.842
    ],
    "4": [
        "#include <gmpxx.h>\n#include <cstdlib>\n#include <iostream>\n\nclass LFT {\npublic:\n    mpz_class q{1}, r{0}, t{1};\n    unsigned k{0};\n\n    void next() {\n        ++k;\n        mpz_class sk = 2 * k + 1;\n        r = sk * (2 * q + r);\n        t *= sk;\n        q *= k;\n    }\n\n    unsigned extract(unsigned x) const {\n        mpz_class temp = q * x + r;\n        temp /= t;\n        return temp.get_ui();\n    }\n\n    void produce(unsigned n) {\n        q *= 10;\n        r = (r - n * t) * 10;\n    }\n};\n\nint main(int, char** argv) {\n    std::ios_base::sync_with_stdio(false);\n    std::size_t TOTAL_DIGITS = std::atol(argv[1]);\n    LFT lft;\n    std::size_t n_digits = 0;\n    std::string buffer;\n    while (n_digits < TOTAL_DIGITS) {\n        std::size_t i = 0;\n        while (i < 10 && n_digits < TOTAL_DIGITS) {\n            lft.next();\n            if (lft.q > lft.r) continue;\n            unsigned digit = lft.extract(3);\n            if (digit == lft.extract(4)) {\n                buffer.push_back('0' + digit); // buffer output\n                lft.produce(digit);\n                ++i;\n                ++n_digits;\n            }\n        }\n        std::cout << buffer << std::string(10 - buffer.size(), ' '); // buffered I/O\n        buffer.clear();\n        std::cout << \"\\t:\" << n_digits << '\\n';\n    }\n}",
        29.642,
        595.255
    ],
    "5": [
        "#include <gmpxx.h>\n#include <cstdlib>\n#include <iostream>\n#include <sstream>  // For efficient buffered output\n\nclass LFT {\npublic:\n    mpz_class q{1}, r{0}, t{1};\n    unsigned k{0};\n\n    void next() {\n        ++k;\n        mpz_class sk = 2 * k + 1;\n        r = sk * (2 * q + r);\n        t *= sk;\n        q *= k;\n    }\n\n    unsigned extract(unsigned x) const {\n        mpz_class temp = q * x + r;\n        temp /= t;\n        return temp.get_ui();\n    }\n\n    void produce(unsigned n) {\n        q *= 10;\n        r = (r - n * t) * 10;\n    }\n};\n\nint main(int, char** argv) {\n    std::ios_base::sync_with_stdio(false);\n    std::size_t TOTAL_DIGITS = std::atol(argv[1]);\n    LFT lft;\n    std::size_t n_digits = 0;\n    std::ostringstream buffer;  // Buffered output stream\n\n    while (n_digits < TOTAL_DIGITS) {\n        std::size_t i = 0;\n        while (i < 10 && n_digits < TOTAL_DIGITS) {\n            lft.next();\n            if (lft.q > lft.r) continue;\n            unsigned digit = lft.extract(3);\n            if (digit == lft.extract(4)) {\n                buffer << digit;  // Use buffered stream\n                lft.produce(digit);\n                ++i;\n                ++n_digits;\n            }\n        }\n        // Append spaces for padding if needed\n        buffer << std::string(10 - i, ' ') << \"\\t:\" << n_digits << '\\n';\n        std::cout << buffer.str(); // Output buffered content\n        buffer.str(\"\"); // Clear the buffer\n    }\n}",
        29.991,
        581.17
    ]
}

Program executed for 3.112044 minutes