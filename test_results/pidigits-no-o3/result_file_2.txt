{
    "0": [
        "#include <gmpxx.h>\n#include <cstdlib>\n#include <iostream>\n\nclass LFT {\npublic:\n    mpz_class q;\n    mpz_class r;\n    mpz_class t;\n    unsigned k;\n\npublic:\n    LFT() : q(1), r(0), t(1), k(0){};\n\n    void next() {\n        ++k;\n        r = (2 * k + 1) * (2 * q + r);\n        t = (2 * k + 1) * t;\n        q = q * k;\n    }\n\n    unsigned extract(unsigned x) const {\n        static mpz_class tmp0, tmp1;\n        tmp0 = q * x + r;\n        tmp1 = tmp0 / t;\n        return tmp1.get_ui();\n    }\n\n    void produce(unsigned n) {\n        q = 10 * q;\n        r = 10 * (r - n * t);\n    }\n};\n\nint main(int, char** argv) {\n    std::ios_base::sync_with_stdio(false);\n\n    const std::size_t TOTAL_DIGITS = std::atol(argv[1]);\n\n    LFT lft;\n    std::size_t n_digits = 0;\n    while (n_digits < TOTAL_DIGITS) {\n        std::size_t i = 0;\n        while (i < 10 and n_digits < TOTAL_DIGITS) {\n            lft.next();\n            if (lft.q > lft.r) continue;\n\n            auto digit = lft.extract(3);\n            if (digit == lft.extract(4)) {\n                std::cout << digit;\n                lft.produce(digit);\n                ++i;\n                ++n_digits;\n            }\n        }\n\n        // Pad digits with extra spaces if TOTAL_DIGITS was not a\n        // multiple of 10.\n        for (; i < 10; ++i) std::cout << ' ';\n        std::cout << \"\\t:\" << n_digits << '\\n';\n    }\n}",
        27.349,
        518.046
    ],
    "1": [
        "#include <gmpxx.h>\n#include <cstdlib>\n#include <iostream>\n#include <vector>\n\nclass LFT {\npublic:\n    mpz_class q;\n    mpz_class r;\n    mpz_class t;\n    unsigned k;\n\npublic:\n    LFT() : q(1), r(0), t(1), k(0){};\n\n    void next() {\n        ++k;\n        r = (2 * k + 1) * (2 * q + r);\n        t = (2 * k + 1) * t;\n        q = q * k;\n    }\n\n    unsigned extract(unsigned x) const {\n        static mpz_class tmp0, tmp1;\n        tmp0 = q * x + r;\n        tmp1 = tmp0 / t;\n        return tmp1.get_ui();\n    }\n\n    void produce(unsigned n) {\n        q = 10 * q;\n        r = 10 * (r - n * t);\n    }\n};\n\nint main(int, char** argv) {\n    std::ios_base::sync_with_stdio(false);\n\n    const std::size_t TOTAL_DIGITS = std::atol(argv[1]);\n\n    LFT lft;\n    std::size_t n_digits = 0;\n    std::string buffer;  // Buffer to accumulate output\n\n    while (n_digits < TOTAL_DIGITS) {\n        std::size_t i = 0;\n        while (i < 10 and n_digits < TOTAL_DIGITS) {\n            lft.next();\n            if (lft.q > lft.r) continue;\n\n            auto digit = lft.extract(3);\n            if (digit == lft.extract(4)) {\n                buffer += std::to_string(digit); // Append digit to buffer\n                lft.produce(digit);\n                ++i;\n                ++n_digits;\n            }\n        }\n\n        // Pad digits with extra spaces if TOTAL_DIGITS was not a\n        // multiple of 10.\n        for (; i < 10; ++i) buffer += ' ';\n        buffer += \"\\t:\" + std::to_string(n_digits) + '\\n';\n    }\n\n    std::cout << buffer;  // Output all at once\n}",
        27.681,
        540.169
    ],
    "2": [
        "#include <gmpxx.h>\n#include <cstdlib>\n#include <iostream>\n#include <vector>\n\nclass LFT {\npublic:\n    mpz_class q;\n    mpz_class r;\n    mpz_class t;\n    unsigned k;\n\npublic:\n    LFT() : q(1), r(0), t(1), k(0){}\n\n    void next() {\n        ++k;\n        r = (2 * k + 1) * (2 * q + r);\n        t = (2 * k + 1) * t;\n        q = q * k;\n    }\n\n    unsigned extract(unsigned x) const {\n        static mpz_class tmp0, tmp1;\n        tmp0 = q * x + r;\n        tmp1 = tmp0 / t;\n        return tmp1.get_ui();\n    }\n\n    void produce(unsigned n) {\n        q = 10 * q;\n        r = 10 * (r - n * t);\n    }\n};\n\nint main(int, char** argv) {\n    std::ios_base::sync_with_stdio(false);\n\n    const std::size_t TOTAL_DIGITS = std::atol(argv[1]);\n\n    LFT lft;\n    std::size_t n_digits = 0;\n    std::string buffer;\n    buffer.reserve(TOTAL_DIGITS + (TOTAL_DIGITS / 10 + 1) * 3);\n\n    while (n_digits < TOTAL_DIGITS) {\n        std::size_t i = 0;\n        while (i < 10 and n_digits < TOTAL_DIGITS) {\n            lft.next();\n            if (lft.q > lft.r) continue;\n\n            auto digit = lft.extract(3);\n            if (digit == lft.extract(4)) {\n                buffer += std::to_string(digit);\n                lft.produce(digit);\n                ++i;\n                ++n_digits;\n            }\n        }\n\n        for (; i < 10; ++i) buffer += ' ';\n        buffer += \"\\t:\" + std::to_string(n_digits) + '\\n';\n    }\n\n    std::cout << buffer;\n}",
        27.322,
        519.503
    ],
    "3": [
        "#include <gmpxx.h>\n#include <cstdlib>\n#include <iostream>\n#include <sstream>\n#include <vector>\n\nclass LFT {\npublic:\n    mpz_class q;\n    mpz_class r;\n    mpz_class t;\n    unsigned k;\n\npublic:\n    LFT() : q(1), r(0), t(1), k(0){}\n\n    void next() {\n        ++k;\n        r = (2 * k + 1) * (2 * q + r);\n        t = (2 * k + 1) * t;\n        q = q * k;\n    }\n\n    unsigned extract(unsigned x) const {\n        mpz_class tmp0 = q * x + r;\n        mpz_class tmp1 = tmp0 / t;\n        return tmp1.get_ui();\n    }\n\n    void produce(unsigned n) {\n        q = 10 * q;\n        r = 10 * (r - n * t);\n    }\n};\n\nint main(int argc, char** argv) {\n    std::ios_base::sync_with_stdio(false);\n\n    const std::size_t TOTAL_DIGITS = argc > 1 ? std::atol(argv[1]) : 0;\n\n    LFT lft;\n    std::size_t n_digits = 0;\n    std::ostringstream buffer;\n\n    while (n_digits < TOTAL_DIGITS) {\n        std::size_t i = 0;\n        while (i < 10 && n_digits < TOTAL_DIGITS) {\n            lft.next();\n            if (lft.q > lft.r) continue;\n\n            unsigned digit = lft.extract(3);\n            if (digit == lft.extract(4)) {\n                buffer << digit;\n                lft.produce(digit);\n                ++i;\n                ++n_digits;\n            }\n        }\n\n        for (; i < 10; ++i) buffer << ' ';\n        buffer << \"\\t:\" << n_digits << '\\n';\n    }\n\n    std::cout << buffer.str();\n}",
        27.381,
        516.472
    ],
    "4": [
        "#include <gmpxx.h>\n#include <cstdlib>\n#include <iostream>\n#include <vector>\n#include <string>\n\nclass LFT {\npublic:\n    mpz_class q;\n    mpz_class r;\n    mpz_class t;\n    unsigned k;\n\npublic:\n    LFT() : q(1), r(0), t(1), k(0) {}\n\n    void next() {\n        ++k;\n        r = (2 * k + 1) * (2 * q + r);\n        t = (2 * k + 1) * t;\n        q = q * k;\n    }\n\n    unsigned extract(unsigned x) const {\n        static mpz_class tmp0, tmp1;\n        tmp0 = q * x + r;\n        tmp1 = tmp0 / t;\n        return tmp1.get_ui();\n    }\n\n    void produce(unsigned n) {\n        q = 10 * q;\n        r = 10 * (r - n * t);\n    }\n};\n\nint main(int argc, char** argv) {\n    std::ios_base::sync_with_stdio(false);\n\n    const std::size_t TOTAL_DIGITS = argc > 1 ? std::atol(argv[1]) : 0;\n\n    LFT lft;\n    std::size_t n_digits = 0;\n    std::string buffer;\n    buffer.reserve(TOTAL_DIGITS + (TOTAL_DIGITS / 10 + 1) * 3);\n\n    while (n_digits < TOTAL_DIGITS) {\n        std::size_t i = 0;\n        while (i < 10 && n_digits < TOTAL_DIGITS) {\n            lft.next();\n            if (lft.q > lft.r) continue;\n\n            unsigned digit = lft.extract(3);\n            if (digit == lft.extract(4)) {\n                buffer += std::to_string(digit);\n                lft.produce(digit);\n                ++i;\n                ++n_digits;\n            }\n        }\n\n        for (; i < 10; ++i) buffer += ' ';\n        buffer += \"\\t:\" + std::to_string(n_digits) + '\\n';\n    }\n\n    std::cout << buffer;\n}",
        27.484,
        525.933
    ],
    "5": [
        "#include <gmpxx.h>\n#include <cstdlib>\n#include <iostream>\n#include <string>\n\nclass LFT {\npublic:\n    mpz_class q, r, t;\n    unsigned k;\n\n    LFT() : q(1), r(0), t(1), k(0) {}\n\n    void next() {\n        ++k;\n        r = (2 * k + 1) * (2 * q + r);\n        t = (2 * k + 1) * t;\n        q *= k;\n    }\n\n    unsigned extract(unsigned x) const {\n        static mpz_class tmp0, tmp1;\n        tmp0 = q * x + r;\n        tmp1 = tmp0 / t;\n        return tmp1.get_ui();\n    }\n\n    void produce(unsigned n) {\n        q *= 10;\n        r = 10 * (r - n * t);\n    }\n};\n\nint main(int argc, char** argv) {\n    std::ios_base::sync_with_stdio(false);\n    const std::size_t TOTAL_DIGITS = argc > 1 ? std::atol(argv[1]) : 0;\n\n    LFT lft;\n    std::string buffer;\n    buffer.reserve(TOTAL_DIGITS + (TOTAL_DIGITS / 10 + 1) * 11);\n\n    std::size_t length = 0;  // Counter for total digits\n\n    while (length < TOTAL_DIGITS) {\n        for (/**/; length < TOTAL_DIGITS; /**/) {\n            lft.next();\n            if (lft.q > lft.r)\n                continue;\n\n            unsigned digit = lft.extract(3);\n            if (digit == lft.extract(4)) {\n                buffer += std::to_string(digit);\n                lft.produce(digit);\n                ++length;\n\n                // Every 10 digits block check\n                if (length > 0 && length % 10 == 0) {\n                    buffer += \"\\t:\" + std::to_string(length) + '\\n';\n                    std::cout << buffer;\n                    buffer.clear();\n                }\n            }\n        }\n    }\n\n    if (!buffer.empty()) {\n        std::cout << buffer;\n    }\n    return 0;\n}",
        27.055,
        534.742
    ]
}

Program executed for 3.878732 minutes